//
// File generated by rootcint at Wed Nov 13 09:17:47 2013

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME DataFormatCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "DataFormatCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::storage_manager storage_manager;
      #else
      class storage_manager  :  public ::decoder_base {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::storage_manager::MODE MODE;
         #else
         enum MODE  {
         };
         #endif

         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::storage_manager::STATUS STATUS;
         #else
         enum STATUS  {
         };
         #endif

         // To force the creation of a virtual table, throw just in case.
         virtual ~storage_manager() throw() {};
         unsigned int _index; //
         unsigned int _nevents; //
         unsigned int _nevents_read; //
         unsigned int _nevents_written; //
         STATUS _status; //
         MODE _mode; //
         bool _read_data_array[8]; //
         bool _write_data_array[8]; //
         ::data_base* _ptr_data_array[8]; //
         string _out_fname; //
         vector< ::string > _in_fnames; //
          string _treename; //
         ::TFile* _fout; //
         ::TChain* _in_ch[8]; //
         ::TTree* _out_ch[8]; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void data_base_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_data_base(void *p = 0);
   static void *newArray_data_base(Long_t size, void *p);
   static void delete_data_base(void *p);
   static void deleteArray_data_base(void *p);
   static void destruct_data_base(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::data_base*)
   {
      ::data_base *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::data_base >(0);
      static ::ROOT::TGenericClassInfo 
         instance("data_base", ::data_base::Class_Version(), "./data_base.hh", 27,
                  typeid(::data_base), DefineBehavior(ptr, ptr),
                  &::data_base::Dictionary, isa_proxy, 4,
                  sizeof(::data_base) );
      instance.SetNew(&new_data_base);
      instance.SetNewArray(&newArray_data_base);
      instance.SetDelete(&delete_data_base);
      instance.SetDeleteArray(&deleteArray_data_base);
      instance.SetDestructor(&destruct_data_base);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::data_base*)
   {
      return GenerateInitInstanceLocal((::data_base*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::data_base*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void pmt_waveform_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_pmt_waveform(void *p = 0);
   static void *newArray_pmt_waveform(Long_t size, void *p);
   static void delete_pmt_waveform(void *p);
   static void deleteArray_pmt_waveform(void *p);
   static void destruct_pmt_waveform(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::pmt_waveform*)
   {
      ::pmt_waveform *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::pmt_waveform >(0);
      static ::ROOT::TGenericClassInfo 
         instance("pmt_waveform", ::pmt_waveform::Class_Version(), "./pmt_waveform.hh", 24,
                  typeid(::pmt_waveform), DefineBehavior(ptr, ptr),
                  &::pmt_waveform::Dictionary, isa_proxy, 4,
                  sizeof(::pmt_waveform) );
      instance.SetNew(&new_pmt_waveform);
      instance.SetNewArray(&newArray_pmt_waveform);
      instance.SetDelete(&delete_pmt_waveform);
      instance.SetDeleteArray(&deleteArray_pmt_waveform);
      instance.SetDestructor(&destruct_pmt_waveform);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::pmt_waveform*)
   {
      return GenerateInitInstanceLocal((::pmt_waveform*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::pmt_waveform*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void pmt_wf_collection_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_pmt_wf_collection(void *p = 0);
   static void *newArray_pmt_wf_collection(Long_t size, void *p);
   static void delete_pmt_wf_collection(void *p);
   static void deleteArray_pmt_wf_collection(void *p);
   static void destruct_pmt_wf_collection(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::pmt_wf_collection*)
   {
      ::pmt_wf_collection *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::pmt_wf_collection >(0);
      static ::ROOT::TGenericClassInfo 
         instance("pmt_wf_collection", ::pmt_wf_collection::Class_Version(), "./pmt_waveform.hh", 105,
                  typeid(::pmt_wf_collection), DefineBehavior(ptr, ptr),
                  &::pmt_wf_collection::Dictionary, isa_proxy, 4,
                  sizeof(::pmt_wf_collection) );
      instance.SetNew(&new_pmt_wf_collection);
      instance.SetNewArray(&newArray_pmt_wf_collection);
      instance.SetDelete(&delete_pmt_wf_collection);
      instance.SetDeleteArray(&deleteArray_pmt_wf_collection);
      instance.SetDestructor(&destruct_pmt_wf_collection);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::pmt_wf_collection*)
   {
      return GenerateInitInstanceLocal((::pmt_wf_collection*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::pmt_wf_collection*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void tpc_waveform_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_tpc_waveform(void *p = 0);
   static void *newArray_tpc_waveform(Long_t size, void *p);
   static void delete_tpc_waveform(void *p);
   static void deleteArray_tpc_waveform(void *p);
   static void destruct_tpc_waveform(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::tpc_waveform*)
   {
      ::tpc_waveform *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::tpc_waveform >(0);
      static ::ROOT::TGenericClassInfo 
         instance("tpc_waveform", ::tpc_waveform::Class_Version(), "./tpc_waveform.hh", 24,
                  typeid(::tpc_waveform), DefineBehavior(ptr, ptr),
                  &::tpc_waveform::Dictionary, isa_proxy, 4,
                  sizeof(::tpc_waveform) );
      instance.SetNew(&new_tpc_waveform);
      instance.SetNewArray(&newArray_tpc_waveform);
      instance.SetDelete(&delete_tpc_waveform);
      instance.SetDeleteArray(&deleteArray_tpc_waveform);
      instance.SetDestructor(&destruct_tpc_waveform);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::tpc_waveform*)
   {
      return GenerateInitInstanceLocal((::tpc_waveform*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::tpc_waveform*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void tpc_wf_collection_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_tpc_wf_collection(void *p = 0);
   static void *newArray_tpc_wf_collection(Long_t size, void *p);
   static void delete_tpc_wf_collection(void *p);
   static void deleteArray_tpc_wf_collection(void *p);
   static void destruct_tpc_wf_collection(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::tpc_wf_collection*)
   {
      ::tpc_wf_collection *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::tpc_wf_collection >(0);
      static ::ROOT::TGenericClassInfo 
         instance("tpc_wf_collection", ::tpc_wf_collection::Class_Version(), "./tpc_waveform.hh", 75,
                  typeid(::tpc_wf_collection), DefineBehavior(ptr, ptr),
                  &::tpc_wf_collection::Dictionary, isa_proxy, 4,
                  sizeof(::tpc_wf_collection) );
      instance.SetNew(&new_tpc_wf_collection);
      instance.SetNewArray(&newArray_tpc_wf_collection);
      instance.SetDelete(&delete_tpc_wf_collection);
      instance.SetDeleteArray(&deleteArray_tpc_wf_collection);
      instance.SetDestructor(&destruct_tpc_wf_collection);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::tpc_wf_collection*)
   {
      return GenerateInitInstanceLocal((::tpc_wf_collection*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::tpc_wf_collection*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void trig_info_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_trig_info(void *p = 0);
   static void *newArray_trig_info(Long_t size, void *p);
   static void delete_trig_info(void *p);
   static void deleteArray_trig_info(void *p);
   static void destruct_trig_info(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::trig_info*)
   {
      ::trig_info *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::trig_info >(0);
      static ::ROOT::TGenericClassInfo 
         instance("trig_info", ::trig_info::Class_Version(), "./trig_info.hh", 23,
                  typeid(::trig_info), DefineBehavior(ptr, ptr),
                  &::trig_info::Dictionary, isa_proxy, 4,
                  sizeof(::trig_info) );
      instance.SetNew(&new_trig_info);
      instance.SetNewArray(&newArray_trig_info);
      instance.SetDelete(&delete_trig_info);
      instance.SetDeleteArray(&deleteArray_trig_info);
      instance.SetDestructor(&destruct_trig_info);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::trig_info*)
   {
      return GenerateInitInstanceLocal((::trig_info*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::trig_info*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void pulse_info_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_pulse_info(void *p = 0);
   static void *newArray_pulse_info(Long_t size, void *p);
   static void delete_pulse_info(void *p);
   static void deleteArray_pulse_info(void *p);
   static void destruct_pulse_info(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::pulse_info*)
   {
      ::pulse_info *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::pulse_info >(0);
      static ::ROOT::TGenericClassInfo 
         instance("pulse_info", ::pulse_info::Class_Version(), "./pulse_info.hh", 23,
                  typeid(::pulse_info), DefineBehavior(ptr, ptr),
                  &::pulse_info::Dictionary, isa_proxy, 4,
                  sizeof(::pulse_info) );
      instance.SetNew(&new_pulse_info);
      instance.SetNewArray(&newArray_pulse_info);
      instance.SetDelete(&delete_pulse_info);
      instance.SetDeleteArray(&deleteArray_pulse_info);
      instance.SetDestructor(&destruct_pulse_info);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::pulse_info*)
   {
      return GenerateInitInstanceLocal((::pulse_info*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::pulse_info*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void pulse_collection_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_pulse_collection(void *p = 0);
   static void *newArray_pulse_collection(Long_t size, void *p);
   static void delete_pulse_collection(void *p);
   static void deleteArray_pulse_collection(void *p);
   static void destruct_pulse_collection(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::pulse_collection*)
   {
      ::pulse_collection *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::pulse_collection >(0);
      static ::ROOT::TGenericClassInfo 
         instance("pulse_collection", ::pulse_collection::Class_Version(), "./pulse_info.hh", 156,
                  typeid(::pulse_collection), DefineBehavior(ptr, ptr),
                  &::pulse_collection::Dictionary, isa_proxy, 4,
                  sizeof(::pulse_collection) );
      instance.SetNew(&new_pulse_collection);
      instance.SetNewArray(&newArray_pulse_collection);
      instance.SetDelete(&delete_pulse_collection);
      instance.SetDeleteArray(&deleteArray_pulse_collection);
      instance.SetDestructor(&destruct_pulse_collection);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::pulse_collection*)
   {
      return GenerateInitInstanceLocal((::pulse_collection*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::pulse_collection*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void user_info_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_user_info(void *p = 0);
   static void *newArray_user_info(Long_t size, void *p);
   static void delete_user_info(void *p);
   static void deleteArray_user_info(void *p);
   static void destruct_user_info(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::user_info*)
   {
      ::user_info *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::user_info >(0);
      static ::ROOT::TGenericClassInfo 
         instance("user_info", ::user_info::Class_Version(), "./user_info.hh", 35,
                  typeid(::user_info), DefineBehavior(ptr, ptr),
                  &::user_info::Dictionary, isa_proxy, 4,
                  sizeof(::user_info) );
      instance.SetNew(&new_user_info);
      instance.SetNewArray(&newArray_user_info);
      instance.SetDelete(&delete_user_info);
      instance.SetDeleteArray(&deleteArray_user_info);
      instance.SetDestructor(&destruct_user_info);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::user_info*)
   {
      return GenerateInitInstanceLocal((::user_info*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::user_info*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void user_collection_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_user_collection(void *p = 0);
   static void *newArray_user_collection(Long_t size, void *p);
   static void delete_user_collection(void *p);
   static void deleteArray_user_collection(void *p);
   static void destruct_user_collection(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::user_collection*)
   {
      ::user_collection *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::user_collection >(0);
      static ::ROOT::TGenericClassInfo 
         instance("user_collection", ::user_collection::Class_Version(), "./user_info.hh", 118,
                  typeid(::user_collection), DefineBehavior(ptr, ptr),
                  &::user_collection::Dictionary, isa_proxy, 4,
                  sizeof(::user_collection) );
      instance.SetNew(&new_user_collection);
      instance.SetNewArray(&newArray_user_collection);
      instance.SetDelete(&delete_user_collection);
      instance.SetDeleteArray(&deleteArray_user_collection);
      instance.SetDestructor(&destruct_user_collection);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::user_collection*)
   {
      return GenerateInitInstanceLocal((::user_collection*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::user_collection*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void storage_manager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void storage_manager_Dictionary();
   static void *new_storage_manager(void *p = 0);
   static void *newArray_storage_manager(Long_t size, void *p);
   static void delete_storage_manager(void *p);
   static void deleteArray_storage_manager(void *p);
   static void destruct_storage_manager(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::storage_manager*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::storage_manager) == sizeof(::ROOT::Shadow::storage_manager));
      ::storage_manager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::storage_manager),0);
      static ::ROOT::TGenericClassInfo 
         instance("storage_manager", "./storage_manager.hh", 31,
                  typeid(::storage_manager), DefineBehavior(ptr, ptr),
                  &storage_manager_ShowMembers, &storage_manager_Dictionary, isa_proxy, 4,
                  sizeof(::storage_manager) );
      instance.SetNew(&new_storage_manager);
      instance.SetNewArray(&newArray_storage_manager);
      instance.SetDelete(&delete_storage_manager);
      instance.SetDeleteArray(&deleteArray_storage_manager);
      instance.SetDestructor(&destruct_storage_manager);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::storage_manager*)
   {
      return GenerateInitInstanceLocal((::storage_manager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::storage_manager*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void storage_manager_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::storage_manager*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
TClass *data_base::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *data_base::Class_Name()
{
   return "data_base";
}

//______________________________________________________________________________
const char *data_base::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::data_base*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int data_base::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::data_base*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void data_base::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::data_base*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *data_base::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::data_base*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *pmt_waveform::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *pmt_waveform::Class_Name()
{
   return "pmt_waveform";
}

//______________________________________________________________________________
const char *pmt_waveform::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::pmt_waveform*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int pmt_waveform::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::pmt_waveform*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void pmt_waveform::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::pmt_waveform*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *pmt_waveform::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::pmt_waveform*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *pmt_wf_collection::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *pmt_wf_collection::Class_Name()
{
   return "pmt_wf_collection";
}

//______________________________________________________________________________
const char *pmt_wf_collection::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::pmt_wf_collection*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int pmt_wf_collection::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::pmt_wf_collection*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void pmt_wf_collection::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::pmt_wf_collection*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *pmt_wf_collection::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::pmt_wf_collection*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *tpc_waveform::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *tpc_waveform::Class_Name()
{
   return "tpc_waveform";
}

//______________________________________________________________________________
const char *tpc_waveform::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tpc_waveform*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int tpc_waveform::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tpc_waveform*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void tpc_waveform::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tpc_waveform*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *tpc_waveform::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tpc_waveform*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *tpc_wf_collection::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *tpc_wf_collection::Class_Name()
{
   return "tpc_wf_collection";
}

//______________________________________________________________________________
const char *tpc_wf_collection::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tpc_wf_collection*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int tpc_wf_collection::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tpc_wf_collection*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void tpc_wf_collection::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tpc_wf_collection*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *tpc_wf_collection::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tpc_wf_collection*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *trig_info::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *trig_info::Class_Name()
{
   return "trig_info";
}

//______________________________________________________________________________
const char *trig_info::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::trig_info*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int trig_info::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::trig_info*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void trig_info::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::trig_info*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *trig_info::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::trig_info*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *pulse_info::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *pulse_info::Class_Name()
{
   return "pulse_info";
}

//______________________________________________________________________________
const char *pulse_info::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::pulse_info*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int pulse_info::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::pulse_info*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void pulse_info::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::pulse_info*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *pulse_info::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::pulse_info*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *pulse_collection::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *pulse_collection::Class_Name()
{
   return "pulse_collection";
}

//______________________________________________________________________________
const char *pulse_collection::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::pulse_collection*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int pulse_collection::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::pulse_collection*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void pulse_collection::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::pulse_collection*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *pulse_collection::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::pulse_collection*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *user_info::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *user_info::Class_Name()
{
   return "user_info";
}

//______________________________________________________________________________
const char *user_info::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::user_info*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int user_info::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::user_info*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void user_info::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::user_info*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *user_info::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::user_info*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *user_collection::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *user_collection::Class_Name()
{
   return "user_collection";
}

//______________________________________________________________________________
const char *user_collection::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::user_collection*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int user_collection::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::user_collection*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void user_collection::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::user_collection*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *user_collection::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::user_collection*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void data_base::Streamer(TBuffer &R__b)
{
   // Stream an object of class data_base.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(data_base::Class(),this);
   } else {
      R__b.WriteClassBuffer(data_base::Class(),this);
   }
}

//______________________________________________________________________________
void data_base::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class data_base.
      TClass *R__cl = ::data_base::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_data_base(void *p) {
      return  p ? new(p) ::data_base : new ::data_base;
   }
   static void *newArray_data_base(Long_t nElements, void *p) {
      return p ? new(p) ::data_base[nElements] : new ::data_base[nElements];
   }
   // Wrapper around operator delete
   static void delete_data_base(void *p) {
      delete ((::data_base*)p);
   }
   static void deleteArray_data_base(void *p) {
      delete [] ((::data_base*)p);
   }
   static void destruct_data_base(void *p) {
      typedef ::data_base current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::data_base

//______________________________________________________________________________
void tpc_waveform::Streamer(TBuffer &R__b)
{
   // Stream an object of class tpc_waveform.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(tpc_waveform::Class(),this);
   } else {
      R__b.WriteClassBuffer(tpc_waveform::Class(),this);
   }
}

//______________________________________________________________________________
void tpc_waveform::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class tpc_waveform.
      TClass *R__cl = ::tpc_waveform::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_channel_number", &_channel_number);
      R__insp.GenericShowMembers("vector<unsigned short,allocator<unsigned short> >", ( ::vector<unsigned short,allocator<unsigned short> > *) (this ), false);
      data_base::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_tpc_waveform(void *p) {
      return  p ? new(p) ::tpc_waveform : new ::tpc_waveform;
   }
   static void *newArray_tpc_waveform(Long_t nElements, void *p) {
      return p ? new(p) ::tpc_waveform[nElements] : new ::tpc_waveform[nElements];
   }
   // Wrapper around operator delete
   static void delete_tpc_waveform(void *p) {
      delete ((::tpc_waveform*)p);
   }
   static void deleteArray_tpc_waveform(void *p) {
      delete [] ((::tpc_waveform*)p);
   }
   static void destruct_tpc_waveform(void *p) {
      typedef ::tpc_waveform current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::tpc_waveform

//______________________________________________________________________________
void tpc_wf_collection::Streamer(TBuffer &R__b)
{
   // Stream an object of class tpc_wf_collection.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(tpc_wf_collection::Class(),this);
   } else {
      R__b.WriteClassBuffer(tpc_wf_collection::Class(),this);
   }
}

//______________________________________________________________________________
void tpc_wf_collection::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class tpc_wf_collection.
      TClass *R__cl = ::tpc_wf_collection::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_event_id", &_event_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_event_frame_id", &_event_frame_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_module_address", &_module_address);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_module_id", &_module_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_channel_header_count", &_channel_header_count);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_trigger_frame_id", &_trigger_frame_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_trigger_timeslice", &_trigger_timeslice);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_checksum", &_checksum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nwords", &_nwords);
      R__insp.GenericShowMembers("vector<tpc_waveform,allocator<tpc_waveform> >", ( ::vector<tpc_waveform,allocator<tpc_waveform> > *) (this ), false);
      data_base::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_tpc_wf_collection(void *p) {
      return  p ? new(p) ::tpc_wf_collection : new ::tpc_wf_collection;
   }
   static void *newArray_tpc_wf_collection(Long_t nElements, void *p) {
      return p ? new(p) ::tpc_wf_collection[nElements] : new ::tpc_wf_collection[nElements];
   }
   // Wrapper around operator delete
   static void delete_tpc_wf_collection(void *p) {
      delete ((::tpc_wf_collection*)p);
   }
   static void deleteArray_tpc_wf_collection(void *p) {
      delete [] ((::tpc_wf_collection*)p);
   }
   static void destruct_tpc_wf_collection(void *p) {
      typedef ::tpc_wf_collection current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::tpc_wf_collection

//______________________________________________________________________________
void pmt_waveform::Streamer(TBuffer &R__b)
{
   // Stream an object of class pmt_waveform.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(pmt_waveform::Class(),this);
   } else {
      R__b.WriteClassBuffer(pmt_waveform::Class(),this);
   }
}

//______________________________________________________________________________
void pmt_waveform::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class pmt_waveform.
      TClass *R__cl = ::pmt_waveform::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_channel_number", &_channel_number);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_channel_frame_id", &_channel_frame_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_timeslice", &_timeslice);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_disc_id", &_disc_id);
      R__insp.GenericShowMembers("vector<unsigned short,allocator<unsigned short> >", ( ::vector<unsigned short,allocator<unsigned short> > *) (this ), false);
      data_base::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_pmt_waveform(void *p) {
      return  p ? new(p) ::pmt_waveform : new ::pmt_waveform;
   }
   static void *newArray_pmt_waveform(Long_t nElements, void *p) {
      return p ? new(p) ::pmt_waveform[nElements] : new ::pmt_waveform[nElements];
   }
   // Wrapper around operator delete
   static void delete_pmt_waveform(void *p) {
      delete ((::pmt_waveform*)p);
   }
   static void deleteArray_pmt_waveform(void *p) {
      delete [] ((::pmt_waveform*)p);
   }
   static void destruct_pmt_waveform(void *p) {
      typedef ::pmt_waveform current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::pmt_waveform

//______________________________________________________________________________
void pmt_wf_collection::Streamer(TBuffer &R__b)
{
   // Stream an object of class pmt_wf_collection.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(pmt_wf_collection::Class(),this);
   } else {
      R__b.WriteClassBuffer(pmt_wf_collection::Class(),this);
   }
}

//______________________________________________________________________________
void pmt_wf_collection::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class pmt_wf_collection.
      TClass *R__cl = ::pmt_wf_collection::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_event_id", &_event_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_event_frame_id", &_event_frame_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_module_address", &_module_address);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_module_id", &_module_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_channel_header_count", &_channel_header_count);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_trigger_frame_id", &_trigger_frame_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_trigger_timeslice", &_trigger_timeslice);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_checksum", &_checksum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nwords", &_nwords);
      R__insp.GenericShowMembers("vector<pmt_waveform,allocator<pmt_waveform> >", ( ::vector<pmt_waveform,allocator<pmt_waveform> > *) (this ), false);
      data_base::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_pmt_wf_collection(void *p) {
      return  p ? new(p) ::pmt_wf_collection : new ::pmt_wf_collection;
   }
   static void *newArray_pmt_wf_collection(Long_t nElements, void *p) {
      return p ? new(p) ::pmt_wf_collection[nElements] : new ::pmt_wf_collection[nElements];
   }
   // Wrapper around operator delete
   static void delete_pmt_wf_collection(void *p) {
      delete ((::pmt_wf_collection*)p);
   }
   static void deleteArray_pmt_wf_collection(void *p) {
      delete [] ((::pmt_wf_collection*)p);
   }
   static void destruct_pmt_wf_collection(void *p) {
      typedef ::pmt_wf_collection current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::pmt_wf_collection

//______________________________________________________________________________
void trig_info::Streamer(TBuffer &R__b)
{
   // Stream an object of class trig_info.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(trig_info::Class(),this);
   } else {
      R__b.WriteClassBuffer(trig_info::Class(),this);
   }
}

//______________________________________________________________________________
void trig_info::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class trig_info.
      TClass *R__cl = ::trig_info::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_trig_timeslice", &_trig_timeslice);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_trig_frame_id", &_trig_frame_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_trig_id", &_trig_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pmt_data", &_pmt_data);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_trig_pc", &_trig_pc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_trig_ext", &_trig_ext);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_active", &_active);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_gate1_in", &_gate1_in);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_gate2_in", &_gate2_in);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_veto_in", &_veto_in);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_calib", &_calib);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_reminder_64MHz", &_reminder_64MHz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_reminder_16MHz", &_reminder_16MHz);
      data_base::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_trig_info(void *p) {
      return  p ? new(p) ::trig_info : new ::trig_info;
   }
   static void *newArray_trig_info(Long_t nElements, void *p) {
      return p ? new(p) ::trig_info[nElements] : new ::trig_info[nElements];
   }
   // Wrapper around operator delete
   static void delete_trig_info(void *p) {
      delete ((::trig_info*)p);
   }
   static void deleteArray_trig_info(void *p) {
      delete [] ((::trig_info*)p);
   }
   static void destruct_trig_info(void *p) {
      typedef ::trig_info current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::trig_info

//______________________________________________________________________________
void pulse_info::Streamer(TBuffer &R__b)
{
   // Stream an object of class pulse_info.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(pulse_info::Class(),this);
   } else {
      R__b.WriteClassBuffer(pulse_info::Class(),this);
   }
}

//______________________________________________________________________________
void pulse_info::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class pulse_info.
      TClass *R__cl = ::pulse_info::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_channel_number", &_channel_number);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ped_mean", &_ped_mean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ped_rms", &_ped_rms);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pulse_peak", &_pulse_peak);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_charge", &_charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_start_time", &_start_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_start_time_reco", &_start_time_reco);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_end_time", &_end_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_max_time", &_max_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_channel_frame_id", &_channel_frame_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_timeslice", &_timeslice);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_disc_id", &_disc_id);
      data_base::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_pulse_info(void *p) {
      return  p ? new(p) ::pulse_info : new ::pulse_info;
   }
   static void *newArray_pulse_info(Long_t nElements, void *p) {
      return p ? new(p) ::pulse_info[nElements] : new ::pulse_info[nElements];
   }
   // Wrapper around operator delete
   static void delete_pulse_info(void *p) {
      delete ((::pulse_info*)p);
   }
   static void deleteArray_pulse_info(void *p) {
      delete [] ((::pulse_info*)p);
   }
   static void destruct_pulse_info(void *p) {
      typedef ::pulse_info current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::pulse_info

//______________________________________________________________________________
void pulse_collection::Streamer(TBuffer &R__b)
{
   // Stream an object of class pulse_collection.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(pulse_collection::Class(),this);
   } else {
      R__b.WriteClassBuffer(pulse_collection::Class(),this);
   }
}

//______________________________________________________________________________
void pulse_collection::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class pulse_collection.
      TClass *R__cl = ::pulse_collection::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_sum_charge", &_sum_charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_sum_peak", &_sum_peak);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_npulse", &_npulse);
      R__insp.GenericShowMembers("vector<pulse_info,allocator<pulse_info> >", ( ::vector<pulse_info,allocator<pulse_info> > *) (this ), false);
      data_base::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_pulse_collection(void *p) {
      return  p ? new(p) ::pulse_collection : new ::pulse_collection;
   }
   static void *newArray_pulse_collection(Long_t nElements, void *p) {
      return p ? new(p) ::pulse_collection[nElements] : new ::pulse_collection[nElements];
   }
   // Wrapper around operator delete
   static void delete_pulse_collection(void *p) {
      delete ((::pulse_collection*)p);
   }
   static void deleteArray_pulse_collection(void *p) {
      delete [] ((::pulse_collection*)p);
   }
   static void destruct_pulse_collection(void *p) {
      typedef ::pulse_collection current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::pulse_collection

//______________________________________________________________________________
void user_info::Streamer(TBuffer &R__b)
{
   // Stream an object of class user_info.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(user_info::Class(),this);
   } else {
      R__b.WriteClassBuffer(user_info::Class(),this);
   }
}

//______________________________________________________________________________
void user_info::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class user_info.
      TClass *R__cl = ::user_info::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_d_map", (void*)&_d_map);
      R__insp.InspectMember("map<std::string,double>", (void*)&_d_map, "_d_map.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_i_map", (void*)&_i_map);
      R__insp.InspectMember("map<std::string,int>", (void*)&_i_map, "_i_map.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_s_map", (void*)&_s_map);
      R__insp.InspectMember("map<std::string,std::string>", (void*)&_s_map, "_s_map.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_b_map", (void*)&_b_map);
      R__insp.InspectMember("map<std::string,bool>", (void*)&_b_map, "_b_map.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_darray_map", (void*)&_darray_map);
      R__insp.InspectMember("map<std::string,std::vector<double> >", (void*)&_darray_map, "_darray_map.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_iarray_map", (void*)&_iarray_map);
      R__insp.InspectMember("map<std::string,std::vector<int> >", (void*)&_iarray_map, "_iarray_map.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_sarray_map", (void*)&_sarray_map);
      R__insp.InspectMember("map<std::string,std::vector<std::string> >", (void*)&_sarray_map, "_sarray_map.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_barray_map", (void*)&_barray_map);
      R__insp.InspectMember("map<std::string,std::vector<bool> >", (void*)&_barray_map, "_barray_map.", false);
      data_base::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_user_info(void *p) {
      return  p ? new(p) ::user_info : new ::user_info;
   }
   static void *newArray_user_info(Long_t nElements, void *p) {
      return p ? new(p) ::user_info[nElements] : new ::user_info[nElements];
   }
   // Wrapper around operator delete
   static void delete_user_info(void *p) {
      delete ((::user_info*)p);
   }
   static void deleteArray_user_info(void *p) {
      delete [] ((::user_info*)p);
   }
   static void destruct_user_info(void *p) {
      typedef ::user_info current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::user_info

//______________________________________________________________________________
void user_collection::Streamer(TBuffer &R__b)
{
   // Stream an object of class user_collection.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(user_collection::Class(),this);
   } else {
      R__b.WriteClassBuffer(user_collection::Class(),this);
   }
}

//______________________________________________________________________________
void user_collection::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class user_collection.
      TClass *R__cl = ::user_collection::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.GenericShowMembers("vector<user_info,allocator<user_info> >", ( ::vector<user_info,allocator<user_info> > *) (this ), false);
      data_base::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_user_collection(void *p) {
      return  p ? new(p) ::user_collection : new ::user_collection;
   }
   static void *newArray_user_collection(Long_t nElements, void *p) {
      return p ? new(p) ::user_collection[nElements] : new ::user_collection[nElements];
   }
   // Wrapper around operator delete
   static void delete_user_collection(void *p) {
      delete ((::user_collection*)p);
   }
   static void deleteArray_user_collection(void *p) {
      delete [] ((::user_collection*)p);
   }
   static void destruct_user_collection(void *p) {
      typedef ::user_collection current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::user_collection

//______________________________________________________________________________
namespace ROOT {
   void storage_manager_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class storage_manager.
      typedef ::ROOT::Shadow::storage_manager ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::storage_manager*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_index", &sobj->_index);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nevents", &sobj->_nevents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nevents_read", &sobj->_nevents_read);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nevents_written", &sobj->_nevents_written);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_status", &sobj->_status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mode", &sobj->_mode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_read_data_array[8]", sobj->_read_data_array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_write_data_array[8]", sobj->_write_data_array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_ptr_data_array[8]", &sobj->_ptr_data_array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_out_fname", (void*)&sobj->_out_fname);
      R__insp.InspectMember("string", (void*)&sobj->_out_fname, "_out_fname.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_in_fnames", (void*)&sobj->_in_fnames);
      R__insp.InspectMember("vector<std::string>", (void*)&sobj->_in_fnames, "_in_fnames.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_treename", (void*)&sobj->_treename);
      R__insp.InspectMember("const string", (void*)&sobj->_treename, "_treename.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_fout", &sobj->_fout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_in_ch[8]", &sobj->_in_ch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_out_ch[8]", &sobj->_out_ch);
      R__insp.GenericShowMembers("decoder_base", ( ::decoder_base * )( (::storage_manager*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_storage_manager(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::storage_manager : new ::storage_manager;
   }
   static void *newArray_storage_manager(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::storage_manager[nElements] : new ::storage_manager[nElements];
   }
   // Wrapper around operator delete
   static void delete_storage_manager(void *p) {
      delete ((::storage_manager*)p);
   }
   static void deleteArray_storage_manager(void *p) {
      delete [] ((::storage_manager*)p);
   }
   static void destruct_storage_manager(void *p) {
      typedef ::storage_manager current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::storage_manager

namespace ROOT {
   void maplEstringcOboolgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOboolgR_Dictionary();
   static void *new_maplEstringcOboolgR(void *p = 0);
   static void *newArray_maplEstringcOboolgR(Long_t size, void *p);
   static void delete_maplEstringcOboolgR(void *p);
   static void deleteArray_maplEstringcOboolgR(void *p);
   static void destruct_maplEstringcOboolgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,bool>*)
   {
      map<string,bool> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,bool>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,bool>", -2, "prec_stl/map", 63,
                  typeid(map<string,bool>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOboolgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,bool>) );
      instance.SetNew(&new_maplEstringcOboolgR);
      instance.SetNewArray(&newArray_maplEstringcOboolgR);
      instance.SetDelete(&delete_maplEstringcOboolgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOboolgR);
      instance.SetDestructor(&destruct_maplEstringcOboolgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,bool> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,bool>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOboolgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,bool>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOboolgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,bool> : new map<string,bool>;
   }
   static void *newArray_maplEstringcOboolgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,bool>[nElements] : new map<string,bool>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOboolgR(void *p) {
      delete ((map<string,bool>*)p);
   }
   static void deleteArray_maplEstringcOboolgR(void *p) {
      delete [] ((map<string,bool>*)p);
   }
   static void destruct_maplEstringcOboolgR(void *p) {
      typedef map<string,bool> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,bool>

namespace ROOT {
   void maplEstringcOdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOdoublegR_Dictionary();
   static void *new_maplEstringcOdoublegR(void *p = 0);
   static void *newArray_maplEstringcOdoublegR(Long_t size, void *p);
   static void delete_maplEstringcOdoublegR(void *p);
   static void deleteArray_maplEstringcOdoublegR(void *p);
   static void destruct_maplEstringcOdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,double>*)
   {
      map<string,double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,double>", -2, "map.dll", 0,
                  typeid(map<string,double>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,double>) );
      instance.SetNew(&new_maplEstringcOdoublegR);
      instance.SetNewArray(&newArray_maplEstringcOdoublegR);
      instance.SetDelete(&delete_maplEstringcOdoublegR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOdoublegR);
      instance.SetDestructor(&destruct_maplEstringcOdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,double> : new map<string,double>;
   }
   static void *newArray_maplEstringcOdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,double>[nElements] : new map<string,double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOdoublegR(void *p) {
      delete ((map<string,double>*)p);
   }
   static void deleteArray_maplEstringcOdoublegR(void *p) {
      delete [] ((map<string,double>*)p);
   }
   static void destruct_maplEstringcOdoublegR(void *p) {
      typedef map<string,double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,double>

namespace ROOT {
   void maplEstringcOintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOintgR_Dictionary();
   static void *new_maplEstringcOintgR(void *p = 0);
   static void *newArray_maplEstringcOintgR(Long_t size, void *p);
   static void delete_maplEstringcOintgR(void *p);
   static void deleteArray_maplEstringcOintgR(void *p);
   static void destruct_maplEstringcOintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,int>*)
   {
      map<string,int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,int>", -2, "map.dll", 0,
                  typeid(map<string,int>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOintgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,int>) );
      instance.SetNew(&new_maplEstringcOintgR);
      instance.SetNewArray(&newArray_maplEstringcOintgR);
      instance.SetDelete(&delete_maplEstringcOintgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOintgR);
      instance.SetDestructor(&destruct_maplEstringcOintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,int> : new map<string,int>;
   }
   static void *newArray_maplEstringcOintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,int>[nElements] : new map<string,int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOintgR(void *p) {
      delete ((map<string,int>*)p);
   }
   static void deleteArray_maplEstringcOintgR(void *p) {
      delete [] ((map<string,int>*)p);
   }
   static void destruct_maplEstringcOintgR(void *p) {
      typedef map<string,int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,int>

namespace ROOT {
   void maplEstringcOstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOstringgR_Dictionary();
   static void *new_maplEstringcOstringgR(void *p = 0);
   static void *newArray_maplEstringcOstringgR(Long_t size, void *p);
   static void delete_maplEstringcOstringgR(void *p);
   static void deleteArray_maplEstringcOstringgR(void *p);
   static void destruct_maplEstringcOstringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,string>*)
   {
      map<string,string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,string>", -2, "prec_stl/map", 63,
                  typeid(map<string,string>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOstringgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,string>) );
      instance.SetNew(&new_maplEstringcOstringgR);
      instance.SetNewArray(&newArray_maplEstringcOstringgR);
      instance.SetDelete(&delete_maplEstringcOstringgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOstringgR);
      instance.SetDestructor(&destruct_maplEstringcOstringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOstringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,string>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,string> : new map<string,string>;
   }
   static void *newArray_maplEstringcOstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,string>[nElements] : new map<string,string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOstringgR(void *p) {
      delete ((map<string,string>*)p);
   }
   static void deleteArray_maplEstringcOstringgR(void *p) {
      delete [] ((map<string,string>*)p);
   }
   static void destruct_maplEstringcOstringgR(void *p) {
      typedef map<string,string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,string>

namespace ROOT {
   void maplEstringcOvectorlEboolgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOvectorlEboolgRsPgR_Dictionary();
   static void *new_maplEstringcOvectorlEboolgRsPgR(void *p = 0);
   static void *newArray_maplEstringcOvectorlEboolgRsPgR(Long_t size, void *p);
   static void delete_maplEstringcOvectorlEboolgRsPgR(void *p);
   static void deleteArray_maplEstringcOvectorlEboolgRsPgR(void *p);
   static void destruct_maplEstringcOvectorlEboolgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,vector<bool> >*)
   {
      map<string,vector<bool> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,vector<bool> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,vector<bool> >", -2, "prec_stl/map", 63,
                  typeid(map<string,vector<bool> >), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOvectorlEboolgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,vector<bool> >) );
      instance.SetNew(&new_maplEstringcOvectorlEboolgRsPgR);
      instance.SetNewArray(&newArray_maplEstringcOvectorlEboolgRsPgR);
      instance.SetDelete(&delete_maplEstringcOvectorlEboolgRsPgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOvectorlEboolgRsPgR);
      instance.SetDestructor(&destruct_maplEstringcOvectorlEboolgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,vector<bool> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,vector<bool> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOvectorlEboolgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,vector<bool> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOvectorlEboolgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<bool> > : new map<string,vector<bool> >;
   }
   static void *newArray_maplEstringcOvectorlEboolgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<bool> >[nElements] : new map<string,vector<bool> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOvectorlEboolgRsPgR(void *p) {
      delete ((map<string,vector<bool> >*)p);
   }
   static void deleteArray_maplEstringcOvectorlEboolgRsPgR(void *p) {
      delete [] ((map<string,vector<bool> >*)p);
   }
   static void destruct_maplEstringcOvectorlEboolgRsPgR(void *p) {
      typedef map<string,vector<bool> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,vector<bool> >

namespace ROOT {
   void maplEstringcOvectorlEdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOvectorlEdoublegRsPgR_Dictionary();
   static void *new_maplEstringcOvectorlEdoublegRsPgR(void *p = 0);
   static void *newArray_maplEstringcOvectorlEdoublegRsPgR(Long_t size, void *p);
   static void delete_maplEstringcOvectorlEdoublegRsPgR(void *p);
   static void deleteArray_maplEstringcOvectorlEdoublegRsPgR(void *p);
   static void destruct_maplEstringcOvectorlEdoublegRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,vector<double> >*)
   {
      map<string,vector<double> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,vector<double> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,vector<double> >", -2, "prec_stl/map", 63,
                  typeid(map<string,vector<double> >), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOvectorlEdoublegRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,vector<double> >) );
      instance.SetNew(&new_maplEstringcOvectorlEdoublegRsPgR);
      instance.SetNewArray(&newArray_maplEstringcOvectorlEdoublegRsPgR);
      instance.SetDelete(&delete_maplEstringcOvectorlEdoublegRsPgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOvectorlEdoublegRsPgR);
      instance.SetDestructor(&destruct_maplEstringcOvectorlEdoublegRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,vector<double> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,vector<double> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOvectorlEdoublegRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,vector<double> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOvectorlEdoublegRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<double> > : new map<string,vector<double> >;
   }
   static void *newArray_maplEstringcOvectorlEdoublegRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<double> >[nElements] : new map<string,vector<double> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOvectorlEdoublegRsPgR(void *p) {
      delete ((map<string,vector<double> >*)p);
   }
   static void deleteArray_maplEstringcOvectorlEdoublegRsPgR(void *p) {
      delete [] ((map<string,vector<double> >*)p);
   }
   static void destruct_maplEstringcOvectorlEdoublegRsPgR(void *p) {
      typedef map<string,vector<double> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,vector<double> >

namespace ROOT {
   void maplEstringcOvectorlEintgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOvectorlEintgRsPgR_Dictionary();
   static void *new_maplEstringcOvectorlEintgRsPgR(void *p = 0);
   static void *newArray_maplEstringcOvectorlEintgRsPgR(Long_t size, void *p);
   static void delete_maplEstringcOvectorlEintgRsPgR(void *p);
   static void deleteArray_maplEstringcOvectorlEintgRsPgR(void *p);
   static void destruct_maplEstringcOvectorlEintgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,vector<int> >*)
   {
      map<string,vector<int> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,vector<int> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,vector<int> >", -2, "prec_stl/map", 63,
                  typeid(map<string,vector<int> >), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOvectorlEintgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,vector<int> >) );
      instance.SetNew(&new_maplEstringcOvectorlEintgRsPgR);
      instance.SetNewArray(&newArray_maplEstringcOvectorlEintgRsPgR);
      instance.SetDelete(&delete_maplEstringcOvectorlEintgRsPgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOvectorlEintgRsPgR);
      instance.SetDestructor(&destruct_maplEstringcOvectorlEintgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,vector<int> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,vector<int> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOvectorlEintgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,vector<int> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOvectorlEintgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<int> > : new map<string,vector<int> >;
   }
   static void *newArray_maplEstringcOvectorlEintgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<int> >[nElements] : new map<string,vector<int> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOvectorlEintgRsPgR(void *p) {
      delete ((map<string,vector<int> >*)p);
   }
   static void deleteArray_maplEstringcOvectorlEintgRsPgR(void *p) {
      delete [] ((map<string,vector<int> >*)p);
   }
   static void destruct_maplEstringcOvectorlEintgRsPgR(void *p) {
      typedef map<string,vector<int> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,vector<int> >

namespace ROOT {
   void maplEstringcOvectorlEstringgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOvectorlEstringgRsPgR_Dictionary();
   static void *new_maplEstringcOvectorlEstringgRsPgR(void *p = 0);
   static void *newArray_maplEstringcOvectorlEstringgRsPgR(Long_t size, void *p);
   static void delete_maplEstringcOvectorlEstringgRsPgR(void *p);
   static void deleteArray_maplEstringcOvectorlEstringgRsPgR(void *p);
   static void destruct_maplEstringcOvectorlEstringgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,vector<string> >*)
   {
      map<string,vector<string> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,vector<string> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,vector<string> >", -2, "prec_stl/map", 63,
                  typeid(map<string,vector<string> >), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOvectorlEstringgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,vector<string> >) );
      instance.SetNew(&new_maplEstringcOvectorlEstringgRsPgR);
      instance.SetNewArray(&newArray_maplEstringcOvectorlEstringgRsPgR);
      instance.SetDelete(&delete_maplEstringcOvectorlEstringgRsPgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOvectorlEstringgRsPgR);
      instance.SetDestructor(&destruct_maplEstringcOvectorlEstringgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,vector<string> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,vector<string> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOvectorlEstringgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,vector<string> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOvectorlEstringgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<string> > : new map<string,vector<string> >;
   }
   static void *newArray_maplEstringcOvectorlEstringgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<string> >[nElements] : new map<string,vector<string> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOvectorlEstringgRsPgR(void *p) {
      delete ((map<string,vector<string> >*)p);
   }
   static void deleteArray_maplEstringcOvectorlEstringgRsPgR(void *p) {
      delete [] ((map<string,vector<string> >*)p);
   }
   static void destruct_maplEstringcOvectorlEstringgRsPgR(void *p) {
      typedef map<string,vector<string> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,vector<string> >

namespace ROOT {
   void vectorlEboolgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEboolgR_Dictionary();
   static void *new_vectorlEboolgR(void *p = 0);
   static void *newArray_vectorlEboolgR(Long_t size, void *p);
   static void delete_vectorlEboolgR(void *p);
   static void deleteArray_vectorlEboolgR(void *p);
   static void destruct_vectorlEboolgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<bool>*)
   {
      vector<bool> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<bool>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<bool>", -2, "vectorbool.dll", 0,
                  typeid(vector<bool>), DefineBehavior(ptr, ptr),
                  0, &vectorlEboolgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<bool>) );
      instance.SetNew(&new_vectorlEboolgR);
      instance.SetNewArray(&newArray_vectorlEboolgR);
      instance.SetDelete(&delete_vectorlEboolgR);
      instance.SetDeleteArray(&deleteArray_vectorlEboolgR);
      instance.SetDestructor(&destruct_vectorlEboolgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<bool> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<bool>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEboolgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<bool>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEboolgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<bool> : new vector<bool>;
   }
   static void *newArray_vectorlEboolgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<bool>[nElements] : new vector<bool>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEboolgR(void *p) {
      delete ((vector<bool>*)p);
   }
   static void deleteArray_vectorlEboolgR(void *p) {
      delete [] ((vector<bool>*)p);
   }
   static void destruct_vectorlEboolgR(void *p) {
      typedef vector<bool> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<bool>

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

namespace ROOT {
   void vectorlEpmt_waveformgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEpmt_waveformgR_Dictionary();
   static void *new_vectorlEpmt_waveformgR(void *p = 0);
   static void *newArray_vectorlEpmt_waveformgR(Long_t size, void *p);
   static void delete_vectorlEpmt_waveformgR(void *p);
   static void deleteArray_vectorlEpmt_waveformgR(void *p);
   static void destruct_vectorlEpmt_waveformgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<pmt_waveform>*)
   {
      vector<pmt_waveform> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<pmt_waveform>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<pmt_waveform>", -2, "prec_stl/vector", 49,
                  typeid(vector<pmt_waveform>), DefineBehavior(ptr, ptr),
                  0, &vectorlEpmt_waveformgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<pmt_waveform>) );
      instance.SetNew(&new_vectorlEpmt_waveformgR);
      instance.SetNewArray(&newArray_vectorlEpmt_waveformgR);
      instance.SetDelete(&delete_vectorlEpmt_waveformgR);
      instance.SetDeleteArray(&deleteArray_vectorlEpmt_waveformgR);
      instance.SetDestructor(&destruct_vectorlEpmt_waveformgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<pmt_waveform> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<pmt_waveform>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEpmt_waveformgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<pmt_waveform>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEpmt_waveformgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pmt_waveform> : new vector<pmt_waveform>;
   }
   static void *newArray_vectorlEpmt_waveformgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pmt_waveform>[nElements] : new vector<pmt_waveform>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEpmt_waveformgR(void *p) {
      delete ((vector<pmt_waveform>*)p);
   }
   static void deleteArray_vectorlEpmt_waveformgR(void *p) {
      delete [] ((vector<pmt_waveform>*)p);
   }
   static void destruct_vectorlEpmt_waveformgR(void *p) {
      typedef vector<pmt_waveform> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<pmt_waveform>

namespace ROOT {
   void vectorlEpulse_infogR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEpulse_infogR_Dictionary();
   static void *new_vectorlEpulse_infogR(void *p = 0);
   static void *newArray_vectorlEpulse_infogR(Long_t size, void *p);
   static void delete_vectorlEpulse_infogR(void *p);
   static void deleteArray_vectorlEpulse_infogR(void *p);
   static void destruct_vectorlEpulse_infogR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<pulse_info>*)
   {
      vector<pulse_info> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<pulse_info>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<pulse_info>", -2, "prec_stl/vector", 49,
                  typeid(vector<pulse_info>), DefineBehavior(ptr, ptr),
                  0, &vectorlEpulse_infogR_Dictionary, isa_proxy, 4,
                  sizeof(vector<pulse_info>) );
      instance.SetNew(&new_vectorlEpulse_infogR);
      instance.SetNewArray(&newArray_vectorlEpulse_infogR);
      instance.SetDelete(&delete_vectorlEpulse_infogR);
      instance.SetDeleteArray(&deleteArray_vectorlEpulse_infogR);
      instance.SetDestructor(&destruct_vectorlEpulse_infogR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<pulse_info> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<pulse_info>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEpulse_infogR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<pulse_info>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEpulse_infogR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pulse_info> : new vector<pulse_info>;
   }
   static void *newArray_vectorlEpulse_infogR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pulse_info>[nElements] : new vector<pulse_info>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEpulse_infogR(void *p) {
      delete ((vector<pulse_info>*)p);
   }
   static void deleteArray_vectorlEpulse_infogR(void *p) {
      delete [] ((vector<pulse_info>*)p);
   }
   static void destruct_vectorlEpulse_infogR(void *p) {
      typedef vector<pulse_info> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<pulse_info>

namespace ROOT {
   void vectorlEstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEstringgR_Dictionary();
   static void *new_vectorlEstringgR(void *p = 0);
   static void *newArray_vectorlEstringgR(Long_t size, void *p);
   static void delete_vectorlEstringgR(void *p);
   static void deleteArray_vectorlEstringgR(void *p);
   static void destruct_vectorlEstringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<string>*)
   {
      vector<string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<string>", -2, "prec_stl/vector", 49,
                  typeid(vector<string>), DefineBehavior(ptr, ptr),
                  0, &vectorlEstringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<string>) );
      instance.SetNew(&new_vectorlEstringgR);
      instance.SetNewArray(&newArray_vectorlEstringgR);
      instance.SetDelete(&delete_vectorlEstringgR);
      instance.SetDeleteArray(&deleteArray_vectorlEstringgR);
      instance.SetDestructor(&destruct_vectorlEstringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEstringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<string>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string> : new vector<string>;
   }
   static void *newArray_vectorlEstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string>[nElements] : new vector<string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEstringgR(void *p) {
      delete ((vector<string>*)p);
   }
   static void deleteArray_vectorlEstringgR(void *p) {
      delete [] ((vector<string>*)p);
   }
   static void destruct_vectorlEstringgR(void *p) {
      typedef vector<string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<string>

namespace ROOT {
   void vectorlEtpc_waveformgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEtpc_waveformgR_Dictionary();
   static void *new_vectorlEtpc_waveformgR(void *p = 0);
   static void *newArray_vectorlEtpc_waveformgR(Long_t size, void *p);
   static void delete_vectorlEtpc_waveformgR(void *p);
   static void deleteArray_vectorlEtpc_waveformgR(void *p);
   static void destruct_vectorlEtpc_waveformgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<tpc_waveform>*)
   {
      vector<tpc_waveform> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<tpc_waveform>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<tpc_waveform>", -2, "prec_stl/vector", 49,
                  typeid(vector<tpc_waveform>), DefineBehavior(ptr, ptr),
                  0, &vectorlEtpc_waveformgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<tpc_waveform>) );
      instance.SetNew(&new_vectorlEtpc_waveformgR);
      instance.SetNewArray(&newArray_vectorlEtpc_waveformgR);
      instance.SetDelete(&delete_vectorlEtpc_waveformgR);
      instance.SetDeleteArray(&deleteArray_vectorlEtpc_waveformgR);
      instance.SetDestructor(&destruct_vectorlEtpc_waveformgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<tpc_waveform> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<tpc_waveform>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEtpc_waveformgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<tpc_waveform>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEtpc_waveformgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<tpc_waveform> : new vector<tpc_waveform>;
   }
   static void *newArray_vectorlEtpc_waveformgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<tpc_waveform>[nElements] : new vector<tpc_waveform>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEtpc_waveformgR(void *p) {
      delete ((vector<tpc_waveform>*)p);
   }
   static void deleteArray_vectorlEtpc_waveformgR(void *p) {
      delete [] ((vector<tpc_waveform>*)p);
   }
   static void destruct_vectorlEtpc_waveformgR(void *p) {
      typedef vector<tpc_waveform> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<tpc_waveform>

namespace ROOT {
   void vectorlEunsignedsPshortgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEunsignedsPshortgR_Dictionary();
   static void *new_vectorlEunsignedsPshortgR(void *p = 0);
   static void *newArray_vectorlEunsignedsPshortgR(Long_t size, void *p);
   static void delete_vectorlEunsignedsPshortgR(void *p);
   static void deleteArray_vectorlEunsignedsPshortgR(void *p);
   static void destruct_vectorlEunsignedsPshortgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<unsigned short>*)
   {
      vector<unsigned short> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<unsigned short>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<unsigned short>", -2, "vector.dll", 0,
                  typeid(vector<unsigned short>), DefineBehavior(ptr, ptr),
                  0, &vectorlEunsignedsPshortgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<unsigned short>) );
      instance.SetNew(&new_vectorlEunsignedsPshortgR);
      instance.SetNewArray(&newArray_vectorlEunsignedsPshortgR);
      instance.SetDelete(&delete_vectorlEunsignedsPshortgR);
      instance.SetDeleteArray(&deleteArray_vectorlEunsignedsPshortgR);
      instance.SetDestructor(&destruct_vectorlEunsignedsPshortgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<unsigned short> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<unsigned short>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEunsignedsPshortgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<unsigned short>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEunsignedsPshortgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned short> : new vector<unsigned short>;
   }
   static void *newArray_vectorlEunsignedsPshortgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned short>[nElements] : new vector<unsigned short>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEunsignedsPshortgR(void *p) {
      delete ((vector<unsigned short>*)p);
   }
   static void deleteArray_vectorlEunsignedsPshortgR(void *p) {
      delete [] ((vector<unsigned short>*)p);
   }
   static void destruct_vectorlEunsignedsPshortgR(void *p) {
      typedef vector<unsigned short> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<unsigned short>

namespace ROOT {
   void vectorlEuser_infogR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEuser_infogR_Dictionary();
   static void *new_vectorlEuser_infogR(void *p = 0);
   static void *newArray_vectorlEuser_infogR(Long_t size, void *p);
   static void delete_vectorlEuser_infogR(void *p);
   static void deleteArray_vectorlEuser_infogR(void *p);
   static void destruct_vectorlEuser_infogR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<user_info>*)
   {
      vector<user_info> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<user_info>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<user_info>", -2, "prec_stl/vector", 49,
                  typeid(vector<user_info>), DefineBehavior(ptr, ptr),
                  0, &vectorlEuser_infogR_Dictionary, isa_proxy, 4,
                  sizeof(vector<user_info>) );
      instance.SetNew(&new_vectorlEuser_infogR);
      instance.SetNewArray(&newArray_vectorlEuser_infogR);
      instance.SetDelete(&delete_vectorlEuser_infogR);
      instance.SetDeleteArray(&deleteArray_vectorlEuser_infogR);
      instance.SetDestructor(&destruct_vectorlEuser_infogR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<user_info> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<user_info>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEuser_infogR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<user_info>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEuser_infogR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<user_info> : new vector<user_info>;
   }
   static void *newArray_vectorlEuser_infogR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<user_info>[nElements] : new vector<user_info>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEuser_infogR(void *p) {
      delete ((vector<user_info>*)p);
   }
   static void deleteArray_vectorlEuser_infogR(void *p) {
      delete [] ((vector<user_info>*)p);
   }
   static void destruct_vectorlEuser_infogR(void *p) {
      typedef vector<user_info> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<user_info>

/********************************************************
* DataFormatCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableDataFormatCint();

extern "C" void G__set_cpp_environmentDataFormatCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("DataFormat-TypeDef.hh");
  G__add_compiledheader("data_base.hh");
  G__add_compiledheader("pmt_waveform.hh");
  G__add_compiledheader("pulse_info.hh");
  G__add_compiledheader("storage_manager.hh");
  G__add_compiledheader("tpc_waveform.hh");
  G__add_compiledheader("trig_info.hh");
  G__add_compiledheader("user_info.hh");
  G__cpp_reset_tagtableDataFormatCint();
}
#include <new>
extern "C" int G__cpp_dllrevDataFormatCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* data_base */
static int G__DataFormatCint_226_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   data_base* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new data_base[n];
     } else {
       p = new((void*) gvp) data_base[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new data_base;
     } else {
       p = new((void*) gvp) data_base;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_data_base));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_226_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   data_base* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new data_base(*(data_base*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) data_base(*(data_base*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_data_base));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_226_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((data_base*) G__getstructoffset())->clear_data();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_226_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) data_base::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_226_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) data_base::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_226_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) data_base::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_226_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      data_base::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_226_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((data_base*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_226_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) data_base::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_226_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) data_base::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_226_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) data_base::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_226_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) data_base::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef data_base G__Tdata_base;
static int G__DataFormatCint_226_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (data_base*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((data_base*) (soff+(sizeof(data_base)*i)))->~G__Tdata_base();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (data_base*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((data_base*) (soff))->~G__Tdata_base();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_226_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   data_base* dest = (data_base*) G__getstructoffset();
   *dest = *(data_base*) libp->para[0].ref;
   const data_base& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pmt_waveform */
static int G__DataFormatCint_227_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pmt_waveform* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pmt_waveform(
(PMT::ch_number_t) G__int(libp->para[0]), (PMT::word_t) G__int(libp->para[1])
, (PMT::DISCRIMINATOR) G__int(libp->para[2]), (PMT::word_t) G__int(libp->para[3])
, (size_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) pmt_waveform(
(PMT::ch_number_t) G__int(libp->para[0]), (PMT::word_t) G__int(libp->para[1])
, (PMT::DISCRIMINATOR) G__int(libp->para[2]), (PMT::word_t) G__int(libp->para[3])
, (size_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pmt_waveform(
(PMT::ch_number_t) G__int(libp->para[0]), (PMT::word_t) G__int(libp->para[1])
, (PMT::DISCRIMINATOR) G__int(libp->para[2]), (PMT::word_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) pmt_waveform(
(PMT::ch_number_t) G__int(libp->para[0]), (PMT::word_t) G__int(libp->para[1])
, (PMT::DISCRIMINATOR) G__int(libp->para[2]), (PMT::word_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pmt_waveform(
(PMT::ch_number_t) G__int(libp->para[0]), (PMT::word_t) G__int(libp->para[1])
, (PMT::DISCRIMINATOR) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) pmt_waveform(
(PMT::ch_number_t) G__int(libp->para[0]), (PMT::word_t) G__int(libp->para[1])
, (PMT::DISCRIMINATOR) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pmt_waveform((PMT::ch_number_t) G__int(libp->para[0]), (PMT::word_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) pmt_waveform((PMT::ch_number_t) G__int(libp->para[0]), (PMT::word_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pmt_waveform((PMT::ch_number_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) pmt_waveform((PMT::ch_number_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new pmt_waveform[n];
       } else {
         p = new((void*) gvp) pmt_waveform[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new pmt_waveform;
       } else {
         p = new((void*) gvp) pmt_waveform;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_227_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pmt_waveform* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pmt_waveform(*(pmt_waveform*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) pmt_waveform(*(pmt_waveform*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_227_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pmt_waveform*) G__getstructoffset())->set_channel_number((PMT::ch_number_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_227_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pmt_waveform*) G__getstructoffset())->set_channel_frame_id((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_227_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pmt_waveform*) G__getstructoffset())->set_disc_id((PMT::DISCRIMINATOR) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_227_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pmt_waveform*) G__getstructoffset())->set_timeslice((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_227_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const pmt_waveform*) G__getstructoffset())->channel_number());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_227_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const pmt_waveform*) G__getstructoffset())->channel_frame_id());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_227_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const pmt_waveform*) G__getstructoffset())->disc_id());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_227_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const pmt_waveform*) G__getstructoffset())->timeslice());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_227_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) pmt_waveform::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_227_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) pmt_waveform::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_227_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) pmt_waveform::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_227_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      pmt_waveform::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_227_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pmt_waveform*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_227_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) pmt_waveform::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_227_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) pmt_waveform::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_227_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) pmt_waveform::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_227_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) pmt_waveform::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pmt_waveform G__Tpmt_waveform;
static int G__DataFormatCint_227_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pmt_waveform*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pmt_waveform*) (soff+(sizeof(pmt_waveform)*i)))->~G__Tpmt_waveform();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pmt_waveform*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pmt_waveform*) (soff))->~G__Tpmt_waveform();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_227_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pmt_waveform* dest = (pmt_waveform*) G__getstructoffset();
   *dest = *(pmt_waveform*) libp->para[0].ref;
   const pmt_waveform& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pmt_wf_collection */
static int G__DataFormatCint_228_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pmt_wf_collection* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pmt_wf_collection((size_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) pmt_wf_collection((size_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new pmt_wf_collection[n];
       } else {
         p = new((void*) gvp) pmt_wf_collection[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new pmt_wf_collection;
       } else {
         p = new((void*) gvp) pmt_wf_collection;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_pmt_wf_collection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pmt_wf_collection* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pmt_wf_collection(*(pmt_wf_collection*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) pmt_wf_collection(*(pmt_wf_collection*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_pmt_wf_collection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pmt_wf_collection*) G__getstructoffset())->set_event_id((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pmt_wf_collection*) G__getstructoffset())->set_event_frame_id((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pmt_wf_collection*) G__getstructoffset())->set_module_address((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pmt_wf_collection*) G__getstructoffset())->set_module_id((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pmt_wf_collection*) G__getstructoffset())->set_channel_header_count((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pmt_wf_collection*) G__getstructoffset())->set_checksum((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pmt_wf_collection*) G__getstructoffset())->set_nwords((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pmt_wf_collection*) G__getstructoffset())->set_trigger_frame_id((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pmt_wf_collection*) G__getstructoffset())->set_trigger_timeslice((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const pmt_wf_collection*) G__getstructoffset())->event_id());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const pmt_wf_collection*) G__getstructoffset())->event_frame_id());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const pmt_wf_collection*) G__getstructoffset())->module_address());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const pmt_wf_collection*) G__getstructoffset())->module_id());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const pmt_wf_collection*) G__getstructoffset())->channel_header_count());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const pmt_wf_collection*) G__getstructoffset())->checksum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const pmt_wf_collection*) G__getstructoffset())->nwords());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const pmt_wf_collection*) G__getstructoffset())->trigger_frame_id());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const pmt_wf_collection*) G__getstructoffset())->trigger_timeslice());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) pmt_wf_collection::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) pmt_wf_collection::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) pmt_wf_collection::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      pmt_wf_collection::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pmt_wf_collection*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) pmt_wf_collection::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) pmt_wf_collection::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) pmt_wf_collection::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_228_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) pmt_wf_collection::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pmt_wf_collection G__Tpmt_wf_collection;
static int G__DataFormatCint_228_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pmt_wf_collection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pmt_wf_collection*) (soff+(sizeof(pmt_wf_collection)*i)))->~G__Tpmt_wf_collection();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pmt_wf_collection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pmt_wf_collection*) (soff))->~G__Tpmt_wf_collection();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_228_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pmt_wf_collection* dest = (pmt_wf_collection*) G__getstructoffset();
   *dest = *(pmt_wf_collection*) libp->para[0].ref;
   const pmt_wf_collection& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<pmt_waveform,allocator<pmt_waveform> > */
static int G__DataFormatCint_230_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<pmt_waveform,allocator<pmt_waveform> >::reference obj = ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->at((vector<pmt_waveform,allocator<pmt_waveform> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pmt_waveform,allocator<pmt_waveform> >::const_reference obj = ((const vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->at((vector<pmt_waveform,allocator<pmt_waveform> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pmt_waveform,allocator<pmt_waveform> >::iterator* pobj;
         vector<pmt_waveform,allocator<pmt_waveform> >::iterator xobj = ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->begin();
         pobj = new vector<pmt_waveform,allocator<pmt_waveform> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pmt_waveform,allocator<pmt_waveform> >::iterator* pobj;
         vector<pmt_waveform,allocator<pmt_waveform> >::iterator xobj = ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->end();
         pobj = new vector<pmt_waveform,allocator<pmt_waveform> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pmt_waveform,allocator<pmt_waveform> >::reverse_iterator* pobj;
         vector<pmt_waveform,allocator<pmt_waveform> >::reverse_iterator xobj = ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->rbegin();
         pobj = new vector<pmt_waveform,allocator<pmt_waveform> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pmt_waveform,allocator<pmt_waveform> >::reverse_iterator* pobj;
         vector<pmt_waveform,allocator<pmt_waveform> >::reverse_iterator xobj = ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->rend();
         pobj = new vector<pmt_waveform,allocator<pmt_waveform> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->resize((vector<pmt_waveform,allocator<pmt_waveform> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->resize((vector<pmt_waveform,allocator<pmt_waveform> >::size_type) G__int(libp->para[0]), *((pmt_waveform*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<pmt_waveform,allocator<pmt_waveform> >::reference obj = ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->operator[]((vector<pmt_waveform,allocator<pmt_waveform> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pmt_waveform,allocator<pmt_waveform> >::const_reference obj = ((const vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->operator[]((vector<pmt_waveform,allocator<pmt_waveform> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<pmt_waveform,allocator<pmt_waveform> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<pmt_waveform,allocator<pmt_waveform> >[n];
     } else {
       p = new((void*) gvp) vector<pmt_waveform,allocator<pmt_waveform> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<pmt_waveform,allocator<pmt_waveform> >;
     } else {
       p = new((void*) gvp) vector<pmt_waveform,allocator<pmt_waveform> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<pmt_waveform,allocator<pmt_waveform> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<pmt_waveform,allocator<pmt_waveform> >((vector<pmt_waveform,allocator<pmt_waveform> >::size_type) G__int(libp->para[0]), *(pmt_waveform*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<pmt_waveform,allocator<pmt_waveform> >((vector<pmt_waveform,allocator<pmt_waveform> >::size_type) G__int(libp->para[0]), *(pmt_waveform*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<pmt_waveform,allocator<pmt_waveform> >((vector<pmt_waveform,allocator<pmt_waveform> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<pmt_waveform,allocator<pmt_waveform> >((vector<pmt_waveform,allocator<pmt_waveform> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<pmt_waveform,allocator<pmt_waveform> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<pmt_waveform,allocator<pmt_waveform> >(*(vector<pmt_waveform,allocator<pmt_waveform> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<pmt_waveform,allocator<pmt_waveform> >(*(vector<pmt_waveform,allocator<pmt_waveform> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<pmt_waveform,allocator<pmt_waveform> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<pmt_waveform,allocator<pmt_waveform> >(*((vector<pmt_waveform,allocator<pmt_waveform> >::const_iterator*) G__int(libp->para[0])), *((vector<pmt_waveform,allocator<pmt_waveform> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<pmt_waveform,allocator<pmt_waveform> >(*((vector<pmt_waveform,allocator<pmt_waveform> >::const_iterator*) G__int(libp->para[0])), *((vector<pmt_waveform,allocator<pmt_waveform> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<pmt_waveform,allocator<pmt_waveform> >& obj = ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->operator=(*(vector<pmt_waveform,allocator<pmt_waveform> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->reserve((vector<pmt_waveform,allocator<pmt_waveform> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const pmt_waveform& obj = ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const pmt_waveform& obj = ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->push_back(*(pmt_waveform*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->swap(*(vector<pmt_waveform,allocator<pmt_waveform> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pmt_waveform,allocator<pmt_waveform> >::iterator* pobj;
         vector<pmt_waveform,allocator<pmt_waveform> >::iterator xobj = ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->insert(*((vector<pmt_waveform,allocator<pmt_waveform> >::iterator*) G__int(libp->para[0])), *(pmt_waveform*) libp->para[1].ref);
         pobj = new vector<pmt_waveform,allocator<pmt_waveform> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->insert(*((vector<pmt_waveform,allocator<pmt_waveform> >::iterator*) G__int(libp->para[0])), *((vector<pmt_waveform,allocator<pmt_waveform> >::const_iterator*) G__int(libp->para[1]))
, *((vector<pmt_waveform,allocator<pmt_waveform> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->insert(*((vector<pmt_waveform,allocator<pmt_waveform> >::iterator*) G__int(libp->para[0])), (vector<pmt_waveform,allocator<pmt_waveform> >::size_type) G__int(libp->para[1])
, *(pmt_waveform*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->erase(*((vector<pmt_waveform,allocator<pmt_waveform> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->erase(*((vector<pmt_waveform,allocator<pmt_waveform> >::iterator*) G__int(libp->para[0])), *((vector<pmt_waveform,allocator<pmt_waveform> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_230_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pmt_waveform,allocator<pmt_waveform> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<pmt_waveform,allocator<pmt_waveform> > G__TvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR;
static int G__DataFormatCint_230_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<pmt_waveform,allocator<pmt_waveform> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<pmt_waveform,allocator<pmt_waveform> >*) (soff+(sizeof(vector<pmt_waveform,allocator<pmt_waveform> >)*i)))->~G__TvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<pmt_waveform,allocator<pmt_waveform> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<pmt_waveform,allocator<pmt_waveform> >*) (soff))->~G__TvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* tpc_waveform */
static int G__DataFormatCint_233_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tpc_waveform* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tpc_waveform((PMT::ch_number_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) tpc_waveform((PMT::ch_number_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tpc_waveform((PMT::ch_number_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) tpc_waveform((PMT::ch_number_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new tpc_waveform[n];
       } else {
         p = new((void*) gvp) tpc_waveform[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new tpc_waveform;
       } else {
         p = new((void*) gvp) tpc_waveform;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_233_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tpc_waveform* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new tpc_waveform(*(tpc_waveform*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) tpc_waveform(*(tpc_waveform*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_233_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tpc_waveform*) G__getstructoffset())->set_channel_number((PMT::ch_number_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_233_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const tpc_waveform*) G__getstructoffset())->channel_number());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_233_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) tpc_waveform::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_233_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tpc_waveform::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_233_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) tpc_waveform::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_233_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      tpc_waveform::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_233_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tpc_waveform*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_233_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tpc_waveform::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_233_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tpc_waveform::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_233_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tpc_waveform::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_233_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tpc_waveform::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef tpc_waveform G__Ttpc_waveform;
static int G__DataFormatCint_233_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (tpc_waveform*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((tpc_waveform*) (soff+(sizeof(tpc_waveform)*i)))->~G__Ttpc_waveform();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (tpc_waveform*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((tpc_waveform*) (soff))->~G__Ttpc_waveform();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_233_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tpc_waveform* dest = (tpc_waveform*) G__getstructoffset();
   *dest = *(tpc_waveform*) libp->para[0].ref;
   const tpc_waveform& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* tpc_wf_collection */
static int G__DataFormatCint_234_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tpc_wf_collection* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tpc_wf_collection((size_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) tpc_wf_collection((size_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new tpc_wf_collection[n];
       } else {
         p = new((void*) gvp) tpc_wf_collection[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new tpc_wf_collection;
       } else {
         p = new((void*) gvp) tpc_wf_collection;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_tpc_wf_collection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tpc_wf_collection* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new tpc_wf_collection(*(tpc_wf_collection*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) tpc_wf_collection(*(tpc_wf_collection*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_tpc_wf_collection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tpc_wf_collection*) G__getstructoffset())->set_event_id((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tpc_wf_collection*) G__getstructoffset())->set_event_frame_id((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tpc_wf_collection*) G__getstructoffset())->set_module_address((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tpc_wf_collection*) G__getstructoffset())->set_module_id((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tpc_wf_collection*) G__getstructoffset())->set_channel_header_count((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tpc_wf_collection*) G__getstructoffset())->set_checksum((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tpc_wf_collection*) G__getstructoffset())->set_nwords((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tpc_wf_collection*) G__getstructoffset())->set_trigger_frame_id((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tpc_wf_collection*) G__getstructoffset())->set_trigger_timeslice((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const tpc_wf_collection*) G__getstructoffset())->event_id());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const tpc_wf_collection*) G__getstructoffset())->event_frame_id());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const tpc_wf_collection*) G__getstructoffset())->module_address());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const tpc_wf_collection*) G__getstructoffset())->module_id());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const tpc_wf_collection*) G__getstructoffset())->channel_header_count());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const tpc_wf_collection*) G__getstructoffset())->checksum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const tpc_wf_collection*) G__getstructoffset())->nwords());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const tpc_wf_collection*) G__getstructoffset())->trigger_frame_id());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const tpc_wf_collection*) G__getstructoffset())->trigger_timeslice());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) tpc_wf_collection::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tpc_wf_collection::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) tpc_wf_collection::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      tpc_wf_collection::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tpc_wf_collection*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tpc_wf_collection::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tpc_wf_collection::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tpc_wf_collection::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_234_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tpc_wf_collection::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef tpc_wf_collection G__Ttpc_wf_collection;
static int G__DataFormatCint_234_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (tpc_wf_collection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((tpc_wf_collection*) (soff+(sizeof(tpc_wf_collection)*i)))->~G__Ttpc_wf_collection();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (tpc_wf_collection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((tpc_wf_collection*) (soff))->~G__Ttpc_wf_collection();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_234_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tpc_wf_collection* dest = (tpc_wf_collection*) G__getstructoffset();
   *dest = *(tpc_wf_collection*) libp->para[0].ref;
   const tpc_wf_collection& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<tpc_waveform,allocator<tpc_waveform> > */
static int G__DataFormatCint_236_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<tpc_waveform,allocator<tpc_waveform> >::reference obj = ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->at((vector<tpc_waveform,allocator<tpc_waveform> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tpc_waveform,allocator<tpc_waveform> >::const_reference obj = ((const vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->at((vector<tpc_waveform,allocator<tpc_waveform> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tpc_waveform,allocator<tpc_waveform> >::iterator* pobj;
         vector<tpc_waveform,allocator<tpc_waveform> >::iterator xobj = ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->begin();
         pobj = new vector<tpc_waveform,allocator<tpc_waveform> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tpc_waveform,allocator<tpc_waveform> >::iterator* pobj;
         vector<tpc_waveform,allocator<tpc_waveform> >::iterator xobj = ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->end();
         pobj = new vector<tpc_waveform,allocator<tpc_waveform> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tpc_waveform,allocator<tpc_waveform> >::reverse_iterator* pobj;
         vector<tpc_waveform,allocator<tpc_waveform> >::reverse_iterator xobj = ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->rbegin();
         pobj = new vector<tpc_waveform,allocator<tpc_waveform> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tpc_waveform,allocator<tpc_waveform> >::reverse_iterator* pobj;
         vector<tpc_waveform,allocator<tpc_waveform> >::reverse_iterator xobj = ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->rend();
         pobj = new vector<tpc_waveform,allocator<tpc_waveform> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->resize((vector<tpc_waveform,allocator<tpc_waveform> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->resize((vector<tpc_waveform,allocator<tpc_waveform> >::size_type) G__int(libp->para[0]), *((tpc_waveform*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<tpc_waveform,allocator<tpc_waveform> >::reference obj = ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->operator[]((vector<tpc_waveform,allocator<tpc_waveform> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tpc_waveform,allocator<tpc_waveform> >::const_reference obj = ((const vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->operator[]((vector<tpc_waveform,allocator<tpc_waveform> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<tpc_waveform,allocator<tpc_waveform> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<tpc_waveform,allocator<tpc_waveform> >[n];
     } else {
       p = new((void*) gvp) vector<tpc_waveform,allocator<tpc_waveform> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<tpc_waveform,allocator<tpc_waveform> >;
     } else {
       p = new((void*) gvp) vector<tpc_waveform,allocator<tpc_waveform> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<tpc_waveform,allocator<tpc_waveform> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<tpc_waveform,allocator<tpc_waveform> >((vector<tpc_waveform,allocator<tpc_waveform> >::size_type) G__int(libp->para[0]), *(tpc_waveform*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<tpc_waveform,allocator<tpc_waveform> >((vector<tpc_waveform,allocator<tpc_waveform> >::size_type) G__int(libp->para[0]), *(tpc_waveform*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<tpc_waveform,allocator<tpc_waveform> >((vector<tpc_waveform,allocator<tpc_waveform> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<tpc_waveform,allocator<tpc_waveform> >((vector<tpc_waveform,allocator<tpc_waveform> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<tpc_waveform,allocator<tpc_waveform> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<tpc_waveform,allocator<tpc_waveform> >(*(vector<tpc_waveform,allocator<tpc_waveform> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<tpc_waveform,allocator<tpc_waveform> >(*(vector<tpc_waveform,allocator<tpc_waveform> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<tpc_waveform,allocator<tpc_waveform> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<tpc_waveform,allocator<tpc_waveform> >(*((vector<tpc_waveform,allocator<tpc_waveform> >::const_iterator*) G__int(libp->para[0])), *((vector<tpc_waveform,allocator<tpc_waveform> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<tpc_waveform,allocator<tpc_waveform> >(*((vector<tpc_waveform,allocator<tpc_waveform> >::const_iterator*) G__int(libp->para[0])), *((vector<tpc_waveform,allocator<tpc_waveform> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<tpc_waveform,allocator<tpc_waveform> >& obj = ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->operator=(*(vector<tpc_waveform,allocator<tpc_waveform> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->reserve((vector<tpc_waveform,allocator<tpc_waveform> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const tpc_waveform& obj = ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const tpc_waveform& obj = ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->push_back(*(tpc_waveform*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->swap(*(vector<tpc_waveform,allocator<tpc_waveform> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tpc_waveform,allocator<tpc_waveform> >::iterator* pobj;
         vector<tpc_waveform,allocator<tpc_waveform> >::iterator xobj = ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->insert(*((vector<tpc_waveform,allocator<tpc_waveform> >::iterator*) G__int(libp->para[0])), *(tpc_waveform*) libp->para[1].ref);
         pobj = new vector<tpc_waveform,allocator<tpc_waveform> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->insert(*((vector<tpc_waveform,allocator<tpc_waveform> >::iterator*) G__int(libp->para[0])), *((vector<tpc_waveform,allocator<tpc_waveform> >::const_iterator*) G__int(libp->para[1]))
, *((vector<tpc_waveform,allocator<tpc_waveform> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->insert(*((vector<tpc_waveform,allocator<tpc_waveform> >::iterator*) G__int(libp->para[0])), (vector<tpc_waveform,allocator<tpc_waveform> >::size_type) G__int(libp->para[1])
, *(tpc_waveform*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->erase(*((vector<tpc_waveform,allocator<tpc_waveform> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->erase(*((vector<tpc_waveform,allocator<tpc_waveform> >::iterator*) G__int(libp->para[0])), *((vector<tpc_waveform,allocator<tpc_waveform> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_236_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tpc_waveform,allocator<tpc_waveform> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<tpc_waveform,allocator<tpc_waveform> > G__TvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR;
static int G__DataFormatCint_236_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<tpc_waveform,allocator<tpc_waveform> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<tpc_waveform,allocator<tpc_waveform> >*) (soff+(sizeof(vector<tpc_waveform,allocator<tpc_waveform> >)*i)))->~G__TvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<tpc_waveform,allocator<tpc_waveform> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<tpc_waveform,allocator<tpc_waveform> >*) (soff))->~G__TvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* trig_info */
static int G__DataFormatCint_239_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   trig_info* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new trig_info[n];
     } else {
       p = new((void*) gvp) trig_info[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new trig_info;
     } else {
       p = new((void*) gvp) trig_info;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_trig_info));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   trig_info* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new trig_info(*(trig_info*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) trig_info(*(trig_info*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_trig_info));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((trig_info*) G__getstructoffset())->set_reminder_16MHz((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((trig_info*) G__getstructoffset())->set_reminder_64MHz((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((trig_info*) G__getstructoffset())->set_trig_frame_id((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((trig_info*) G__getstructoffset())->set_trig_timeslice((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((trig_info*) G__getstructoffset())->set_trig_id((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((trig_info*) G__getstructoffset())->set_pmt_data((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((trig_info*) G__getstructoffset())->reminder_16MHz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((trig_info*) G__getstructoffset())->reminder_64MHz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((trig_info*) G__getstructoffset())->trig_frame_id());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((trig_info*) G__getstructoffset())->trig_timeslice());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((trig_info*) G__getstructoffset())->trig_id());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((trig_info*) G__getstructoffset())->pmt_data());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((trig_info*) G__getstructoffset())->set_trigger_bits(
(bool) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (bool) G__int(libp->para[4]), (bool) G__int(libp->para[5])
, (bool) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((trig_info*) G__getstructoffset())->trig_pc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((trig_info*) G__getstructoffset())->trig_ext());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((trig_info*) G__getstructoffset())->active());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((trig_info*) G__getstructoffset())->gate1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((trig_info*) G__getstructoffset())->gate2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((trig_info*) G__getstructoffset())->veto_in());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((trig_info*) G__getstructoffset())->calib());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) trig_info::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) trig_info::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) trig_info::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      trig_info::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((trig_info*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) trig_info::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) trig_info::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) trig_info::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_239_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) trig_info::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef trig_info G__Ttrig_info;
static int G__DataFormatCint_239_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (trig_info*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((trig_info*) (soff+(sizeof(trig_info)*i)))->~G__Ttrig_info();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (trig_info*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((trig_info*) (soff))->~G__Ttrig_info();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_239_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   trig_info* dest = (trig_info*) G__getstructoffset();
   *dest = *(trig_info*) libp->para[0].ref;
   const trig_info& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pulse_info */
static int G__DataFormatCint_240_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pulse_info* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pulse_info[n];
     } else {
       p = new((void*) gvp) pulse_info[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pulse_info;
     } else {
       p = new((void*) gvp) pulse_info;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pulse_info* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pulse_info(*(pulse_info*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) pulse_info(*(pulse_info*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_info*) G__getstructoffset())->set_channel_number((PMT::ch_number_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_info*) G__getstructoffset())->set_ped_mean((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_info*) G__getstructoffset())->set_ped_rms((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_info*) G__getstructoffset())->set_pulse_peak((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_info*) G__getstructoffset())->set_charge((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_info*) G__getstructoffset())->set_start_time((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_info*) G__getstructoffset())->set_start_time_reco((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_info*) G__getstructoffset())->set_end_time((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_info*) G__getstructoffset())->set_max_time((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_info*) G__getstructoffset())->set_disc_id((PMT::DISCRIMINATOR) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_info*) G__getstructoffset())->set_channel_frame_id((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_info*) G__getstructoffset())->set_timeslice((PMT::word_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const pulse_info*) G__getstructoffset())->channel_number());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const pulse_info*) G__getstructoffset())->ped_mean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const pulse_info*) G__getstructoffset())->ped_rms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const pulse_info*) G__getstructoffset())->pulse_peak());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const pulse_info*) G__getstructoffset())->charge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const pulse_info*) G__getstructoffset())->start_time());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const pulse_info*) G__getstructoffset())->start_time_reco());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const pulse_info*) G__getstructoffset())->end_time());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const pulse_info*) G__getstructoffset())->max_time());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const pulse_info*) G__getstructoffset())->disc_id());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const pulse_info*) G__getstructoffset())->frame_id());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const pulse_info*) G__getstructoffset())->timeslice());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) pulse_info::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) pulse_info::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) pulse_info::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      pulse_info::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_info*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) pulse_info::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) pulse_info::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) pulse_info::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_240_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) pulse_info::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pulse_info G__Tpulse_info;
static int G__DataFormatCint_240_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pulse_info*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pulse_info*) (soff+(sizeof(pulse_info)*i)))->~G__Tpulse_info();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pulse_info*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pulse_info*) (soff))->~G__Tpulse_info();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_240_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pulse_info* dest = (pulse_info*) G__getstructoffset();
   *dest = *(pulse_info*) libp->para[0].ref;
   const pulse_info& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pulse_collection */
static int G__DataFormatCint_241_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pulse_collection* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pulse_collection[n];
     } else {
       p = new((void*) gvp) pulse_collection[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pulse_collection;
     } else {
       p = new((void*) gvp) pulse_collection;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_pulse_collection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_241_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pulse_collection* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pulse_collection(*(pulse_collection*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) pulse_collection(*(pulse_collection*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_pulse_collection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_241_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_collection*) G__getstructoffset())->calculate_sum();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_241_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const pulse_collection*) G__getstructoffset())->sum_charge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_241_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const pulse_collection*) G__getstructoffset())->sum_peak());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_241_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const pulse_collection*) G__getstructoffset())->npulse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_241_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_collection*) G__getstructoffset())->set_sum_charge((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_241_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_collection*) G__getstructoffset())->set_sum_peak((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_241_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_collection*) G__getstructoffset())->set_npulse((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_241_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) pulse_collection::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_241_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) pulse_collection::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_241_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) pulse_collection::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_241_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      pulse_collection::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_241_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_collection*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_241_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) pulse_collection::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_241_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) pulse_collection::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_241_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) pulse_collection::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_241_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) pulse_collection::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pulse_collection G__Tpulse_collection;
static int G__DataFormatCint_241_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pulse_collection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pulse_collection*) (soff+(sizeof(pulse_collection)*i)))->~G__Tpulse_collection();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pulse_collection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pulse_collection*) (soff))->~G__Tpulse_collection();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_241_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pulse_collection* dest = (pulse_collection*) G__getstructoffset();
   *dest = *(pulse_collection*) libp->para[0].ref;
   const pulse_collection& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<pulse_info,allocator<pulse_info> > */
static int G__DataFormatCint_243_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<pulse_info,allocator<pulse_info> >::reference obj = ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->at((vector<pulse_info,allocator<pulse_info> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pulse_info,allocator<pulse_info> >::const_reference obj = ((const vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->at((vector<pulse_info,allocator<pulse_info> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pulse_info,allocator<pulse_info> >::iterator* pobj;
         vector<pulse_info,allocator<pulse_info> >::iterator xobj = ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->begin();
         pobj = new vector<pulse_info,allocator<pulse_info> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pulse_info,allocator<pulse_info> >::iterator* pobj;
         vector<pulse_info,allocator<pulse_info> >::iterator xobj = ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->end();
         pobj = new vector<pulse_info,allocator<pulse_info> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pulse_info,allocator<pulse_info> >::reverse_iterator* pobj;
         vector<pulse_info,allocator<pulse_info> >::reverse_iterator xobj = ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->rbegin();
         pobj = new vector<pulse_info,allocator<pulse_info> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pulse_info,allocator<pulse_info> >::reverse_iterator* pobj;
         vector<pulse_info,allocator<pulse_info> >::reverse_iterator xobj = ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->rend();
         pobj = new vector<pulse_info,allocator<pulse_info> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->resize((vector<pulse_info,allocator<pulse_info> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->resize((vector<pulse_info,allocator<pulse_info> >::size_type) G__int(libp->para[0]), *((pulse_info*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<pulse_info,allocator<pulse_info> >::reference obj = ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->operator[]((vector<pulse_info,allocator<pulse_info> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pulse_info,allocator<pulse_info> >::const_reference obj = ((const vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->operator[]((vector<pulse_info,allocator<pulse_info> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<pulse_info,allocator<pulse_info> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<pulse_info,allocator<pulse_info> >[n];
     } else {
       p = new((void*) gvp) vector<pulse_info,allocator<pulse_info> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<pulse_info,allocator<pulse_info> >;
     } else {
       p = new((void*) gvp) vector<pulse_info,allocator<pulse_info> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<pulse_info,allocator<pulse_info> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<pulse_info,allocator<pulse_info> >((vector<pulse_info,allocator<pulse_info> >::size_type) G__int(libp->para[0]), *(pulse_info*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<pulse_info,allocator<pulse_info> >((vector<pulse_info,allocator<pulse_info> >::size_type) G__int(libp->para[0]), *(pulse_info*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<pulse_info,allocator<pulse_info> >((vector<pulse_info,allocator<pulse_info> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<pulse_info,allocator<pulse_info> >((vector<pulse_info,allocator<pulse_info> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<pulse_info,allocator<pulse_info> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<pulse_info,allocator<pulse_info> >(*(vector<pulse_info,allocator<pulse_info> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<pulse_info,allocator<pulse_info> >(*(vector<pulse_info,allocator<pulse_info> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<pulse_info,allocator<pulse_info> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<pulse_info,allocator<pulse_info> >(*((vector<pulse_info,allocator<pulse_info> >::const_iterator*) G__int(libp->para[0])), *((vector<pulse_info,allocator<pulse_info> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<pulse_info,allocator<pulse_info> >(*((vector<pulse_info,allocator<pulse_info> >::const_iterator*) G__int(libp->para[0])), *((vector<pulse_info,allocator<pulse_info> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<pulse_info,allocator<pulse_info> >& obj = ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->operator=(*(vector<pulse_info,allocator<pulse_info> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->reserve((vector<pulse_info,allocator<pulse_info> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const pulse_info& obj = ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const pulse_info& obj = ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->push_back(*(pulse_info*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->swap(*(vector<pulse_info,allocator<pulse_info> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pulse_info,allocator<pulse_info> >::iterator* pobj;
         vector<pulse_info,allocator<pulse_info> >::iterator xobj = ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->insert(*((vector<pulse_info,allocator<pulse_info> >::iterator*) G__int(libp->para[0])), *(pulse_info*) libp->para[1].ref);
         pobj = new vector<pulse_info,allocator<pulse_info> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->insert(*((vector<pulse_info,allocator<pulse_info> >::iterator*) G__int(libp->para[0])), *((vector<pulse_info,allocator<pulse_info> >::const_iterator*) G__int(libp->para[1]))
, *((vector<pulse_info,allocator<pulse_info> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->insert(*((vector<pulse_info,allocator<pulse_info> >::iterator*) G__int(libp->para[0])), (vector<pulse_info,allocator<pulse_info> >::size_type) G__int(libp->para[1])
, *(pulse_info*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->erase(*((vector<pulse_info,allocator<pulse_info> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->erase(*((vector<pulse_info,allocator<pulse_info> >::iterator*) G__int(libp->para[0])), *((vector<pulse_info,allocator<pulse_info> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_243_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pulse_info,allocator<pulse_info> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<pulse_info,allocator<pulse_info> > G__TvectorlEpulse_infocOallocatorlEpulse_infogRsPgR;
static int G__DataFormatCint_243_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<pulse_info,allocator<pulse_info> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<pulse_info,allocator<pulse_info> >*) (soff+(sizeof(vector<pulse_info,allocator<pulse_info> >)*i)))->~G__TvectorlEpulse_infocOallocatorlEpulse_infogRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<pulse_info,allocator<pulse_info> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<pulse_info,allocator<pulse_info> >*) (soff))->~G__TvectorlEpulse_infocOallocatorlEpulse_infogRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* user_info */
static int G__DataFormatCint_481_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((user_info*) G__getstructoffset())->dump_contents();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   user_info* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new user_info[n];
     } else {
       p = new((void*) gvp) user_info[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new user_info;
     } else {
       p = new((void*) gvp) user_info;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_user_info));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   user_info* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new user_info(*(user_info*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) user_info(*(user_info*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_user_info));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((user_info*) G__getstructoffset())->store(*((string*) G__int(libp->para[0])), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((user_info*) G__getstructoffset())->store(*((string*) G__int(libp->para[0])), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((user_info*) G__getstructoffset())->store(*((string*) G__int(libp->para[0])), *((string*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((user_info*) G__getstructoffset())->store(*((string*) G__int(libp->para[0])), (bool) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((user_info*) G__getstructoffset())->append(*((string*) G__int(libp->para[0])), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((user_info*) G__getstructoffset())->append(*((string*) G__int(libp->para[0])), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((user_info*) G__getstructoffset())->append(*((string*) G__int(libp->para[0])), *((string*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((user_info*) G__getstructoffset())->append(*((string*) G__int(libp->para[0])), (bool) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const user_info*) G__getstructoffset())->get_double(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const user_info*) G__getstructoffset())->get_int(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const user_info*) G__getstructoffset())->get_string(*((string*) G__int(libp->para[0])));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const user_info*) G__getstructoffset())->get_bool(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((user_info*) G__getstructoffset())->get_darray(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((user_info*) G__getstructoffset())->get_iarray(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((user_info*) G__getstructoffset())->get_sarray(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((user_info*) G__getstructoffset())->get_barray(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) user_info::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) user_info::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) user_info::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      user_info::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((user_info*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) user_info::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) user_info::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) user_info::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_481_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) user_info::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef user_info G__Tuser_info;
static int G__DataFormatCint_481_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (user_info*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((user_info*) (soff+(sizeof(user_info)*i)))->~G__Tuser_info();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (user_info*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((user_info*) (soff))->~G__Tuser_info();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_481_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   user_info* dest = (user_info*) G__getstructoffset();
   *dest = *(user_info*) libp->para[0].ref;
   const user_info& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* user_collection */
static int G__DataFormatCint_532_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   user_collection* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new user_collection[n];
     } else {
       p = new((void*) gvp) user_collection[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new user_collection;
     } else {
       p = new((void*) gvp) user_collection;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_user_collection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_532_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   user_collection* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new user_collection(*(user_collection*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) user_collection(*(user_collection*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_user_collection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_532_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) user_collection::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_532_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) user_collection::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_532_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) user_collection::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_532_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      user_collection::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_532_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((user_collection*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_532_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) user_collection::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_532_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) user_collection::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_532_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) user_collection::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_532_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) user_collection::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef user_collection G__Tuser_collection;
static int G__DataFormatCint_532_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (user_collection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((user_collection*) (soff+(sizeof(user_collection)*i)))->~G__Tuser_collection();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (user_collection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((user_collection*) (soff))->~G__Tuser_collection();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataFormatCint_532_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   user_collection* dest = (user_collection*) G__getstructoffset();
   *dest = *(user_collection*) libp->para[0].ref;
   const user_collection& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<user_info,allocator<user_info> > */
static int G__DataFormatCint_534_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<user_info,allocator<user_info> >::reference obj = ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->at((vector<user_info,allocator<user_info> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<user_info,allocator<user_info> >::const_reference obj = ((const vector<user_info,allocator<user_info> >*) G__getstructoffset())->at((vector<user_info,allocator<user_info> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<user_info,allocator<user_info> >::iterator* pobj;
         vector<user_info,allocator<user_info> >::iterator xobj = ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->begin();
         pobj = new vector<user_info,allocator<user_info> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<user_info,allocator<user_info> >::iterator* pobj;
         vector<user_info,allocator<user_info> >::iterator xobj = ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->end();
         pobj = new vector<user_info,allocator<user_info> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<user_info,allocator<user_info> >::reverse_iterator* pobj;
         vector<user_info,allocator<user_info> >::reverse_iterator xobj = ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->rbegin();
         pobj = new vector<user_info,allocator<user_info> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<user_info,allocator<user_info> >::reverse_iterator* pobj;
         vector<user_info,allocator<user_info> >::reverse_iterator xobj = ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->rend();
         pobj = new vector<user_info,allocator<user_info> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<user_info,allocator<user_info> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<user_info,allocator<user_info> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->resize((vector<user_info,allocator<user_info> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->resize((vector<user_info,allocator<user_info> >::size_type) G__int(libp->para[0]), *((user_info*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<user_info,allocator<user_info> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<user_info,allocator<user_info> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<user_info,allocator<user_info> >::reference obj = ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->operator[]((vector<user_info,allocator<user_info> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<user_info,allocator<user_info> >::const_reference obj = ((const vector<user_info,allocator<user_info> >*) G__getstructoffset())->operator[]((vector<user_info,allocator<user_info> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<user_info,allocator<user_info> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<user_info,allocator<user_info> >[n];
     } else {
       p = new((void*) gvp) vector<user_info,allocator<user_info> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<user_info,allocator<user_info> >;
     } else {
       p = new((void*) gvp) vector<user_info,allocator<user_info> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<user_info,allocator<user_info> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<user_info,allocator<user_info> >((vector<user_info,allocator<user_info> >::size_type) G__int(libp->para[0]), *(user_info*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<user_info,allocator<user_info> >((vector<user_info,allocator<user_info> >::size_type) G__int(libp->para[0]), *(user_info*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<user_info,allocator<user_info> >((vector<user_info,allocator<user_info> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<user_info,allocator<user_info> >((vector<user_info,allocator<user_info> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<user_info,allocator<user_info> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<user_info,allocator<user_info> >(*(vector<user_info,allocator<user_info> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<user_info,allocator<user_info> >(*(vector<user_info,allocator<user_info> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<user_info,allocator<user_info> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<user_info,allocator<user_info> >(*((vector<user_info,allocator<user_info> >::const_iterator*) G__int(libp->para[0])), *((vector<user_info,allocator<user_info> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<user_info,allocator<user_info> >(*((vector<user_info,allocator<user_info> >::const_iterator*) G__int(libp->para[0])), *((vector<user_info,allocator<user_info> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<user_info,allocator<user_info> >& obj = ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->operator=(*(vector<user_info,allocator<user_info> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->reserve((vector<user_info,allocator<user_info> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const user_info& obj = ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const user_info& obj = ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->push_back(*(user_info*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->swap(*(vector<user_info,allocator<user_info> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<user_info,allocator<user_info> >::iterator* pobj;
         vector<user_info,allocator<user_info> >::iterator xobj = ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->insert(*((vector<user_info,allocator<user_info> >::iterator*) G__int(libp->para[0])), *(user_info*) libp->para[1].ref);
         pobj = new vector<user_info,allocator<user_info> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->insert(*((vector<user_info,allocator<user_info> >::iterator*) G__int(libp->para[0])), *((vector<user_info,allocator<user_info> >::const_iterator*) G__int(libp->para[1]))
, *((vector<user_info,allocator<user_info> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->insert(*((vector<user_info,allocator<user_info> >::iterator*) G__int(libp->para[0])), (vector<user_info,allocator<user_info> >::size_type) G__int(libp->para[1])
, *(user_info*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->erase(*((vector<user_info,allocator<user_info> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->erase(*((vector<user_info,allocator<user_info> >::iterator*) G__int(libp->para[0])), *((vector<user_info,allocator<user_info> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_534_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<user_info,allocator<user_info> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<user_info,allocator<user_info> > G__TvectorlEuser_infocOallocatorlEuser_infogRsPgR;
static int G__DataFormatCint_534_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<user_info,allocator<user_info> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<user_info,allocator<user_info> >*) (soff+(sizeof(vector<user_info,allocator<user_info> >)*i)))->~G__TvectorlEuser_infocOallocatorlEuser_infogRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<user_info,allocator<user_info> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<user_info,allocator<user_info> >*) (soff))->~G__TvectorlEuser_infocOallocatorlEuser_infogRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* storage_manager */
static int G__DataFormatCint_682_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   storage_manager* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new storage_manager((storage_manager::MODE) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) storage_manager((storage_manager::MODE) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new storage_manager[n];
       } else {
         p = new((void*) gvp) storage_manager[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new storage_manager;
       } else {
         p = new((void*) gvp) storage_manager;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((storage_manager*) G__getstructoffset())->set_data_to_read((DATA_STRUCT::DATA_TYPE) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((storage_manager*) G__getstructoffset())->set_data_to_read((DATA_STRUCT::DATA_TYPE) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((storage_manager*) G__getstructoffset())->set_data_to_write((DATA_STRUCT::DATA_TYPE) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((storage_manager*) G__getstructoffset())->set_data_to_write((DATA_STRUCT::DATA_TYPE) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((storage_manager*) G__getstructoffset())->set_io_mode((storage_manager::MODE) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((storage_manager*) G__getstructoffset())->add_in_filename(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((storage_manager*) G__getstructoffset())->set_out_filename(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const storage_manager*) G__getstructoffset())->io_mode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<std::string>* pobj;
         const vector<std::string> xobj = ((const storage_manager*) G__getstructoffset())->input_filename();
         pobj = new vector<std::string>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const storage_manager*) G__getstructoffset())->output_filename();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const storage_manager*) G__getstructoffset())->status());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((storage_manager*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((storage_manager*) G__getstructoffset())->open());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((storage_manager*) G__getstructoffset())->is_open());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((storage_manager*) G__getstructoffset())->is_ready_io());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((storage_manager*) G__getstructoffset())->next_event());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((storage_manager*) G__getstructoffset())->go_to((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((storage_manager*) G__getstructoffset())->close());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((storage_manager*) G__getstructoffset())->get_data((DATA_STRUCT::DATA_TYPE) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) storage_manager::get());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      storage_manager::kill();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const storage_manager*) G__getstructoffset())->get_entries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const storage_manager*) G__getstructoffset())->get_index());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const storage_manager*) G__getstructoffset())->get_entries_read());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataFormatCint_682_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const storage_manager*) G__getstructoffset())->get_entires_written());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataFormatCint_682_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   storage_manager* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new storage_manager(*(storage_manager*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef storage_manager G__Tstorage_manager;
static int G__DataFormatCint_682_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (storage_manager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((storage_manager*) (soff+(sizeof(storage_manager)*i)))->~G__Tstorage_manager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (storage_manager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((storage_manager*) (soff))->~G__Tstorage_manager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* data_base */

/* pmt_waveform */

/* pmt_wf_collection */

/* vector<pmt_waveform,allocator<pmt_waveform> > */

/* tpc_waveform */

/* tpc_wf_collection */

/* vector<tpc_waveform,allocator<tpc_waveform> > */

/* trig_info */

/* pulse_info */

/* pulse_collection */

/* vector<pulse_info,allocator<pulse_info> > */

/* user_info */

/* user_collection */

/* vector<user_info,allocator<user_info> > */

/* storage_manager */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncDataFormatCint {
 public:
  G__Sizep2memfuncDataFormatCint(): p(&G__Sizep2memfuncDataFormatCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncDataFormatCint::*p)();
};

size_t G__get_sizep2memfuncDataFormatCint()
{
  G__Sizep2memfuncDataFormatCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceDataFormatCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_data_base))) {
     data_base *G__Lderived;
     G__Lderived=(data_base*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_data_base),G__get_linked_tagnum(&G__DataFormatCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform))) {
     pmt_waveform *G__Lderived;
     G__Lderived=(pmt_waveform*)0x1000;
     {
       vector<unsigned short,allocator<unsigned short> > *G__Lpbase=(vector<unsigned short,allocator<unsigned short> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform),G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       data_base *G__Lpbase=(data_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform),G__get_linked_tagnum(&G__DataFormatCintLN_data_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform),G__get_linked_tagnum(&G__DataFormatCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_pmt_wf_collection))) {
     pmt_wf_collection *G__Lderived;
     G__Lderived=(pmt_wf_collection*)0x1000;
     {
       vector<pmt_waveform,allocator<pmt_waveform> > *G__Lpbase=(vector<pmt_waveform,allocator<pmt_waveform> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pmt_wf_collection),G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       data_base *G__Lpbase=(data_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pmt_wf_collection),G__get_linked_tagnum(&G__DataFormatCintLN_data_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pmt_wf_collection),G__get_linked_tagnum(&G__DataFormatCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform))) {
     tpc_waveform *G__Lderived;
     G__Lderived=(tpc_waveform*)0x1000;
     {
       vector<unsigned short,allocator<unsigned short> > *G__Lpbase=(vector<unsigned short,allocator<unsigned short> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform),G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       data_base *G__Lpbase=(data_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform),G__get_linked_tagnum(&G__DataFormatCintLN_data_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform),G__get_linked_tagnum(&G__DataFormatCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_tpc_wf_collection))) {
     tpc_wf_collection *G__Lderived;
     G__Lderived=(tpc_wf_collection*)0x1000;
     {
       vector<tpc_waveform,allocator<tpc_waveform> > *G__Lpbase=(vector<tpc_waveform,allocator<tpc_waveform> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_tpc_wf_collection),G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       data_base *G__Lpbase=(data_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_tpc_wf_collection),G__get_linked_tagnum(&G__DataFormatCintLN_data_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_tpc_wf_collection),G__get_linked_tagnum(&G__DataFormatCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_trig_info))) {
     trig_info *G__Lderived;
     G__Lderived=(trig_info*)0x1000;
     {
       data_base *G__Lpbase=(data_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_trig_info),G__get_linked_tagnum(&G__DataFormatCintLN_data_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_trig_info),G__get_linked_tagnum(&G__DataFormatCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info))) {
     pulse_info *G__Lderived;
     G__Lderived=(pulse_info*)0x1000;
     {
       data_base *G__Lpbase=(data_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info),G__get_linked_tagnum(&G__DataFormatCintLN_data_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info),G__get_linked_tagnum(&G__DataFormatCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_pulse_collection))) {
     pulse_collection *G__Lderived;
     G__Lderived=(pulse_collection*)0x1000;
     {
       vector<pulse_info,allocator<pulse_info> > *G__Lpbase=(vector<pulse_info,allocator<pulse_info> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pulse_collection),G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       data_base *G__Lpbase=(data_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pulse_collection),G__get_linked_tagnum(&G__DataFormatCintLN_data_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pulse_collection),G__get_linked_tagnum(&G__DataFormatCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_user_info))) {
     user_info *G__Lderived;
     G__Lderived=(user_info*)0x1000;
     {
       data_base *G__Lpbase=(data_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_user_info),G__get_linked_tagnum(&G__DataFormatCintLN_data_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_user_info),G__get_linked_tagnum(&G__DataFormatCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_user_collection))) {
     user_collection *G__Lderived;
     G__Lderived=(user_collection*)0x1000;
     {
       vector<user_info,allocator<user_info> > *G__Lpbase=(vector<user_info,allocator<user_info> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_user_collection),G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       data_base *G__Lpbase=(data_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_user_collection),G__get_linked_tagnum(&G__DataFormatCintLN_data_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_user_collection),G__get_linked_tagnum(&G__DataFormatCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager))) {
     storage_manager *G__Lderived;
     G__Lderived=(storage_manager*)0x1000;
     {
       decoder_base *G__Lpbase=(decoder_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager),G__get_linked_tagnum(&G__DataFormatCintLN_decoder_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableDataFormatCint() {

   /* Setting up typedef entry */
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DataFormatCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DataFormatCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__DataFormatCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__DataFormatCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__DataFormatCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<PMT::ch_adc_t>",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pmt_waveform>",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform),256,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform),1,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform),257,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<tpc_waveform>",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform),256,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform),1,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform),257,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pulse_info>",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info),256,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info),1,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info),257,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,double>",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,double>",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,int>",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,int>",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::string>",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::string>",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string>",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string,less<string> >",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,bool>",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool>",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool>",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool,less<string> >",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<double> >",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::vector<double> >",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<double,allocator<double> >,less<string> >",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<int> >",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::vector<int> >",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<int,allocator<int> >,less<string> >",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<std::string> >",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::vector<string> >",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<string,allocator<string> > >",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<string,allocator<string> >,less<string> >",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<bool> >",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::vector<bool> >",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<bool,allocator<bool> > >",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<bool,allocator<bool> >,less<string> >",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<user_info>",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DataFormatCintLN_user_info),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__DataFormatCintLN_user_info),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__DataFormatCintLN_user_info),256,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__DataFormatCintLN_user_info),1,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__DataFormatCintLN_user_info),257,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* data_base */
static void G__setup_memvardata_base(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_data_base));
   { data_base *p; p=(data_base*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* pmt_waveform */
static void G__setup_memvarpmt_waveform(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform));
   { pmt_waveform *p; p=(pmt_waveform*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("ch_number_t"),-1,4,"_channel_number=",0,"/< Channel number");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,4,"_channel_frame_id=",0,"/< Channel frame ID");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,4,"_timeslice=",0,"/< Timeslice number");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_PMTcLcLDISCRIMINATOR),-1,-1,4,"_disc_id=",0,"/< Discriminator ID number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* pmt_wf_collection */
static void G__setup_memvarpmt_wf_collection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pmt_wf_collection));
   { pmt_wf_collection *p; p=(pmt_wf_collection*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,4,"_event_id=",0,"/< event ID number");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,4,"_event_frame_id=",0,"/< event frame ID number");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,4,"_module_address=",0,"/< module address number");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,4,"_module_id=",0,"/< module ID number");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,4,"_channel_header_count=",0,"/< channel header count");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,4,"_trigger_frame_id=",0,"/< trigger frame id");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,4,"_trigger_timeslice=",0,"/< trigger time slice");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,4,"_checksum=",0,"/< checksum of readout events");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,4,"_nwords=",0,"/< # of event words readout");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<pmt_waveform,allocator<pmt_waveform> > */
static void G__setup_memvarvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   { vector<pmt_waveform,allocator<pmt_waveform> > *p; p=(vector<pmt_waveform,allocator<pmt_waveform> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* tpc_waveform */
static void G__setup_memvartpc_waveform(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform));
   { tpc_waveform *p; p=(tpc_waveform*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("ch_number_t"),-1,4,"_channel_number=",0,"/< Channel number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* tpc_wf_collection */
static void G__setup_memvartpc_wf_collection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_tpc_wf_collection));
   { tpc_wf_collection *p; p=(tpc_wf_collection*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,4,"_event_id=",0,"/< event ID number");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,4,"_event_frame_id=",0,"/< event frame ID number");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,4,"_module_address=",0,"/< module address number");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,4,"_module_id=",0,"/< module ID number");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,4,"_channel_header_count=",0,"/< channel header count");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,4,"_trigger_frame_id=",0,"/< trigger frame id");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,4,"_trigger_timeslice=",0,"/< trigger time slice");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,4,"_checksum=",0,"/< checksum of readout events");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,4,"_nwords=",0,"/< # of event words readout");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<tpc_waveform,allocator<tpc_waveform> > */
static void G__setup_memvarvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR));
   { vector<tpc_waveform,allocator<tpc_waveform> > *p; p=(vector<tpc_waveform,allocator<tpc_waveform> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* trig_info */
static void G__setup_memvartrig_info(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_trig_info));
   { trig_info *p; p=(trig_info*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_trig_timeslice=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,2,"_trig_frame_id=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,2,"_trig_id=",0,(char*)NULL);
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_pmt_data=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_trig_pc=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_trig_ext=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_active=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_gate1_in=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_gate2_in=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_veto_in=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_calib=",0,(char*)NULL);
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_reminder_64MHz=",0,(char*)NULL);
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"_reminder_16MHz=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* pulse_info */
static void G__setup_memvarpulse_info(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info));
   { pulse_info *p; p=(pulse_info*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("ch_number_t"),-1,4,"_channel_number=",0,"/< Channel number");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_ped_mean=",0,"/< pedestal mean");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_ped_rms=",0,"/< pedestal std. deviation");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_pulse_peak=",0,"/< peak height  ");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_charge=",0,"/< charge sum (integral)");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_start_time=",0,"/< pulse start time");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_start_time_reco=",0,"/< pulse reconstructed start time");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_end_time=",0,"/< pulse end time");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_max_time=",0,"/< pulse max time (where highestpeak is)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,4,"_channel_frame_id=",0,"/< original waveofrm's readout frame id");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,4,"_timeslice=",0,"/< original waveform's sample number");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_PMTcLcLDISCRIMINATOR),-1,-1,4,"_disc_id=",0,"/< original waveform's discriminator id");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* pulse_collection */
static void G__setup_memvarpulse_collection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pulse_collection));
   { pulse_collection *p; p=(pulse_collection*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_sum_charge=",0,"/< summed charge from each pulse");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_sum_peak=",0,"/< summed peak from each pulse ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"_npulse=",0,"/< summed number of pulses stored");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<pulse_info,allocator<pulse_info> > */
static void G__setup_memvarvectorlEpulse_infocOallocatorlEpulse_infogRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   { vector<pulse_info,allocator<pulse_info> > *p; p=(vector<pulse_info,allocator<pulse_info> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* user_info */
static void G__setup_memvaruser_info(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_user_info));
   { user_info *p; p=(user_info*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),G__defined_typename("map<std::string,double>"),-1,2,"_d_map=",0,"/< var. holder map of double");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),G__defined_typename("map<std::string,int>"),-1,2,"_i_map=",0,"/< var. holder map of int");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),G__defined_typename("map<std::string,std::string>"),-1,2,"_s_map=",0,"/< var. holder map of std::string");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),G__defined_typename("map<std::string,bool>"),-1,2,"_b_map=",0,"/< var. holder map of bool");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),G__defined_typename("map<std::string,std::vector<double> >"),-1,2,"_darray_map=",0,"/< var. holder map of double array");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),G__defined_typename("map<std::string,std::vector<int> >"),-1,2,"_iarray_map=",0,"/< var. holder map of int array");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR),G__defined_typename("map<std::string,std::vector<std::string> >"),-1,2,"_sarray_map=",0,"/< var. holder map of std::string array");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR),G__defined_typename("map<std::string,std::vector<bool> >"),-1,2,"_barray_map=",0,"/< var. holder map of bool array");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* user_collection */
static void G__setup_memvaruser_collection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_user_collection));
   { user_collection *p; p=(user_collection*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<user_info,allocator<user_info> > */
static void G__setup_memvarvectorlEuser_infocOallocatorlEuser_infogRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   { vector<user_info,allocator<user_info> > *p; p=(vector<user_info,allocator<user_info> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* storage_manager */
static void G__setup_memvarstorage_manager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager));
   { storage_manager *p; p=(storage_manager*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLMODE),-1,-2,1,G__FastAllocString(2048).Format("READ=%lldLL",(long long)storage_manager::READ).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLMODE),-1,-2,1,G__FastAllocString(2048).Format("WRITE=%lldLL",(long long)storage_manager::WRITE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLMODE),-1,-2,1,G__FastAllocString(2048).Format("BOTH=%lldLL",(long long)storage_manager::BOTH).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLMODE),-1,-2,1,G__FastAllocString(2048).Format("UNDEFINED=%lldLL",(long long)storage_manager::UNDEFINED).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLSTATUS),-1,-2,1,G__FastAllocString(2048).Format("INIT=%lldLL",(long long)storage_manager::INIT).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLSTATUS),-1,-2,1,G__FastAllocString(2048).Format("OPENED=%lldLL",(long long)storage_manager::OPENED).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLSTATUS),-1,-2,1,G__FastAllocString(2048).Format("READY_IO=%lldLL",(long long)storage_manager::READY_IO).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLSTATUS),-1,-2,1,G__FastAllocString(2048).Format("OPERATING=%lldLL",(long long)storage_manager::OPERATING).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLSTATUS),-1,-2,1,G__FastAllocString(2048).Format("CLOSED=%lldLL",(long long)storage_manager::CLOSED).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager),-1,-2,4,"me=",0,"/< shared object instance pointer");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"_index=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"_nevents=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"_nevents_read=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"_nevents_written=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLSTATUS),-1,-1,4,"_status=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLMODE),-1,-1,4,"_mode=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_read_data_array[8]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_write_data_array[8]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_data_base),-1,-1,4,"_ptr_data_array[8]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_string),-1,-1,4,"_out_fname=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,4,"_in_fnames=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__DataFormatCintLN_string),-1,-1,4,"_treename=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_TFile),-1,-1,4,"_fout=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_TChain),-1,-1,4,"_in_ch[8]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataFormatCintLN_TTree),-1,-1,4,"_out_ch[8]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarDataFormatCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncdata_base(void) {
   /* data_base */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_data_base));
   G__memfunc_setup("data_base",916,G__DataFormatCint_226_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_data_base), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("data_base",916,G__DataFormatCint_226_0_2, 105, G__get_linked_tagnum(&G__DataFormatCintLN_data_base), -1, 0, 1, 1, 1, 0, "u 'data_base' - 11 - original", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_data",1024,G__DataFormatCint_226_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__DataFormatCint_226_0_4, 85, G__get_linked_tagnum(&G__DataFormatCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&data_base::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataFormatCint_226_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&data_base::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataFormatCint_226_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&data_base::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataFormatCint_226_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&data_base::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataFormatCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataFormatCint_226_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataFormatCint_226_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&data_base::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataFormatCint_226_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&data_base::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataFormatCint_226_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&data_base::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataFormatCint_226_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&data_base::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~data_base", 1042, G__DataFormatCint_226_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_226_0_17, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_data_base), -1, 1, 1, 1, 1, 0, "u 'data_base' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpmt_waveform(void) {
   /* pmt_waveform */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform));
   G__memfunc_setup("pmt_waveform",1303,G__DataFormatCint_227_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform), -1, 0, 5, 1, 1, 0, 
"r - 'PMT::ch_number_t' 0 'PMT::INVALID_CH' ch h - 'PMT::word_t' 0 'PMT::INVALID_WORD' ch_frame "
"i 'PMT::DISCRIMINATOR' - 0 'PMT::DISC_MAX' disc_id h - 'PMT::word_t' 0 'PMT::INVALID_WORD' timeslice "
"k - 'size_t' 0 '0' len", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pmt_waveform",1303,G__DataFormatCint_227_0_2, 105, G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform), -1, 0, 1, 1, 1, 0, "u 'pmt_waveform' - 11 - original", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_channel_number",1900,G__DataFormatCint_227_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'PMT::ch_number_t' 0 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_channel_frame_id",2074,G__DataFormatCint_227_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_disc_id",1146,G__DataFormatCint_227_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i 'PMT::DISCRIMINATOR' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_timeslice",1386,G__DataFormatCint_227_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("channel_number",1473,G__DataFormatCint_227_0_7, 114, -1, G__defined_typename("PMT::ch_number_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("channel_frame_id",1647,G__DataFormatCint_227_0_8, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("disc_id",719,G__DataFormatCint_227_0_9, 105, G__get_linked_tagnum(&G__DataFormatCintLN_PMTcLcLDISCRIMINATOR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("timeslice",959,G__DataFormatCint_227_0_10, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_data",1024,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init_vars",975,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataFormatCint_227_0_13, 85, G__get_linked_tagnum(&G__DataFormatCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&pmt_waveform::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataFormatCint_227_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&pmt_waveform::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataFormatCint_227_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&pmt_waveform::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataFormatCint_227_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&pmt_waveform::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataFormatCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataFormatCint_227_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataFormatCint_227_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&pmt_waveform::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataFormatCint_227_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&pmt_waveform::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataFormatCint_227_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&pmt_waveform::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataFormatCint_227_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&pmt_waveform::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~pmt_waveform", 1429, G__DataFormatCint_227_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_227_0_26, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform), -1, 1, 1, 1, 1, 0, "u 'pmt_waveform' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpmt_wf_collection(void) {
   /* pmt_wf_collection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pmt_wf_collection));
   G__memfunc_setup("pmt_wf_collection",1816,G__DataFormatCint_228_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_pmt_wf_collection), -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 '0' len", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pmt_wf_collection",1816,G__DataFormatCint_228_0_2, 105, G__get_linked_tagnum(&G__DataFormatCintLN_pmt_wf_collection), -1, 0, 1, 1, 1, 0, "u 'pmt_wf_collection' - 11 - original", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_event_id",1273,G__DataFormatCint_228_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_event_frame_id",1891,G__DataFormatCint_228_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_module_address",1910,G__DataFormatCint_228_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_module_id",1373,G__DataFormatCint_228_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_channel_header_count",2516,G__DataFormatCint_228_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_checksum",1278,G__DataFormatCint_228_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - sum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_nwords",1096,G__DataFormatCint_228_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_trigger_frame_id",2101,G__DataFormatCint_228_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_trigger_timeslice",2237,G__DataFormatCint_228_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("event_id",846,G__DataFormatCint_228_0_12, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("event_frame_id",1464,G__DataFormatCint_228_0_13, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("module_address",1483,G__DataFormatCint_228_0_14, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("module_id",946,G__DataFormatCint_228_0_15, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("channel_header_count",2089,G__DataFormatCint_228_0_16, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checksum",851,G__DataFormatCint_228_0_17, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nwords",669,G__DataFormatCint_228_0_18, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trigger_frame_id",1674,G__DataFormatCint_228_0_19, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trigger_timeslice",1810,G__DataFormatCint_228_0_20, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_data",1024,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init_vars",975,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataFormatCint_228_0_23, 85, G__get_linked_tagnum(&G__DataFormatCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&pmt_wf_collection::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataFormatCint_228_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&pmt_wf_collection::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataFormatCint_228_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&pmt_wf_collection::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataFormatCint_228_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&pmt_wf_collection::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataFormatCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataFormatCint_228_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataFormatCint_228_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&pmt_wf_collection::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataFormatCint_228_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&pmt_wf_collection::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataFormatCint_228_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&pmt_wf_collection::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataFormatCint_228_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&pmt_wf_collection::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~pmt_wf_collection", 1942, G__DataFormatCint_228_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_228_0_36, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_pmt_wf_collection), -1, 1, 1, 1, 1, 0, "u 'pmt_wf_collection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR(void) {
   /* vector<pmt_waveform,allocator<pmt_waveform> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   G__memfunc_setup("at",213,G__DataFormatCint_230_0_1, 117, G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform), G__defined_typename("vector<pmt_waveform,allocator<pmt_waveform> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<pmt_waveform,allocator<pmt_waveform> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__DataFormatCint_230_0_2, 117, G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform), G__defined_typename("vector<pmt_waveform,allocator<pmt_waveform> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<pmt_waveform,allocator<pmt_waveform> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__DataFormatCint_230_0_3, 117, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__DataFormatCint_230_0_4, 117, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__DataFormatCint_230_0_5, 117, G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiteratorgR), G__defined_typename("vector<pmt_waveform,allocator<pmt_waveform> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__DataFormatCint_230_0_6, 117, G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiteratorgR), G__defined_typename("vector<pmt_waveform,allocator<pmt_waveform> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__DataFormatCint_230_0_7, 107, -1, G__defined_typename("vector<pmt_waveform,allocator<pmt_waveform> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__DataFormatCint_230_0_8, 107, -1, G__defined_typename("vector<pmt_waveform,allocator<pmt_waveform> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DataFormatCint_230_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<pmt_waveform,allocator<pmt_waveform> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DataFormatCint_230_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<pmt_waveform,allocator<pmt_waveform> >::size_type' 0 - sz u 'pmt_waveform' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__DataFormatCint_230_0_11, 107, -1, G__defined_typename("vector<pmt_waveform,allocator<pmt_waveform> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__DataFormatCint_230_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataFormatCint_230_0_13, 117, G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform), G__defined_typename("vector<pmt_waveform,allocator<pmt_waveform> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<pmt_waveform,allocator<pmt_waveform> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataFormatCint_230_0_14, 117, G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform), G__defined_typename("vector<pmt_waveform,allocator<pmt_waveform> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<pmt_waveform,allocator<pmt_waveform> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<pmt_waveform,allocator<pmt_waveform> >",4546,G__DataFormatCint_230_0_15, 105, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<pmt_waveform,allocator<pmt_waveform> >",4546,G__DataFormatCint_230_0_16, 105, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<pmt_waveform,allocator<pmt_waveform> >::size_type' 0 - n u 'pmt_waveform' - 11 'pmt_waveform()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<pmt_waveform,allocator<pmt_waveform> >",4546,G__DataFormatCint_230_0_17, 105, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<pmt_waveform,allocator<pmt_waveform> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<pmt_waveform,allocator<pmt_waveform> >",4546,G__DataFormatCint_230_0_18, 105, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<pmt_waveform,allocator<pmt_waveform> >::iterator' 'vector<pmt_waveform,allocator<pmt_waveform> >::const_iterator' 10 - first u 'vector<pmt_waveform,allocator<pmt_waveform> >::iterator' 'vector<pmt_waveform,allocator<pmt_waveform> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__DataFormatCint_230_0_19, 117, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<pmt_waveform,allocator<pmt_waveform> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__DataFormatCint_230_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<pmt_waveform,allocator<pmt_waveform> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__DataFormatCint_230_0_21, 117, G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__DataFormatCint_230_0_22, 117, G__get_linked_tagnum(&G__DataFormatCintLN_pmt_waveform), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__DataFormatCint_230_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'pmt_waveform' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__DataFormatCint_230_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<pmt_waveform,allocator<pmt_waveform> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatCint_230_0_25, 117, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<pmt_waveform,allocator<pmt_waveform> >::iterator' - 0 - position u 'pmt_waveform' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatCint_230_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<pmt_waveform,allocator<pmt_waveform> >::iterator' - 0 - position u 'vector<pmt_waveform,allocator<pmt_waveform> >::iterator' 'vector<pmt_waveform,allocator<pmt_waveform> >::const_iterator' 10 - first "
"u 'vector<pmt_waveform,allocator<pmt_waveform> >::iterator' 'vector<pmt_waveform,allocator<pmt_waveform> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatCint_230_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<pmt_waveform,allocator<pmt_waveform> >::iterator' - 0 - position k - 'vector<pmt_waveform,allocator<pmt_waveform> >::size_type' 0 - n "
"u 'pmt_waveform' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__DataFormatCint_230_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataFormatCint_230_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<pmt_waveform,allocator<pmt_waveform> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataFormatCint_230_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<pmt_waveform,allocator<pmt_waveform> >::iterator' - 0 - first u 'vector<pmt_waveform,allocator<pmt_waveform> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__DataFormatCint_230_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<pmt_waveform,allocator<pmt_waveform> >", 4672, G__DataFormatCint_230_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctpc_waveform(void) {
   /* tpc_waveform */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform));
   G__memfunc_setup("tpc_waveform",1293,G__DataFormatCint_233_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform), -1, 0, 2, 1, 1, 0, 
"r - 'PMT::ch_number_t' 0 'PMT::INVALID_CH' ch k - 'size_t' 0 '0' len", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tpc_waveform",1293,G__DataFormatCint_233_0_2, 105, G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform), -1, 0, 1, 1, 1, 0, "u 'tpc_waveform' - 11 - original", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_channel_number",1900,G__DataFormatCint_233_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'PMT::ch_number_t' 0 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("channel_number",1473,G__DataFormatCint_233_0_4, 114, -1, G__defined_typename("PMT::ch_number_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_data",1024,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init_vars",975,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataFormatCint_233_0_7, 85, G__get_linked_tagnum(&G__DataFormatCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&tpc_waveform::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataFormatCint_233_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tpc_waveform::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataFormatCint_233_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&tpc_waveform::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataFormatCint_233_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&tpc_waveform::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataFormatCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataFormatCint_233_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataFormatCint_233_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tpc_waveform::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataFormatCint_233_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tpc_waveform::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataFormatCint_233_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tpc_waveform::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataFormatCint_233_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tpc_waveform::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~tpc_waveform", 1419, G__DataFormatCint_233_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_233_0_20, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform), -1, 1, 1, 1, 1, 0, "u 'tpc_waveform' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctpc_wf_collection(void) {
   /* tpc_wf_collection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_tpc_wf_collection));
   G__memfunc_setup("tpc_wf_collection",1806,G__DataFormatCint_234_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_tpc_wf_collection), -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 '0' len", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tpc_wf_collection",1806,G__DataFormatCint_234_0_2, 105, G__get_linked_tagnum(&G__DataFormatCintLN_tpc_wf_collection), -1, 0, 1, 1, 1, 0, "u 'tpc_wf_collection' - 11 - original", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_event_id",1273,G__DataFormatCint_234_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_event_frame_id",1891,G__DataFormatCint_234_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_module_address",1910,G__DataFormatCint_234_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_module_id",1373,G__DataFormatCint_234_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_channel_header_count",2516,G__DataFormatCint_234_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_checksum",1278,G__DataFormatCint_234_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - sum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_nwords",1096,G__DataFormatCint_234_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_trigger_frame_id",2101,G__DataFormatCint_234_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_trigger_timeslice",2237,G__DataFormatCint_234_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("event_id",846,G__DataFormatCint_234_0_12, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("event_frame_id",1464,G__DataFormatCint_234_0_13, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("module_address",1483,G__DataFormatCint_234_0_14, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("module_id",946,G__DataFormatCint_234_0_15, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("channel_header_count",2089,G__DataFormatCint_234_0_16, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checksum",851,G__DataFormatCint_234_0_17, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nwords",669,G__DataFormatCint_234_0_18, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trigger_frame_id",1674,G__DataFormatCint_234_0_19, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trigger_timeslice",1810,G__DataFormatCint_234_0_20, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_data",1024,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init_vars",975,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataFormatCint_234_0_23, 85, G__get_linked_tagnum(&G__DataFormatCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&tpc_wf_collection::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataFormatCint_234_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tpc_wf_collection::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataFormatCint_234_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&tpc_wf_collection::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataFormatCint_234_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&tpc_wf_collection::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataFormatCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataFormatCint_234_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataFormatCint_234_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tpc_wf_collection::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataFormatCint_234_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tpc_wf_collection::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataFormatCint_234_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tpc_wf_collection::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataFormatCint_234_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tpc_wf_collection::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~tpc_wf_collection", 1932, G__DataFormatCint_234_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_234_0_36, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_tpc_wf_collection), -1, 1, 1, 1, 1, 0, "u 'tpc_wf_collection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR(void) {
   /* vector<tpc_waveform,allocator<tpc_waveform> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR));
   G__memfunc_setup("at",213,G__DataFormatCint_236_0_1, 117, G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform), G__defined_typename("vector<tpc_waveform,allocator<tpc_waveform> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<tpc_waveform,allocator<tpc_waveform> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__DataFormatCint_236_0_2, 117, G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform), G__defined_typename("vector<tpc_waveform,allocator<tpc_waveform> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<tpc_waveform,allocator<tpc_waveform> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__DataFormatCint_236_0_3, 117, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__DataFormatCint_236_0_4, 117, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__DataFormatCint_236_0_5, 117, G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiteratorgR), G__defined_typename("vector<tpc_waveform,allocator<tpc_waveform> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__DataFormatCint_236_0_6, 117, G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiteratorgR), G__defined_typename("vector<tpc_waveform,allocator<tpc_waveform> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__DataFormatCint_236_0_7, 107, -1, G__defined_typename("vector<tpc_waveform,allocator<tpc_waveform> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__DataFormatCint_236_0_8, 107, -1, G__defined_typename("vector<tpc_waveform,allocator<tpc_waveform> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DataFormatCint_236_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<tpc_waveform,allocator<tpc_waveform> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DataFormatCint_236_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<tpc_waveform,allocator<tpc_waveform> >::size_type' 0 - sz u 'tpc_waveform' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__DataFormatCint_236_0_11, 107, -1, G__defined_typename("vector<tpc_waveform,allocator<tpc_waveform> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__DataFormatCint_236_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataFormatCint_236_0_13, 117, G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform), G__defined_typename("vector<tpc_waveform,allocator<tpc_waveform> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<tpc_waveform,allocator<tpc_waveform> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataFormatCint_236_0_14, 117, G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform), G__defined_typename("vector<tpc_waveform,allocator<tpc_waveform> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<tpc_waveform,allocator<tpc_waveform> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<tpc_waveform,allocator<tpc_waveform> >",4526,G__DataFormatCint_236_0_15, 105, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<tpc_waveform,allocator<tpc_waveform> >",4526,G__DataFormatCint_236_0_16, 105, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<tpc_waveform,allocator<tpc_waveform> >::size_type' 0 - n u 'tpc_waveform' - 11 'tpc_waveform()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<tpc_waveform,allocator<tpc_waveform> >",4526,G__DataFormatCint_236_0_17, 105, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<tpc_waveform,allocator<tpc_waveform> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<tpc_waveform,allocator<tpc_waveform> >",4526,G__DataFormatCint_236_0_18, 105, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<tpc_waveform,allocator<tpc_waveform> >::iterator' 'vector<tpc_waveform,allocator<tpc_waveform> >::const_iterator' 10 - first u 'vector<tpc_waveform,allocator<tpc_waveform> >::iterator' 'vector<tpc_waveform,allocator<tpc_waveform> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__DataFormatCint_236_0_19, 117, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<tpc_waveform,allocator<tpc_waveform> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__DataFormatCint_236_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<tpc_waveform,allocator<tpc_waveform> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__DataFormatCint_236_0_21, 117, G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__DataFormatCint_236_0_22, 117, G__get_linked_tagnum(&G__DataFormatCintLN_tpc_waveform), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__DataFormatCint_236_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'tpc_waveform' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__DataFormatCint_236_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<tpc_waveform,allocator<tpc_waveform> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatCint_236_0_25, 117, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<tpc_waveform,allocator<tpc_waveform> >::iterator' - 0 - position u 'tpc_waveform' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatCint_236_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<tpc_waveform,allocator<tpc_waveform> >::iterator' - 0 - position u 'vector<tpc_waveform,allocator<tpc_waveform> >::iterator' 'vector<tpc_waveform,allocator<tpc_waveform> >::const_iterator' 10 - first "
"u 'vector<tpc_waveform,allocator<tpc_waveform> >::iterator' 'vector<tpc_waveform,allocator<tpc_waveform> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatCint_236_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<tpc_waveform,allocator<tpc_waveform> >::iterator' - 0 - position k - 'vector<tpc_waveform,allocator<tpc_waveform> >::size_type' 0 - n "
"u 'tpc_waveform' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__DataFormatCint_236_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataFormatCint_236_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<tpc_waveform,allocator<tpc_waveform> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataFormatCint_236_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<tpc_waveform,allocator<tpc_waveform> >::iterator' - 0 - first u 'vector<tpc_waveform,allocator<tpc_waveform> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__DataFormatCint_236_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<tpc_waveform,allocator<tpc_waveform> >", 4652, G__DataFormatCint_236_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctrig_info(void) {
   /* trig_info */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_trig_info));
   G__memfunc_setup("trig_info",961,G__DataFormatCint_239_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_trig_info), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trig_info",961,G__DataFormatCint_239_0_2, 105, G__get_linked_tagnum(&G__DataFormatCintLN_trig_info), -1, 0, 1, 1, 1, 0, "u 'trig_info' - 11 - original", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_reminder_16MHz",1750,G__DataFormatCint_239_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - remin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_reminder_64MHz",1753,G__DataFormatCint_239_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - remin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_trig_frame_id",1783,G__DataFormatCint_239_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_trig_timeslice",1919,G__DataFormatCint_239_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_trig_id",1165,G__DataFormatCint_239_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_pmt_data",1269,G__DataFormatCint_239_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reminder_16MHz",1323,G__DataFormatCint_239_0_9, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reminder_64MHz",1326,G__DataFormatCint_239_0_10, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trig_frame_id",1356,G__DataFormatCint_239_0_11, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trig_timeslice",1492,G__DataFormatCint_239_0_12, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trig_id",738,G__DataFormatCint_239_0_13, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pmt_data",842,G__DataFormatCint_239_0_14, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_trigger_bits",1712,G__DataFormatCint_239_0_15, 121, -1, -1, 0, 7, 1, 1, 0, 
"g - - 0 - trig_pc g - - 0 - trig_ext "
"g - - 0 - active g - - 0 - gate1_in "
"g - - 0 - gate2_in g - - 0 - veto_in "
"g - - 0 - calib", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trig_pc",744,G__DataFormatCint_239_0_16, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trig_ext",870,G__DataFormatCint_239_0_17, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("active",636,G__DataFormatCint_239_0_18, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gate1",466,G__DataFormatCint_239_0_19, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gate2",467,G__DataFormatCint_239_0_20, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("veto_in",756,G__DataFormatCint_239_0_21, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calib",507,G__DataFormatCint_239_0_22, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_data",1024,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init_vars",975,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataFormatCint_239_0_25, 85, G__get_linked_tagnum(&G__DataFormatCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&trig_info::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataFormatCint_239_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&trig_info::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataFormatCint_239_0_27, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&trig_info::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataFormatCint_239_0_28, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&trig_info::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataFormatCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataFormatCint_239_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataFormatCint_239_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&trig_info::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataFormatCint_239_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&trig_info::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataFormatCint_239_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&trig_info::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataFormatCint_239_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&trig_info::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~trig_info", 1087, G__DataFormatCint_239_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_239_0_38, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_trig_info), -1, 1, 1, 1, 1, 0, "u 'trig_info' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpulse_info(void) {
   /* pulse_info */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info));
   G__memfunc_setup("pulse_info",1076,G__DataFormatCint_240_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pulse_info",1076,G__DataFormatCint_240_0_2, 105, G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info), -1, 0, 1, 1, 1, 0, "u 'pulse_info' - 11 - original", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_channel_number",1900,G__DataFormatCint_240_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'PMT::ch_number_t' 0 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_ped_mean",1252,G__DataFormatCint_240_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_ped_rms",1173,G__DataFormatCint_240_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_pulse_peak",1492,G__DataFormatCint_240_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_charge",1045,G__DataFormatCint_240_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_start_time",1511,G__DataFormatCint_240_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_start_time_reco",2031,G__DataFormatCint_240_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_end_time",1264,G__DataFormatCint_240_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_max_time",1279,G__DataFormatCint_240_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_disc_id",1146,G__DataFormatCint_240_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i 'PMT::DISCRIMINATOR' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_channel_frame_id",2074,G__DataFormatCint_240_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_timeslice",1386,G__DataFormatCint_240_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("channel_number",1473,G__DataFormatCint_240_0_15, 114, -1, G__defined_typename("PMT::ch_number_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ped_mean",825,G__DataFormatCint_240_0_16, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ped_rms",746,G__DataFormatCint_240_0_17, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pulse_peak",1065,G__DataFormatCint_240_0_18, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("charge",618,G__DataFormatCint_240_0_19, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("start_time",1084,G__DataFormatCint_240_0_20, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("start_time_reco",1604,G__DataFormatCint_240_0_21, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end_time",837,G__DataFormatCint_240_0_22, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_time",852,G__DataFormatCint_240_0_23, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("disc_id",719,G__DataFormatCint_240_0_24, 105, G__get_linked_tagnum(&G__DataFormatCintLN_PMTcLcLDISCRIMINATOR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("frame_id",823,G__DataFormatCint_240_0_25, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("timeslice",959,G__DataFormatCint_240_0_26, 104, -1, G__defined_typename("PMT::word_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_data",1024,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init_vars",975,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataFormatCint_240_0_29, 85, G__get_linked_tagnum(&G__DataFormatCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&pulse_info::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataFormatCint_240_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&pulse_info::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataFormatCint_240_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&pulse_info::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataFormatCint_240_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&pulse_info::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataFormatCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataFormatCint_240_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataFormatCint_240_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&pulse_info::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataFormatCint_240_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&pulse_info::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataFormatCint_240_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&pulse_info::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataFormatCint_240_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&pulse_info::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~pulse_info", 1202, G__DataFormatCint_240_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_240_0_42, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info), -1, 1, 1, 1, 1, 0, "u 'pulse_info' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpulse_collection(void) {
   /* pulse_collection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_pulse_collection));
   G__memfunc_setup("pulse_collection",1716,G__DataFormatCint_241_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_pulse_collection), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pulse_collection",1716,G__DataFormatCint_241_0_2, 105, G__get_linked_tagnum(&G__DataFormatCintLN_pulse_collection), -1, 0, 1, 1, 1, 0, "u 'pulse_collection' - 11 - original", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calculate_sum",1378,G__DataFormatCint_241_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sum_charge",1054,G__DataFormatCint_241_0_4, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sum_peak",853,G__DataFormatCint_241_0_5, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("npulse",663,G__DataFormatCint_241_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_sum_charge",1481,G__DataFormatCint_241_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_sum_peak",1280,G__DataFormatCint_241_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_npulse",1090,G__DataFormatCint_241_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_data",1024,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init_vars",975,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataFormatCint_241_0_12, 85, G__get_linked_tagnum(&G__DataFormatCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&pulse_collection::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataFormatCint_241_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&pulse_collection::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataFormatCint_241_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&pulse_collection::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataFormatCint_241_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&pulse_collection::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataFormatCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataFormatCint_241_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataFormatCint_241_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&pulse_collection::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataFormatCint_241_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&pulse_collection::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataFormatCint_241_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&pulse_collection::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataFormatCint_241_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&pulse_collection::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~pulse_collection", 1842, G__DataFormatCint_241_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_241_0_25, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_pulse_collection), -1, 1, 1, 1, 1, 0, "u 'pulse_collection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEpulse_infocOallocatorlEpulse_infogRsPgR(void) {
   /* vector<pulse_info,allocator<pulse_info> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   G__memfunc_setup("at",213,G__DataFormatCint_243_0_1, 117, G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info), G__defined_typename("vector<pulse_info,allocator<pulse_info> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<pulse_info,allocator<pulse_info> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__DataFormatCint_243_0_2, 117, G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info), G__defined_typename("vector<pulse_info,allocator<pulse_info> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<pulse_info,allocator<pulse_info> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__DataFormatCint_243_0_3, 117, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__DataFormatCint_243_0_4, 117, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__DataFormatCint_243_0_5, 117, G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiteratorgR), G__defined_typename("vector<pulse_info,allocator<pulse_info> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__DataFormatCint_243_0_6, 117, G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiteratorgR), G__defined_typename("vector<pulse_info,allocator<pulse_info> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__DataFormatCint_243_0_7, 107, -1, G__defined_typename("vector<pulse_info,allocator<pulse_info> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__DataFormatCint_243_0_8, 107, -1, G__defined_typename("vector<pulse_info,allocator<pulse_info> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DataFormatCint_243_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<pulse_info,allocator<pulse_info> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DataFormatCint_243_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<pulse_info,allocator<pulse_info> >::size_type' 0 - sz u 'pulse_info' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__DataFormatCint_243_0_11, 107, -1, G__defined_typename("vector<pulse_info,allocator<pulse_info> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__DataFormatCint_243_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataFormatCint_243_0_13, 117, G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info), G__defined_typename("vector<pulse_info,allocator<pulse_info> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<pulse_info,allocator<pulse_info> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataFormatCint_243_0_14, 117, G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info), G__defined_typename("vector<pulse_info,allocator<pulse_info> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<pulse_info,allocator<pulse_info> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<pulse_info,allocator<pulse_info> >",4092,G__DataFormatCint_243_0_15, 105, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<pulse_info,allocator<pulse_info> >",4092,G__DataFormatCint_243_0_16, 105, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<pulse_info,allocator<pulse_info> >::size_type' 0 - n u 'pulse_info' - 11 'pulse_info()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<pulse_info,allocator<pulse_info> >",4092,G__DataFormatCint_243_0_17, 105, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<pulse_info,allocator<pulse_info> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<pulse_info,allocator<pulse_info> >",4092,G__DataFormatCint_243_0_18, 105, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<pulse_info,allocator<pulse_info> >::iterator' 'vector<pulse_info,allocator<pulse_info> >::const_iterator' 10 - first u 'vector<pulse_info,allocator<pulse_info> >::iterator' 'vector<pulse_info,allocator<pulse_info> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__DataFormatCint_243_0_19, 117, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<pulse_info,allocator<pulse_info> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__DataFormatCint_243_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<pulse_info,allocator<pulse_info> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__DataFormatCint_243_0_21, 117, G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__DataFormatCint_243_0_22, 117, G__get_linked_tagnum(&G__DataFormatCintLN_pulse_info), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__DataFormatCint_243_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'pulse_info' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__DataFormatCint_243_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<pulse_info,allocator<pulse_info> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatCint_243_0_25, 117, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<pulse_info,allocator<pulse_info> >::iterator' - 0 - position u 'pulse_info' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatCint_243_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<pulse_info,allocator<pulse_info> >::iterator' - 0 - position u 'vector<pulse_info,allocator<pulse_info> >::iterator' 'vector<pulse_info,allocator<pulse_info> >::const_iterator' 10 - first "
"u 'vector<pulse_info,allocator<pulse_info> >::iterator' 'vector<pulse_info,allocator<pulse_info> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatCint_243_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<pulse_info,allocator<pulse_info> >::iterator' - 0 - position k - 'vector<pulse_info,allocator<pulse_info> >::size_type' 0 - n "
"u 'pulse_info' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__DataFormatCint_243_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataFormatCint_243_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<pulse_info,allocator<pulse_info> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataFormatCint_243_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<pulse_info,allocator<pulse_info> >::iterator' - 0 - first u 'vector<pulse_info,allocator<pulse_info> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__DataFormatCint_243_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<pulse_info,allocator<pulse_info> >", 4218, G__DataFormatCint_243_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncuser_info(void) {
   /* user_info */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_user_info));
   G__memfunc_setup("dump_contents",1411,G__DataFormatCint_481_0_1, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("user_info",970,G__DataFormatCint_481_0_2, 105, G__get_linked_tagnum(&G__DataFormatCintLN_user_info), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("user_info",970,G__DataFormatCint_481_0_3, 105, G__get_linked_tagnum(&G__DataFormatCintLN_user_info), -1, 0, 1, 1, 1, 0, "u 'user_info' - 11 - original", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("store",557,G__DataFormatCint_481_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - key d - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("store",557,G__DataFormatCint_481_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - key i - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("store",557,G__DataFormatCint_481_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - key u 'string' - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("store",557,G__DataFormatCint_481_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - key g - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__DataFormatCint_481_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - key d - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__DataFormatCint_481_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - key i - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__DataFormatCint_481_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - key u 'string' - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__DataFormatCint_481_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - key g - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_double",1050,G__DataFormatCint_481_0_12, 100, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_int",746,G__DataFormatCint_481_0_13, 105, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_string",1078,G__DataFormatCint_481_0_14, 117, G__get_linked_tagnum(&G__DataFormatCintLN_string), -1, 0, 1, 1, 1, 8, "u 'string' - 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_bool",843,G__DataFormatCint_481_0_15, 103, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_darray",1058,G__DataFormatCint_481_0_16, 85, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<double>"), 0, 1, 1, 1, 0, "u 'string' - 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_iarray",1063,G__DataFormatCint_481_0_17, 85, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 1, 1, 1, 0, "u 'string' - 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_sarray",1073,G__DataFormatCint_481_0_18, 85, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<std::string>"), 0, 1, 1, 1, 0, "u 'string' - 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_barray",1056,G__DataFormatCint_481_0_19, 85, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEboolcOallocatorlEboolgRsPgR), G__defined_typename("vector<bool>"), 0, 1, 1, 1, 0, "u 'string' - 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_data",1024,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__DataFormatCint_481_0_21, 85, G__get_linked_tagnum(&G__DataFormatCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&user_info::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataFormatCint_481_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&user_info::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataFormatCint_481_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&user_info::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataFormatCint_481_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&user_info::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataFormatCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataFormatCint_481_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataFormatCint_481_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&user_info::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataFormatCint_481_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&user_info::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataFormatCint_481_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&user_info::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataFormatCint_481_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&user_info::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~user_info", 1096, G__DataFormatCint_481_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_481_0_34, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_user_info), -1, 1, 1, 1, 1, 0, "u 'user_info' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncuser_collection(void) {
   /* user_collection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_user_collection));
   G__memfunc_setup("user_collection",1610,G__DataFormatCint_532_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_user_collection), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("user_collection",1610,G__DataFormatCint_532_0_2, 105, G__get_linked_tagnum(&G__DataFormatCintLN_user_collection), -1, 0, 1, 1, 1, 0, "u 'user_collection' - 11 - original", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear_data",1024,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__DataFormatCint_532_0_4, 85, G__get_linked_tagnum(&G__DataFormatCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&user_collection::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataFormatCint_532_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&user_collection::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataFormatCint_532_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&user_collection::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataFormatCint_532_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&user_collection::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataFormatCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataFormatCint_532_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataFormatCint_532_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&user_collection::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataFormatCint_532_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&user_collection::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataFormatCint_532_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&user_collection::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataFormatCint_532_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&user_collection::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~user_collection", 1736, G__DataFormatCint_532_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataFormatCint_532_0_17, (int) ('u'), G__get_linked_tagnum(&G__DataFormatCintLN_user_collection), -1, 1, 1, 1, 1, 0, "u 'user_collection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEuser_infocOallocatorlEuser_infogRsPgR(void) {
   /* vector<user_info,allocator<user_info> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   G__memfunc_setup("at",213,G__DataFormatCint_534_0_1, 117, G__get_linked_tagnum(&G__DataFormatCintLN_user_info), G__defined_typename("vector<user_info,allocator<user_info> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<user_info,allocator<user_info> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__DataFormatCint_534_0_2, 117, G__get_linked_tagnum(&G__DataFormatCintLN_user_info), G__defined_typename("vector<user_info,allocator<user_info> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<user_info,allocator<user_info> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__DataFormatCint_534_0_3, 117, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__DataFormatCint_534_0_4, 117, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__DataFormatCint_534_0_5, 117, G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiteratorgR), G__defined_typename("vector<user_info,allocator<user_info> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__DataFormatCint_534_0_6, 117, G__get_linked_tagnum(&G__DataFormatCintLN_reverse_iteratorlEvectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiteratorgR), G__defined_typename("vector<user_info,allocator<user_info> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__DataFormatCint_534_0_7, 107, -1, G__defined_typename("vector<user_info,allocator<user_info> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__DataFormatCint_534_0_8, 107, -1, G__defined_typename("vector<user_info,allocator<user_info> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DataFormatCint_534_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<user_info,allocator<user_info> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DataFormatCint_534_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<user_info,allocator<user_info> >::size_type' 0 - sz u 'user_info' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__DataFormatCint_534_0_11, 107, -1, G__defined_typename("vector<user_info,allocator<user_info> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__DataFormatCint_534_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataFormatCint_534_0_13, 117, G__get_linked_tagnum(&G__DataFormatCintLN_user_info), G__defined_typename("vector<user_info,allocator<user_info> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<user_info,allocator<user_info> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataFormatCint_534_0_14, 117, G__get_linked_tagnum(&G__DataFormatCintLN_user_info), G__defined_typename("vector<user_info,allocator<user_info> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<user_info,allocator<user_info> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<user_info,allocator<user_info> >",3880,G__DataFormatCint_534_0_15, 105, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<user_info,allocator<user_info> >",3880,G__DataFormatCint_534_0_16, 105, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<user_info,allocator<user_info> >::size_type' 0 - n u 'user_info' - 11 'user_info()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<user_info,allocator<user_info> >",3880,G__DataFormatCint_534_0_17, 105, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<user_info,allocator<user_info> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<user_info,allocator<user_info> >",3880,G__DataFormatCint_534_0_18, 105, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<user_info,allocator<user_info> >::iterator' 'vector<user_info,allocator<user_info> >::const_iterator' 10 - first u 'vector<user_info,allocator<user_info> >::iterator' 'vector<user_info,allocator<user_info> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__DataFormatCint_534_0_19, 117, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<user_info,allocator<user_info> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__DataFormatCint_534_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<user_info,allocator<user_info> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__DataFormatCint_534_0_21, 117, G__get_linked_tagnum(&G__DataFormatCintLN_user_info), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__DataFormatCint_534_0_22, 117, G__get_linked_tagnum(&G__DataFormatCintLN_user_info), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__DataFormatCint_534_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'user_info' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__DataFormatCint_534_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<user_info,allocator<user_info> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatCint_534_0_25, 117, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<user_info,allocator<user_info> >::iterator' - 0 - position u 'user_info' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatCint_534_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<user_info,allocator<user_info> >::iterator' - 0 - position u 'vector<user_info,allocator<user_info> >::iterator' 'vector<user_info,allocator<user_info> >::const_iterator' 10 - first "
"u 'vector<user_info,allocator<user_info> >::iterator' 'vector<user_info,allocator<user_info> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DataFormatCint_534_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<user_info,allocator<user_info> >::iterator' - 0 - position k - 'vector<user_info,allocator<user_info> >::size_type' 0 - n "
"u 'user_info' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__DataFormatCint_534_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataFormatCint_534_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<user_info,allocator<user_info> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DataFormatCint_534_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<user_info,allocator<user_info> >::iterator' - 0 - first u 'vector<user_info,allocator<user_info> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__DataFormatCint_534_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<user_info,allocator<user_info> >", 4006, G__DataFormatCint_534_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncstorage_manager(void) {
   /* storage_manager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager));
   G__memfunc_setup("storage_manager",1583,G__DataFormatCint_682_0_1, 105, G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager), -1, 0, 1, 1, 1, 0, "i 'storage_manager::MODE' - 0 'UNDEFINED' mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_data_to_read",1666,G__DataFormatCint_682_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"i 'DATA_STRUCT::DATA_TYPE' - 0 - type g - - 0 'true' read", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_data_to_write",1809,G__DataFormatCint_682_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"i 'DATA_STRUCT::DATA_TYPE' - 0 - type g - - 0 'true' write", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_io_mode",1159,G__DataFormatCint_682_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i 'storage_manager::MODE' - 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add_in_filename",1535,G__DataFormatCint_682_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_out_filename",1699,G__DataFormatCint_682_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("io_mode",732,G__DataFormatCint_682_0_7, 105, G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLMODE), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("input_filename",1488,G__DataFormatCint_682_0_8, 117, G__get_linked_tagnum(&G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<std::string>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("output_filename",1617,G__DataFormatCint_682_0_9, 117, G__get_linked_tagnum(&G__DataFormatCintLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("status",676,G__DataFormatCint_682_0_10, 105, G__get_linked_tagnum(&G__DataFormatCintLN_storage_managercLcLSTATUS), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__DataFormatCint_682_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("open",434,G__DataFormatCint_682_0_12, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("is_open",749,G__DataFormatCint_682_0_13, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("is_ready_io",1159,G__DataFormatCint_682_0_14, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("next_event",1088,G__DataFormatCint_682_0_15, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("go_to",536,G__DataFormatCint_682_0_16, 103, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("close",534,G__DataFormatCint_682_0_17, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_data",825,G__DataFormatCint_682_0_18, 85, G__get_linked_tagnum(&G__DataFormatCintLN_data_base), -1, 0, 1, 1, 1, 0, "i 'DATA_STRUCT::DATA_TYPE' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,G__DataFormatCint_682_0_19, 85, G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (storage_manager* (*)())(&storage_manager::get) ), 0);
   G__memfunc_setup("kill",428,G__DataFormatCint_682_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&storage_manager::kill) ), 0);
   G__memfunc_setup("get_entries",1177,G__DataFormatCint_682_0_21, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_index",951,G__DataFormatCint_682_0_22, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_entries_read",1684,G__DataFormatCint_682_0_23, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_entires_written",2053,G__DataFormatCint_682_0_24, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("create_data_ptr",1570,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i 'DATA_STRUCT::DATA_TYPE' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delete_data_ptr",1569,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i 'DATA_STRUCT::DATA_TYPE' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read_event",1053,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write_event",1196,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("prepare_tree",1278,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("storage_manager", 1583, G__DataFormatCint_682_0_30, (int) ('i'), G__get_linked_tagnum(&G__DataFormatCintLN_storage_manager), -1, 0, 1, 1, 1, 0, "u 'storage_manager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~storage_manager", 1709, G__DataFormatCint_682_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncDataFormatCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalDataFormatCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcDataFormatCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__DataFormatCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR = { "vector<unsigned short,allocator<unsigned short> >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_vectorlEboolcOallocatorlEboolgRsPgR = { "vector<bool,allocator<bool> >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__DataFormatCintLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_PMT = { "PMT" , 110 , -1 };
G__linked_taginfo G__DataFormatCintLN_PMTcLcLDISCRIMINATOR = { "PMT::DISCRIMINATOR" , 101 , -1 };
G__linked_taginfo G__DataFormatCintLN_DATA_STRUCT = { "DATA_STRUCT" , 110 , -1 };
G__linked_taginfo G__DataFormatCintLN_DATA_STRUCTcLcLDATA_TYPE = { "DATA_STRUCT::DATA_TYPE" , 101 , -1 };
G__linked_taginfo G__DataFormatCintLN_decoder_base = { "decoder_base" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_data_base = { "data_base" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_pmt_waveform = { "pmt_waveform" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_pmt_wf_collection = { "pmt_wf_collection" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR = { "vector<pmt_waveform,allocator<pmt_waveform> >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiterator = { "vector<pmt_waveform,allocator<pmt_waveform> >::iterator" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_reverse_iteratorlEvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pmt_waveform,allocator<pmt_waveform> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_tpc_waveform = { "tpc_waveform" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_tpc_wf_collection = { "tpc_wf_collection" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR = { "vector<tpc_waveform,allocator<tpc_waveform> >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiterator = { "vector<tpc_waveform,allocator<tpc_waveform> >::iterator" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_reverse_iteratorlEvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<tpc_waveform,allocator<tpc_waveform> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_trig_info = { "trig_info" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_pulse_info = { "pulse_info" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_pulse_collection = { "pulse_collection" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR = { "vector<pulse_info,allocator<pulse_info> >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiterator = { "vector<pulse_info,allocator<pulse_info> >::iterator" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_reverse_iteratorlEvectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pulse_info,allocator<pulse_info> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR = { "map<string,int,less<string>,allocator<pair<const string,int> > >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR = { "map<string,double,less<string>,allocator<pair<const string,double> > >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_user_info = { "user_info" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR = { "map<string,string,less<string>,allocator<pair<const string,string> > >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR = { "map<string,bool,less<string>,allocator<pair<const string,bool> > >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR = { "map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR = { "map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR = { "map<string,vector<string,allocator<string> >,less<string>,allocator<pair<const string,vector<string,allocator<string> > > > >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR = { "map<string,vector<bool,allocator<bool> >,less<string>,allocator<pair<const string,vector<bool,allocator<bool> > > > >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_user_collection = { "user_collection" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR = { "vector<user_info,allocator<user_info> >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiterator = { "vector<user_info,allocator<user_info> >::iterator" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_reverse_iteratorlEvectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiteratorgR = { "reverse_iterator<vector<user_info,allocator<user_info> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_TChain = { "TChain" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_storage_manager = { "storage_manager" , 99 , -1 };
G__linked_taginfo G__DataFormatCintLN_storage_managercLcLMODE = { "storage_manager::MODE" , 101 , -1 };
G__linked_taginfo G__DataFormatCintLN_storage_managercLcLSTATUS = { "storage_manager::STATUS" , 101 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableDataFormatCint() {
  G__DataFormatCintLN_TClass.tagnum = -1 ;
  G__DataFormatCintLN_TBuffer.tagnum = -1 ;
  G__DataFormatCintLN_TMemberInspector.tagnum = -1 ;
  G__DataFormatCintLN_TObject.tagnum = -1 ;
  G__DataFormatCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_vectorlEboolcOallocatorlEboolgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_string.tagnum = -1 ;
  G__DataFormatCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataFormatCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataFormatCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__DataFormatCintLN_TFile.tagnum = -1 ;
  G__DataFormatCintLN_PMT.tagnum = -1 ;
  G__DataFormatCintLN_PMTcLcLDISCRIMINATOR.tagnum = -1 ;
  G__DataFormatCintLN_DATA_STRUCT.tagnum = -1 ;
  G__DataFormatCintLN_DATA_STRUCTcLcLDATA_TYPE.tagnum = -1 ;
  G__DataFormatCintLN_decoder_base.tagnum = -1 ;
  G__DataFormatCintLN_data_base.tagnum = -1 ;
  G__DataFormatCintLN_pmt_waveform.tagnum = -1 ;
  G__DataFormatCintLN_pmt_wf_collection.tagnum = -1 ;
  G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiterator.tagnum = -1 ;
  G__DataFormatCintLN_reverse_iteratorlEvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataFormatCintLN_tpc_waveform.tagnum = -1 ;
  G__DataFormatCintLN_tpc_wf_collection.tagnum = -1 ;
  G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiterator.tagnum = -1 ;
  G__DataFormatCintLN_reverse_iteratorlEvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataFormatCintLN_trig_info.tagnum = -1 ;
  G__DataFormatCintLN_pulse_info.tagnum = -1 ;
  G__DataFormatCintLN_pulse_collection.tagnum = -1 ;
  G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiterator.tagnum = -1 ;
  G__DataFormatCintLN_reverse_iteratorlEvectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataFormatCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_user_info.tagnum = -1 ;
  G__DataFormatCintLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataFormatCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_user_collection.tagnum = -1 ;
  G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiterator.tagnum = -1 ;
  G__DataFormatCintLN_reverse_iteratorlEvectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataFormatCintLN_TTree.tagnum = -1 ;
  G__DataFormatCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__DataFormatCintLN_TChain.tagnum = -1 ;
  G__DataFormatCintLN_storage_manager.tagnum = -1 ;
  G__DataFormatCintLN_storage_managercLcLMODE.tagnum = -1 ;
  G__DataFormatCintLN_storage_managercLcLSTATUS.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableDataFormatCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlEboolcOallocatorlEboolgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_string);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TFile);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_PMT);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_PMTcLcLDISCRIMINATOR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_DATA_STRUCT);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_DATA_STRUCTcLcLDATA_TYPE);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_decoder_base);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_data_base),sizeof(data_base),-1,292608,(char*)NULL,G__setup_memvardata_base,G__setup_memfuncdata_base);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_pmt_waveform),sizeof(pmt_waveform),-1,325376,(char*)NULL,G__setup_memvarpmt_waveform,G__setup_memfuncpmt_waveform);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_pmt_wf_collection),sizeof(pmt_wf_collection),-1,325376,(char*)NULL,G__setup_memvarpmt_wf_collection,G__setup_memfuncpmt_wf_collection);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR),sizeof(vector<pmt_waveform,allocator<pmt_waveform> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR,G__setup_memfuncvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_reverse_iteratorlEvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_tpc_waveform),sizeof(tpc_waveform),-1,325376,(char*)NULL,G__setup_memvartpc_waveform,G__setup_memfunctpc_waveform);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_tpc_wf_collection),sizeof(tpc_wf_collection),-1,325376,(char*)NULL,G__setup_memvartpc_wf_collection,G__setup_memfunctpc_wf_collection);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR),sizeof(vector<tpc_waveform,allocator<tpc_waveform> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR,G__setup_memfuncvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_reverse_iteratorlEvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_trig_info),sizeof(trig_info),-1,292608,(char*)NULL,G__setup_memvartrig_info,G__setup_memfunctrig_info);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_pulse_info),sizeof(pulse_info),-1,292608,(char*)NULL,G__setup_memvarpulse_info,G__setup_memfuncpulse_info);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_pulse_collection),sizeof(pulse_collection),-1,325376,(char*)NULL,G__setup_memvarpulse_collection,G__setup_memfuncpulse_collection);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR),sizeof(vector<pulse_info,allocator<pulse_info> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEpulse_infocOallocatorlEpulse_infogRsPgR,G__setup_memfuncvectorlEpulse_infocOallocatorlEpulse_infogRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_reverse_iteratorlEvectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_user_info),sizeof(user_info),-1,292608,(char*)NULL,G__setup_memvaruser_info,G__setup_memfuncuser_info);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_user_collection),sizeof(user_collection),-1,325376,(char*)NULL,G__setup_memvaruser_collection,G__setup_memfuncuser_collection);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR),sizeof(vector<user_info,allocator<user_info> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEuser_infocOallocatorlEuser_infogRsPgR,G__setup_memfuncvectorlEuser_infocOallocatorlEuser_infogRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_reverse_iteratorlEvectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TTree);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_TChain);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataFormatCintLN_storage_manager),sizeof(storage_manager),-1,263424,(char*)NULL,G__setup_memvarstorage_manager,G__setup_memfuncstorage_manager);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_storage_managercLcLMODE);
   G__get_linked_tagnum_fwd(&G__DataFormatCintLN_storage_managercLcLSTATUS);
}
extern "C" void G__cpp_setupDataFormatCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupDataFormatCint()");
  G__set_cpp_environmentDataFormatCint();
  G__cpp_setup_tagtableDataFormatCint();

  G__cpp_setup_inheritanceDataFormatCint();

  G__cpp_setup_typetableDataFormatCint();

  G__cpp_setup_memvarDataFormatCint();

  G__cpp_setup_memfuncDataFormatCint();
  G__cpp_setup_globalDataFormatCint();
  G__cpp_setup_funcDataFormatCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncDataFormatCint();
  return;
}
class G__cpp_setup_initDataFormatCint {
  public:
    G__cpp_setup_initDataFormatCint() { G__add_setup_func("DataFormatCint",(G__incsetup)(&G__cpp_setupDataFormatCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initDataFormatCint() { G__remove_setup_func("DataFormatCint"); }
};
G__cpp_setup_initDataFormatCint G__cpp_setup_initializerDataFormatCint;

