//
// File generated by rootcint at Wed Nov 13 09:44:17 2013

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME AlgorithmCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "AlgorithmCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::algo_base algo_base;
      #else
      class algo_base  :  public ::decoder_base {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~algo_base() throw() {};
         bool _debug_mode; ///< Debug mode boolean holder
         bool _bt_mode; ///< Back-trace mode boolean holder
         ::storage_manager* _storage; ///< Data storage pointer to be provided by a parent process.
         unsigned int _checksum; ///< data checksum
         unsigned int _nwords; ///< number of data word counts processed
         deque< PMT::word_t > _bt_words; ///< processed words to be stored event-wise for back-trace purpose  
         unsigned long _bt_nwords; ///< user defined # of words to be temporarily stored in the buffer
         bool _bt_nwords_filled; ///< run utility boolean to keep a recored of filled buffer
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::algo_slow_readout_decoder algo_slow_readout_decoder;
      #else
      class algo_slow_readout_decoder  :  public ::algo_base {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::algo_slow_readout_decoder::PROCESS_FLAG PROCESS_FLAG;
         #else
         enum PROCESS_FLAG  {
         };
         #endif

         // To force the creation of a virtual table, throw just in case.
         virtual ~algo_slow_readout_decoder() throw() {};
         unsigned int _event_header_words[6]; ///< Event header word holder
         ::pmt_waveform _ch_data; ///< Channel data holder.
         ::pmt_wf_collection* _event_data; ///< Event waveform
         ::PMT::DISCRIMINATOR _last_disc_id; ///< Holder of last channel data's disc. id
         unsigned short _last_channel_number; ///< Holder of last channel data's channel number
         PROCESS_FLAG _process; ///< Process status flag holder
         bool _continue_to_next_event; ///< Boolean to let a user continue to next event for any issue.
         bool _print_adcval; ///< Boolean to print out adc values
         bool _beam_event; ///< Boolean for beam event
         unsigned int _beam_ref_nwords; ///< Number of ADC samples in beam ref channel
         unsigned int _beam_ref_sample; ///< Sample number in beam ref channel
         unsigned int _beam_ref_frame; ///< Frame ID from beam ref channel 
         unsigned int _last_word; ///< Last word processed
         unsigned long _channel_header_count; ///< A counter for channel header words
         unsigned long _event_header_count; ///< A counter for event header words
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::algo_xmit_decoder algo_xmit_decoder;
      #else
      class algo_xmit_decoder  :  public ::algo_slow_readout_decoder {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~algo_xmit_decoder() throw() {};
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::algo_trig_decoder algo_trig_decoder;
      #else
      class algo_trig_decoder  :  public ::algo_base {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~algo_trig_decoder() throw() {};
         ::trig_info* _data; //
         unsigned int _nevents; //
         unsigned long _trigger_word_count; //
         unsigned int _trigger_words[3]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::algo_fem_decoder_base algo_fem_decoder_base;
      #else
      class algo_fem_decoder_base  :  public ::algo_base {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::algo_fem_decoder_base::InfoFEM_t InfoFEM_t;
         #else
         class InfoFEM_t  {
            public:
            //friend XX;
            unsigned int module_address; ///< Module address
            unsigned int module_id; ///< Module id number
            unsigned int event_id; ///< Event counter 
            unsigned int event_frame_id; ///< Data packet frame number
            unsigned int trigger_frame_id; ///< Trigger frame number
            unsigned int trigger_timeslice; ///< Trigger sample number
            unsigned int nwords; ///< Number of words in an event
            unsigned int checksum; ///< Data checksum
            bool quality; ///< Event-wise quality check
         };
         #endif

         // To force the creation of a virtual table, throw just in case.
         virtual ~algo_fem_decoder_base() throw() {};
         unsigned int _event_header_words[6]; ///< Event header word holder
         unsigned int _last_word; ///< Last word processed
         unsigned long _event_header_count; ///< A counter for event header words
         bool _search_for_next_event; //
         InfoFEM_t _header_info; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::algo_pmt_xmit algo_pmt_xmit;
      #else
      class algo_pmt_xmit  :  public ::algo_fem_decoder_base {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~algo_pmt_xmit() throw() {};
         ::pmt_waveform _ch_data; //
         ::pmt_wf_collection* _event_data; //
         ::PMT::DISCRIMINATOR _last_disc_id; ///< Holder of last channel data's disc. id
         unsigned short _last_channel_number; ///< Holder of last channel data's channel number
         unsigned long _channel_header_count; ///< A counter for channel header words
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::algo_tpc_xmit algo_tpc_xmit;
      #else
      class algo_tpc_xmit  :  public ::algo_fem_decoder_base {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~algo_tpc_xmit() throw() {};
         ::tpc_waveform _ch_data; //
         ::tpc_wf_collection* _event_data; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::algo_tpc_huffman algo_tpc_huffman;
      #else
      class algo_tpc_huffman  :  public ::algo_tpc_xmit {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~algo_tpc_huffman() throw() {};
         bool _search_header; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void algo_base_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void algo_base_Dictionary();
   static void delete_algo_base(void *p);
   static void deleteArray_algo_base(void *p);
   static void destruct_algo_base(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::algo_base*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::algo_base) == sizeof(::ROOT::Shadow::algo_base));
      ::algo_base *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::algo_base),0);
      static ::ROOT::TGenericClassInfo 
         instance("algo_base", "./algo_base.hh", 26,
                  typeid(::algo_base), DefineBehavior(ptr, ptr),
                  &algo_base_ShowMembers, &algo_base_Dictionary, isa_proxy, 4,
                  sizeof(::algo_base) );
      instance.SetDelete(&delete_algo_base);
      instance.SetDeleteArray(&deleteArray_algo_base);
      instance.SetDestructor(&destruct_algo_base);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::algo_base*)
   {
      return GenerateInitInstanceLocal((::algo_base*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::algo_base*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void algo_base_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::algo_base*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void algo_slow_readout_decoder_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void algo_slow_readout_decoder_Dictionary();
   static void *new_algo_slow_readout_decoder(void *p = 0);
   static void *newArray_algo_slow_readout_decoder(Long_t size, void *p);
   static void delete_algo_slow_readout_decoder(void *p);
   static void deleteArray_algo_slow_readout_decoder(void *p);
   static void destruct_algo_slow_readout_decoder(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::algo_slow_readout_decoder*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::algo_slow_readout_decoder) == sizeof(::ROOT::Shadow::algo_slow_readout_decoder));
      ::algo_slow_readout_decoder *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::algo_slow_readout_decoder),0);
      static ::ROOT::TGenericClassInfo 
         instance("algo_slow_readout_decoder", "./algo_slow_readout_decoder.hh", 26,
                  typeid(::algo_slow_readout_decoder), DefineBehavior(ptr, ptr),
                  &algo_slow_readout_decoder_ShowMembers, &algo_slow_readout_decoder_Dictionary, isa_proxy, 4,
                  sizeof(::algo_slow_readout_decoder) );
      instance.SetNew(&new_algo_slow_readout_decoder);
      instance.SetNewArray(&newArray_algo_slow_readout_decoder);
      instance.SetDelete(&delete_algo_slow_readout_decoder);
      instance.SetDeleteArray(&deleteArray_algo_slow_readout_decoder);
      instance.SetDestructor(&destruct_algo_slow_readout_decoder);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::algo_slow_readout_decoder*)
   {
      return GenerateInitInstanceLocal((::algo_slow_readout_decoder*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::algo_slow_readout_decoder*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void algo_slow_readout_decoder_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::algo_slow_readout_decoder*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void algo_xmit_decoder_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void algo_xmit_decoder_Dictionary();
   static void *new_algo_xmit_decoder(void *p = 0);
   static void *newArray_algo_xmit_decoder(Long_t size, void *p);
   static void delete_algo_xmit_decoder(void *p);
   static void deleteArray_algo_xmit_decoder(void *p);
   static void destruct_algo_xmit_decoder(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::algo_xmit_decoder*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::algo_xmit_decoder) == sizeof(::ROOT::Shadow::algo_xmit_decoder));
      ::algo_xmit_decoder *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::algo_xmit_decoder),0);
      static ::ROOT::TGenericClassInfo 
         instance("algo_xmit_decoder", "./algo_xmit_decoder.hh", 27,
                  typeid(::algo_xmit_decoder), DefineBehavior(ptr, ptr),
                  &algo_xmit_decoder_ShowMembers, &algo_xmit_decoder_Dictionary, isa_proxy, 4,
                  sizeof(::algo_xmit_decoder) );
      instance.SetNew(&new_algo_xmit_decoder);
      instance.SetNewArray(&newArray_algo_xmit_decoder);
      instance.SetDelete(&delete_algo_xmit_decoder);
      instance.SetDeleteArray(&deleteArray_algo_xmit_decoder);
      instance.SetDestructor(&destruct_algo_xmit_decoder);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::algo_xmit_decoder*)
   {
      return GenerateInitInstanceLocal((::algo_xmit_decoder*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::algo_xmit_decoder*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void algo_xmit_decoder_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::algo_xmit_decoder*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void algo_trig_decoder_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void algo_trig_decoder_Dictionary();
   static void *new_algo_trig_decoder(void *p = 0);
   static void *newArray_algo_trig_decoder(Long_t size, void *p);
   static void delete_algo_trig_decoder(void *p);
   static void deleteArray_algo_trig_decoder(void *p);
   static void destruct_algo_trig_decoder(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::algo_trig_decoder*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::algo_trig_decoder) == sizeof(::ROOT::Shadow::algo_trig_decoder));
      ::algo_trig_decoder *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::algo_trig_decoder),0);
      static ::ROOT::TGenericClassInfo 
         instance("algo_trig_decoder", "./algo_trig_decoder.hh", 24,
                  typeid(::algo_trig_decoder), DefineBehavior(ptr, ptr),
                  &algo_trig_decoder_ShowMembers, &algo_trig_decoder_Dictionary, isa_proxy, 4,
                  sizeof(::algo_trig_decoder) );
      instance.SetNew(&new_algo_trig_decoder);
      instance.SetNewArray(&newArray_algo_trig_decoder);
      instance.SetDelete(&delete_algo_trig_decoder);
      instance.SetDeleteArray(&deleteArray_algo_trig_decoder);
      instance.SetDestructor(&destruct_algo_trig_decoder);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::algo_trig_decoder*)
   {
      return GenerateInitInstanceLocal((::algo_trig_decoder*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::algo_trig_decoder*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void algo_trig_decoder_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::algo_trig_decoder*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void algo_fem_decoder_base_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void algo_fem_decoder_base_Dictionary();
   static void delete_algo_fem_decoder_base(void *p);
   static void deleteArray_algo_fem_decoder_base(void *p);
   static void destruct_algo_fem_decoder_base(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::algo_fem_decoder_base*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::algo_fem_decoder_base) == sizeof(::ROOT::Shadow::algo_fem_decoder_base));
      ::algo_fem_decoder_base *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::algo_fem_decoder_base),0);
      static ::ROOT::TGenericClassInfo 
         instance("algo_fem_decoder_base", "./algo_fem_decoder_base.hh", 34,
                  typeid(::algo_fem_decoder_base), DefineBehavior(ptr, ptr),
                  &algo_fem_decoder_base_ShowMembers, &algo_fem_decoder_base_Dictionary, isa_proxy, 4,
                  sizeof(::algo_fem_decoder_base) );
      instance.SetDelete(&delete_algo_fem_decoder_base);
      instance.SetDeleteArray(&deleteArray_algo_fem_decoder_base);
      instance.SetDestructor(&destruct_algo_fem_decoder_base);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::algo_fem_decoder_base*)
   {
      return GenerateInitInstanceLocal((::algo_fem_decoder_base*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::algo_fem_decoder_base*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void algo_fem_decoder_base_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::algo_fem_decoder_base*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void algo_pmt_xmit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void algo_pmt_xmit_Dictionary();
   static void *new_algo_pmt_xmit(void *p = 0);
   static void *newArray_algo_pmt_xmit(Long_t size, void *p);
   static void delete_algo_pmt_xmit(void *p);
   static void deleteArray_algo_pmt_xmit(void *p);
   static void destruct_algo_pmt_xmit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::algo_pmt_xmit*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::algo_pmt_xmit) == sizeof(::ROOT::Shadow::algo_pmt_xmit));
      ::algo_pmt_xmit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::algo_pmt_xmit),0);
      static ::ROOT::TGenericClassInfo 
         instance("algo_pmt_xmit", "./algo_pmt_xmit.hh", 36,
                  typeid(::algo_pmt_xmit), DefineBehavior(ptr, ptr),
                  &algo_pmt_xmit_ShowMembers, &algo_pmt_xmit_Dictionary, isa_proxy, 4,
                  sizeof(::algo_pmt_xmit) );
      instance.SetNew(&new_algo_pmt_xmit);
      instance.SetNewArray(&newArray_algo_pmt_xmit);
      instance.SetDelete(&delete_algo_pmt_xmit);
      instance.SetDeleteArray(&deleteArray_algo_pmt_xmit);
      instance.SetDestructor(&destruct_algo_pmt_xmit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::algo_pmt_xmit*)
   {
      return GenerateInitInstanceLocal((::algo_pmt_xmit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::algo_pmt_xmit*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void algo_pmt_xmit_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::algo_pmt_xmit*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void algo_tpc_xmit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void algo_tpc_xmit_Dictionary();
   static void *new_algo_tpc_xmit(void *p = 0);
   static void *newArray_algo_tpc_xmit(Long_t size, void *p);
   static void delete_algo_tpc_xmit(void *p);
   static void deleteArray_algo_tpc_xmit(void *p);
   static void destruct_algo_tpc_xmit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::algo_tpc_xmit*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::algo_tpc_xmit) == sizeof(::ROOT::Shadow::algo_tpc_xmit));
      ::algo_tpc_xmit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::algo_tpc_xmit),0);
      static ::ROOT::TGenericClassInfo 
         instance("algo_tpc_xmit", "./algo_tpc_xmit.hh", 36,
                  typeid(::algo_tpc_xmit), DefineBehavior(ptr, ptr),
                  &algo_tpc_xmit_ShowMembers, &algo_tpc_xmit_Dictionary, isa_proxy, 4,
                  sizeof(::algo_tpc_xmit) );
      instance.SetNew(&new_algo_tpc_xmit);
      instance.SetNewArray(&newArray_algo_tpc_xmit);
      instance.SetDelete(&delete_algo_tpc_xmit);
      instance.SetDeleteArray(&deleteArray_algo_tpc_xmit);
      instance.SetDestructor(&destruct_algo_tpc_xmit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::algo_tpc_xmit*)
   {
      return GenerateInitInstanceLocal((::algo_tpc_xmit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::algo_tpc_xmit*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void algo_tpc_xmit_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::algo_tpc_xmit*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void algo_tpc_huffman_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void algo_tpc_huffman_Dictionary();
   static void *new_algo_tpc_huffman(void *p = 0);
   static void *newArray_algo_tpc_huffman(Long_t size, void *p);
   static void delete_algo_tpc_huffman(void *p);
   static void deleteArray_algo_tpc_huffman(void *p);
   static void destruct_algo_tpc_huffman(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::algo_tpc_huffman*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::algo_tpc_huffman) == sizeof(::ROOT::Shadow::algo_tpc_huffman));
      ::algo_tpc_huffman *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::algo_tpc_huffman),0);
      static ::ROOT::TGenericClassInfo 
         instance("algo_tpc_huffman", "./algo_tpc_huffman.hh", 7,
                  typeid(::algo_tpc_huffman), DefineBehavior(ptr, ptr),
                  &algo_tpc_huffman_ShowMembers, &algo_tpc_huffman_Dictionary, isa_proxy, 4,
                  sizeof(::algo_tpc_huffman) );
      instance.SetNew(&new_algo_tpc_huffman);
      instance.SetNewArray(&newArray_algo_tpc_huffman);
      instance.SetDelete(&delete_algo_tpc_huffman);
      instance.SetDeleteArray(&deleteArray_algo_tpc_huffman);
      instance.SetDestructor(&destruct_algo_tpc_huffman);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::algo_tpc_huffman*)
   {
      return GenerateInitInstanceLocal((::algo_tpc_huffman*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::algo_tpc_huffman*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void algo_tpc_huffman_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::algo_tpc_huffman*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void algo_base_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class algo_base.
      typedef ::ROOT::Shadow::algo_base ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::algo_base*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_debug_mode", &sobj->_debug_mode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_bt_mode", &sobj->_bt_mode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_storage", &sobj->_storage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_checksum", &sobj->_checksum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nwords", &sobj->_nwords);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_bt_words", (void*)&sobj->_bt_words);
      R__insp.InspectMember("deque<PMT::word_t>", (void*)&sobj->_bt_words, "_bt_words.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_bt_nwords", &sobj->_bt_nwords);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_bt_nwords_filled", &sobj->_bt_nwords_filled);
      R__insp.GenericShowMembers("decoder_base", ( ::decoder_base * )( (::algo_base*) obj ), false);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_algo_base(void *p) {
      delete ((::algo_base*)p);
   }
   static void deleteArray_algo_base(void *p) {
      delete [] ((::algo_base*)p);
   }
   static void destruct_algo_base(void *p) {
      typedef ::algo_base current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::algo_base

//______________________________________________________________________________
namespace ROOT {
   void algo_slow_readout_decoder_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class algo_slow_readout_decoder.
      typedef ::ROOT::Shadow::algo_slow_readout_decoder ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::algo_slow_readout_decoder*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_event_header_words[6]", sobj->_event_header_words);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ch_data", &sobj->_ch_data);
      R__insp.InspectMember(sobj->_ch_data, "_ch_data.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_event_data", &sobj->_event_data);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_last_disc_id", &sobj->_last_disc_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_last_channel_number", &sobj->_last_channel_number);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_process", &sobj->_process);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_continue_to_next_event", &sobj->_continue_to_next_event);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_print_adcval", &sobj->_print_adcval);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_beam_event", &sobj->_beam_event);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_beam_ref_nwords", &sobj->_beam_ref_nwords);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_beam_ref_sample", &sobj->_beam_ref_sample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_beam_ref_frame", &sobj->_beam_ref_frame);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_last_word", &sobj->_last_word);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_channel_header_count", &sobj->_channel_header_count);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_event_header_count", &sobj->_event_header_count);
      R__insp.GenericShowMembers("algo_base", ( ::algo_base * )( (::algo_slow_readout_decoder*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_algo_slow_readout_decoder(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::algo_slow_readout_decoder : new ::algo_slow_readout_decoder;
   }
   static void *newArray_algo_slow_readout_decoder(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::algo_slow_readout_decoder[nElements] : new ::algo_slow_readout_decoder[nElements];
   }
   // Wrapper around operator delete
   static void delete_algo_slow_readout_decoder(void *p) {
      delete ((::algo_slow_readout_decoder*)p);
   }
   static void deleteArray_algo_slow_readout_decoder(void *p) {
      delete [] ((::algo_slow_readout_decoder*)p);
   }
   static void destruct_algo_slow_readout_decoder(void *p) {
      typedef ::algo_slow_readout_decoder current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::algo_slow_readout_decoder

//______________________________________________________________________________
namespace ROOT {
   void algo_xmit_decoder_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class algo_xmit_decoder.
      typedef ::ROOT::Shadow::algo_xmit_decoder ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::algo_xmit_decoder*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.GenericShowMembers("algo_slow_readout_decoder", ( ::algo_slow_readout_decoder * )( (::algo_xmit_decoder*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_algo_xmit_decoder(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::algo_xmit_decoder : new ::algo_xmit_decoder;
   }
   static void *newArray_algo_xmit_decoder(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::algo_xmit_decoder[nElements] : new ::algo_xmit_decoder[nElements];
   }
   // Wrapper around operator delete
   static void delete_algo_xmit_decoder(void *p) {
      delete ((::algo_xmit_decoder*)p);
   }
   static void deleteArray_algo_xmit_decoder(void *p) {
      delete [] ((::algo_xmit_decoder*)p);
   }
   static void destruct_algo_xmit_decoder(void *p) {
      typedef ::algo_xmit_decoder current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::algo_xmit_decoder

//______________________________________________________________________________
namespace ROOT {
   void algo_tpc_xmit_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class algo_tpc_xmit.
      typedef ::ROOT::Shadow::algo_tpc_xmit ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::algo_tpc_xmit*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ch_data", &sobj->_ch_data);
      R__insp.InspectMember(sobj->_ch_data, "_ch_data.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_event_data", &sobj->_event_data);
      R__insp.GenericShowMembers("algo_fem_decoder_base", ( ::algo_fem_decoder_base * )( (::algo_tpc_xmit*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_algo_tpc_xmit(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::algo_tpc_xmit : new ::algo_tpc_xmit;
   }
   static void *newArray_algo_tpc_xmit(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::algo_tpc_xmit[nElements] : new ::algo_tpc_xmit[nElements];
   }
   // Wrapper around operator delete
   static void delete_algo_tpc_xmit(void *p) {
      delete ((::algo_tpc_xmit*)p);
   }
   static void deleteArray_algo_tpc_xmit(void *p) {
      delete [] ((::algo_tpc_xmit*)p);
   }
   static void destruct_algo_tpc_xmit(void *p) {
      typedef ::algo_tpc_xmit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::algo_tpc_xmit

//______________________________________________________________________________
namespace ROOT {
   void algo_pmt_xmit_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class algo_pmt_xmit.
      typedef ::ROOT::Shadow::algo_pmt_xmit ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::algo_pmt_xmit*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ch_data", &sobj->_ch_data);
      R__insp.InspectMember(sobj->_ch_data, "_ch_data.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_event_data", &sobj->_event_data);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_last_disc_id", &sobj->_last_disc_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_last_channel_number", &sobj->_last_channel_number);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_channel_header_count", &sobj->_channel_header_count);
      R__insp.GenericShowMembers("algo_fem_decoder_base", ( ::algo_fem_decoder_base * )( (::algo_pmt_xmit*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_algo_pmt_xmit(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::algo_pmt_xmit : new ::algo_pmt_xmit;
   }
   static void *newArray_algo_pmt_xmit(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::algo_pmt_xmit[nElements] : new ::algo_pmt_xmit[nElements];
   }
   // Wrapper around operator delete
   static void delete_algo_pmt_xmit(void *p) {
      delete ((::algo_pmt_xmit*)p);
   }
   static void deleteArray_algo_pmt_xmit(void *p) {
      delete [] ((::algo_pmt_xmit*)p);
   }
   static void destruct_algo_pmt_xmit(void *p) {
      typedef ::algo_pmt_xmit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::algo_pmt_xmit

//______________________________________________________________________________
namespace ROOT {
   void algo_tpc_huffman_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class algo_tpc_huffman.
      typedef ::ROOT::Shadow::algo_tpc_huffman ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::algo_tpc_huffman*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_search_header", &sobj->_search_header);
      R__insp.GenericShowMembers("algo_tpc_xmit", ( ::algo_tpc_xmit * )( (::algo_tpc_huffman*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_algo_tpc_huffman(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::algo_tpc_huffman : new ::algo_tpc_huffman;
   }
   static void *newArray_algo_tpc_huffman(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::algo_tpc_huffman[nElements] : new ::algo_tpc_huffman[nElements];
   }
   // Wrapper around operator delete
   static void delete_algo_tpc_huffman(void *p) {
      delete ((::algo_tpc_huffman*)p);
   }
   static void deleteArray_algo_tpc_huffman(void *p) {
      delete [] ((::algo_tpc_huffman*)p);
   }
   static void destruct_algo_tpc_huffman(void *p) {
      typedef ::algo_tpc_huffman current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::algo_tpc_huffman

//______________________________________________________________________________
namespace ROOT {
   void algo_trig_decoder_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class algo_trig_decoder.
      typedef ::ROOT::Shadow::algo_trig_decoder ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::algo_trig_decoder*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_data", &sobj->_data);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nevents", &sobj->_nevents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_trigger_word_count", &sobj->_trigger_word_count);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_trigger_words[3]", sobj->_trigger_words);
      R__insp.GenericShowMembers("algo_base", ( ::algo_base * )( (::algo_trig_decoder*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_algo_trig_decoder(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::algo_trig_decoder : new ::algo_trig_decoder;
   }
   static void *newArray_algo_trig_decoder(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::algo_trig_decoder[nElements] : new ::algo_trig_decoder[nElements];
   }
   // Wrapper around operator delete
   static void delete_algo_trig_decoder(void *p) {
      delete ((::algo_trig_decoder*)p);
   }
   static void deleteArray_algo_trig_decoder(void *p) {
      delete [] ((::algo_trig_decoder*)p);
   }
   static void destruct_algo_trig_decoder(void *p) {
      typedef ::algo_trig_decoder current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::algo_trig_decoder

//______________________________________________________________________________
namespace ROOT {
   void algo_fem_decoder_base_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class algo_fem_decoder_base.
      typedef ::ROOT::Shadow::algo_fem_decoder_base ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::algo_fem_decoder_base*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_event_header_words[6]", sobj->_event_header_words);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_last_word", &sobj->_last_word);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_event_header_count", &sobj->_event_header_count);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_search_for_next_event", &sobj->_search_for_next_event);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_header_info", (void*)&sobj->_header_info);
      R__insp.InspectMember("algo_fem_decoder_base::InfoFEM_t", (void*)&sobj->_header_info, "_header_info.", false);
      R__insp.GenericShowMembers("algo_base", ( ::algo_base * )( (::algo_fem_decoder_base*) obj ), false);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_algo_fem_decoder_base(void *p) {
      delete ((::algo_fem_decoder_base*)p);
   }
   static void deleteArray_algo_fem_decoder_base(void *p) {
      delete [] ((::algo_fem_decoder_base*)p);
   }
   static void destruct_algo_fem_decoder_base(void *p) {
      typedef ::algo_fem_decoder_base current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::algo_fem_decoder_base

namespace ROOT {
   void dequelEunsignedsPintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void dequelEunsignedsPintgR_Dictionary();
   static void *new_dequelEunsignedsPintgR(void *p = 0);
   static void *newArray_dequelEunsignedsPintgR(Long_t size, void *p);
   static void delete_dequelEunsignedsPintgR(void *p);
   static void deleteArray_dequelEunsignedsPintgR(void *p);
   static void destruct_dequelEunsignedsPintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const deque<unsigned int>*)
   {
      deque<unsigned int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(deque<unsigned int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("deque<unsigned int>", -2, "prec_stl/deque", 42,
                  typeid(deque<unsigned int>), DefineBehavior(ptr, ptr),
                  0, &dequelEunsignedsPintgR_Dictionary, isa_proxy, 0,
                  sizeof(deque<unsigned int>) );
      instance.SetNew(&new_dequelEunsignedsPintgR);
      instance.SetNewArray(&newArray_dequelEunsignedsPintgR);
      instance.SetDelete(&delete_dequelEunsignedsPintgR);
      instance.SetDeleteArray(&deleteArray_dequelEunsignedsPintgR);
      instance.SetDestructor(&destruct_dequelEunsignedsPintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< deque<unsigned int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const deque<unsigned int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void dequelEunsignedsPintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const deque<unsigned int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_dequelEunsignedsPintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) deque<unsigned int> : new deque<unsigned int>;
   }
   static void *newArray_dequelEunsignedsPintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) deque<unsigned int>[nElements] : new deque<unsigned int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_dequelEunsignedsPintgR(void *p) {
      delete ((deque<unsigned int>*)p);
   }
   static void deleteArray_dequelEunsignedsPintgR(void *p) {
      delete [] ((deque<unsigned int>*)p);
   }
   static void destruct_dequelEunsignedsPintgR(void *p) {
      typedef deque<unsigned int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class deque<unsigned int>

/********************************************************
* AlgorithmCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableAlgorithmCint();

extern "C" void G__set_cpp_environmentAlgorithmCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("Algorithm-TypeDef.hh");
  G__add_compiledheader("algo_base.hh");
  G__add_compiledheader("algo_fem_decoder_base.hh");
  G__add_compiledheader("algo_pmt_xmit.hh");
  G__add_compiledheader("algo_slow_readout_decoder.hh");
  G__add_compiledheader("algo_tpc_huffman.hh");
  G__add_compiledheader("algo_tpc_xmit.hh");
  G__add_compiledheader("algo_trig_decoder.hh");
  G__add_compiledheader("algo_xmit_decoder.hh");
  G__cpp_reset_tagtableAlgorithmCint();
}
#include <new>
extern "C" int G__cpp_dllrevAlgorithmCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* algo_base */
static int G__AlgorithmCint_703_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((algo_base*) G__getstructoffset())->process_word((const PMT::word_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlgorithmCint_703_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((algo_base*) G__getstructoffset())->finalize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlgorithmCint_703_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const algo_base*) G__getstructoffset())->get_word_class((const PMT::word_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlgorithmCint_703_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((algo_base*) G__getstructoffset())->set_debug_mode((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlgorithmCint_703_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((algo_base*) G__getstructoffset())->set_storage_ptr((storage_manager*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlgorithmCint_703_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((algo_base*) G__getstructoffset())->set_backtrace_mode((size_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((algo_base*) G__getstructoffset())->set_backtrace_mode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlgorithmCint_703_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const algo_base*) G__getstructoffset())->backtrace_mode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlgorithmCint_703_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((algo_base*) G__getstructoffset())->check_event_quality());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlgorithmCint_703_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((algo_base*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlgorithmCint_703_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const algo_base*) G__getstructoffset())->backtrace();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlgorithmCint_703_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((algo_base*) G__getstructoffset())->is_event_empty());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef algo_base G__Talgo_base;
static int G__AlgorithmCint_703_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (algo_base*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((algo_base*) (soff+(sizeof(algo_base)*i)))->~G__Talgo_base();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (algo_base*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((algo_base*) (soff))->~G__Talgo_base();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AlgorithmCint_703_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   algo_base* dest = (algo_base*) G__getstructoffset();
   *dest = *(algo_base*) libp->para[0].ref;
   const algo_base& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* algo_slow_readout_decoder */
static int G__AlgorithmCint_707_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   algo_slow_readout_decoder* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new algo_slow_readout_decoder[n];
     } else {
       p = new((void*) gvp) algo_slow_readout_decoder[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new algo_slow_readout_decoder;
     } else {
       p = new((void*) gvp) algo_slow_readout_decoder;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlgorithmCintLN_algo_slow_readout_decoder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlgorithmCint_707_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((algo_slow_readout_decoder*) G__getstructoffset())->print_adcval((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((algo_slow_readout_decoder*) G__getstructoffset())->print_adcval();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlgorithmCint_707_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const algo_slow_readout_decoder*) G__getstructoffset())->round_diff((PMT::word_t) G__int(libp->para[0]), (PMT::word_t) G__int(libp->para[1])
, (PMT::word_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlgorithmCint_707_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((algo_slow_readout_decoder*) G__getstructoffset())->get_current_ch_data());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AlgorithmCint_707_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   algo_slow_readout_decoder* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new algo_slow_readout_decoder(*(algo_slow_readout_decoder*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlgorithmCintLN_algo_slow_readout_decoder));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef algo_slow_readout_decoder G__Talgo_slow_readout_decoder;
static int G__AlgorithmCint_707_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (algo_slow_readout_decoder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((algo_slow_readout_decoder*) (soff+(sizeof(algo_slow_readout_decoder)*i)))->~G__Talgo_slow_readout_decoder();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (algo_slow_readout_decoder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((algo_slow_readout_decoder*) (soff))->~G__Talgo_slow_readout_decoder();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AlgorithmCint_707_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   algo_slow_readout_decoder* dest = (algo_slow_readout_decoder*) G__getstructoffset();
   *dest = *(algo_slow_readout_decoder*) libp->para[0].ref;
   const algo_slow_readout_decoder& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* algo_xmit_decoder */
static int G__AlgorithmCint_709_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   algo_xmit_decoder* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new algo_xmit_decoder[n];
     } else {
       p = new((void*) gvp) algo_xmit_decoder[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new algo_xmit_decoder;
     } else {
       p = new((void*) gvp) algo_xmit_decoder;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlgorithmCintLN_algo_xmit_decoder));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AlgorithmCint_709_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   algo_xmit_decoder* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new algo_xmit_decoder(*(algo_xmit_decoder*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlgorithmCintLN_algo_xmit_decoder));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef algo_xmit_decoder G__Talgo_xmit_decoder;
static int G__AlgorithmCint_709_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (algo_xmit_decoder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((algo_xmit_decoder*) (soff+(sizeof(algo_xmit_decoder)*i)))->~G__Talgo_xmit_decoder();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (algo_xmit_decoder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((algo_xmit_decoder*) (soff))->~G__Talgo_xmit_decoder();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AlgorithmCint_709_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   algo_xmit_decoder* dest = (algo_xmit_decoder*) G__getstructoffset();
   *dest = *(algo_xmit_decoder*) libp->para[0].ref;
   const algo_xmit_decoder& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* algo_trig_decoder */
static int G__AlgorithmCint_710_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   algo_trig_decoder* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new algo_trig_decoder[n];
     } else {
       p = new((void*) gvp) algo_trig_decoder[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new algo_trig_decoder;
     } else {
       p = new((void*) gvp) algo_trig_decoder;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlgorithmCintLN_algo_trig_decoder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlgorithmCint_710_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((algo_trig_decoder*) G__getstructoffset())->clear_event_info();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AlgorithmCint_710_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   algo_trig_decoder* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new algo_trig_decoder(*(algo_trig_decoder*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlgorithmCintLN_algo_trig_decoder));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef algo_trig_decoder G__Talgo_trig_decoder;
static int G__AlgorithmCint_710_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (algo_trig_decoder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((algo_trig_decoder*) (soff+(sizeof(algo_trig_decoder)*i)))->~G__Talgo_trig_decoder();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (algo_trig_decoder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((algo_trig_decoder*) (soff))->~G__Talgo_trig_decoder();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AlgorithmCint_710_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   algo_trig_decoder* dest = (algo_trig_decoder*) G__getstructoffset();
   *dest = *(algo_trig_decoder*) libp->para[0].ref;
   const algo_trig_decoder& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* algo_fem_decoder_base */
static int G__AlgorithmCint_711_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const algo_fem_decoder_base*) G__getstructoffset())->round_diff((PMT::word_t) G__int(libp->para[0]), (PMT::word_t) G__int(libp->para[1])
, (PMT::word_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef algo_fem_decoder_base G__Talgo_fem_decoder_base;
static int G__AlgorithmCint_711_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (algo_fem_decoder_base*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((algo_fem_decoder_base*) (soff+(sizeof(algo_fem_decoder_base)*i)))->~G__Talgo_fem_decoder_base();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (algo_fem_decoder_base*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((algo_fem_decoder_base*) (soff))->~G__Talgo_fem_decoder_base();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AlgorithmCint_711_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   algo_fem_decoder_base* dest = (algo_fem_decoder_base*) G__getstructoffset();
   *dest = *(algo_fem_decoder_base*) libp->para[0].ref;
   const algo_fem_decoder_base& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* algo_pmt_xmit */
static int G__AlgorithmCint_713_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   algo_pmt_xmit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new algo_pmt_xmit[n];
     } else {
       p = new((void*) gvp) algo_pmt_xmit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new algo_pmt_xmit;
     } else {
       p = new((void*) gvp) algo_pmt_xmit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlgorithmCintLN_algo_pmt_xmit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AlgorithmCint_713_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   algo_pmt_xmit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new algo_pmt_xmit(*(algo_pmt_xmit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlgorithmCintLN_algo_pmt_xmit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef algo_pmt_xmit G__Talgo_pmt_xmit;
static int G__AlgorithmCint_713_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (algo_pmt_xmit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((algo_pmt_xmit*) (soff+(sizeof(algo_pmt_xmit)*i)))->~G__Talgo_pmt_xmit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (algo_pmt_xmit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((algo_pmt_xmit*) (soff))->~G__Talgo_pmt_xmit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AlgorithmCint_713_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   algo_pmt_xmit* dest = (algo_pmt_xmit*) G__getstructoffset();
   *dest = *(algo_pmt_xmit*) libp->para[0].ref;
   const algo_pmt_xmit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* algo_tpc_xmit */
static int G__AlgorithmCint_714_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   algo_tpc_xmit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new algo_tpc_xmit[n];
     } else {
       p = new((void*) gvp) algo_tpc_xmit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new algo_tpc_xmit;
     } else {
       p = new((void*) gvp) algo_tpc_xmit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_xmit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AlgorithmCint_714_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   algo_tpc_xmit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new algo_tpc_xmit(*(algo_tpc_xmit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_xmit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef algo_tpc_xmit G__Talgo_tpc_xmit;
static int G__AlgorithmCint_714_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (algo_tpc_xmit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((algo_tpc_xmit*) (soff+(sizeof(algo_tpc_xmit)*i)))->~G__Talgo_tpc_xmit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (algo_tpc_xmit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((algo_tpc_xmit*) (soff))->~G__Talgo_tpc_xmit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AlgorithmCint_714_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   algo_tpc_xmit* dest = (algo_tpc_xmit*) G__getstructoffset();
   *dest = *(algo_tpc_xmit*) libp->para[0].ref;
   const algo_tpc_xmit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* algo_tpc_huffman */
static int G__AlgorithmCint_715_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   algo_tpc_huffman* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new algo_tpc_huffman[n];
     } else {
       p = new((void*) gvp) algo_tpc_huffman[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new algo_tpc_huffman;
     } else {
       p = new((void*) gvp) algo_tpc_huffman;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_huffman));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AlgorithmCint_715_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   algo_tpc_huffman* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new algo_tpc_huffman(*(algo_tpc_huffman*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_huffman));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef algo_tpc_huffman G__Talgo_tpc_huffman;
static int G__AlgorithmCint_715_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (algo_tpc_huffman*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((algo_tpc_huffman*) (soff+(sizeof(algo_tpc_huffman)*i)))->~G__Talgo_tpc_huffman();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (algo_tpc_huffman*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((algo_tpc_huffman*) (soff))->~G__Talgo_tpc_huffman();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AlgorithmCint_715_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   algo_tpc_huffman* dest = (algo_tpc_huffman*) G__getstructoffset();
   *dest = *(algo_tpc_huffman*) libp->para[0].ref;
   const algo_tpc_huffman& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* algo_base */

/* algo_slow_readout_decoder */

/* algo_xmit_decoder */

/* algo_trig_decoder */

/* algo_fem_decoder_base */

/* algo_pmt_xmit */

/* algo_tpc_xmit */

/* algo_tpc_huffman */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncAlgorithmCint {
 public:
  G__Sizep2memfuncAlgorithmCint(): p(&G__Sizep2memfuncAlgorithmCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncAlgorithmCint::*p)();
};

size_t G__get_sizep2memfuncAlgorithmCint()
{
  G__Sizep2memfuncAlgorithmCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceAlgorithmCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_base))) {
     algo_base *G__Lderived;
     G__Lderived=(algo_base*)0x1000;
     {
       decoder_base *G__Lpbase=(decoder_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_base),G__get_linked_tagnum(&G__AlgorithmCintLN_decoder_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_slow_readout_decoder))) {
     algo_slow_readout_decoder *G__Lderived;
     G__Lderived=(algo_slow_readout_decoder*)0x1000;
     {
       algo_base *G__Lpbase=(algo_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_slow_readout_decoder),G__get_linked_tagnum(&G__AlgorithmCintLN_algo_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       decoder_base *G__Lpbase=(decoder_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_slow_readout_decoder),G__get_linked_tagnum(&G__AlgorithmCintLN_decoder_base),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_xmit_decoder))) {
     algo_xmit_decoder *G__Lderived;
     G__Lderived=(algo_xmit_decoder*)0x1000;
     {
       algo_slow_readout_decoder *G__Lpbase=(algo_slow_readout_decoder*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_xmit_decoder),G__get_linked_tagnum(&G__AlgorithmCintLN_algo_slow_readout_decoder),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       algo_base *G__Lpbase=(algo_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_xmit_decoder),G__get_linked_tagnum(&G__AlgorithmCintLN_algo_base),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       decoder_base *G__Lpbase=(decoder_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_xmit_decoder),G__get_linked_tagnum(&G__AlgorithmCintLN_decoder_base),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_trig_decoder))) {
     algo_trig_decoder *G__Lderived;
     G__Lderived=(algo_trig_decoder*)0x1000;
     {
       algo_base *G__Lpbase=(algo_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_trig_decoder),G__get_linked_tagnum(&G__AlgorithmCintLN_algo_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       decoder_base *G__Lpbase=(decoder_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_trig_decoder),G__get_linked_tagnum(&G__AlgorithmCintLN_decoder_base),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_fem_decoder_base))) {
     algo_fem_decoder_base *G__Lderived;
     G__Lderived=(algo_fem_decoder_base*)0x1000;
     {
       algo_base *G__Lpbase=(algo_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_fem_decoder_base),G__get_linked_tagnum(&G__AlgorithmCintLN_algo_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       decoder_base *G__Lpbase=(decoder_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_fem_decoder_base),G__get_linked_tagnum(&G__AlgorithmCintLN_decoder_base),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_pmt_xmit))) {
     algo_pmt_xmit *G__Lderived;
     G__Lderived=(algo_pmt_xmit*)0x1000;
     {
       algo_fem_decoder_base *G__Lpbase=(algo_fem_decoder_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_pmt_xmit),G__get_linked_tagnum(&G__AlgorithmCintLN_algo_fem_decoder_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       algo_base *G__Lpbase=(algo_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_pmt_xmit),G__get_linked_tagnum(&G__AlgorithmCintLN_algo_base),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       decoder_base *G__Lpbase=(decoder_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_pmt_xmit),G__get_linked_tagnum(&G__AlgorithmCintLN_decoder_base),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_xmit))) {
     algo_tpc_xmit *G__Lderived;
     G__Lderived=(algo_tpc_xmit*)0x1000;
     {
       algo_fem_decoder_base *G__Lpbase=(algo_fem_decoder_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_xmit),G__get_linked_tagnum(&G__AlgorithmCintLN_algo_fem_decoder_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       algo_base *G__Lpbase=(algo_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_xmit),G__get_linked_tagnum(&G__AlgorithmCintLN_algo_base),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       decoder_base *G__Lpbase=(decoder_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_xmit),G__get_linked_tagnum(&G__AlgorithmCintLN_decoder_base),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_huffman))) {
     algo_tpc_huffman *G__Lderived;
     G__Lderived=(algo_tpc_huffman*)0x1000;
     {
       algo_tpc_xmit *G__Lpbase=(algo_tpc_xmit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_huffman),G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_xmit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       algo_fem_decoder_base *G__Lpbase=(algo_fem_decoder_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_huffman),G__get_linked_tagnum(&G__AlgorithmCintLN_algo_fem_decoder_base),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       algo_base *G__Lpbase=(algo_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_huffman),G__get_linked_tagnum(&G__AlgorithmCintLN_algo_base),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       decoder_base *G__Lpbase=(decoder_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_huffman),G__get_linked_tagnum(&G__AlgorithmCintLN_decoder_base),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableAlgorithmCint() {

   /* Setting up typedef entry */
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pulse_info>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,double>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,double>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,int>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,int>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::string>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::string>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string,less<string> >",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,bool>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool,less<string> >",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<double> >",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::vector<double> >",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<double,allocator<double> >,less<string> >",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<int> >",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::vector<int> >",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<int,allocator<int> >,less<string> >",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<std::string> >",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::vector<string> >",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<string,allocator<string> > >",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<string,allocator<string> >,less<string> >",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<bool> >",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::vector<bool> >",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<bool,allocator<bool> > >",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<bool,allocator<bool> >,less<string> >",117,G__get_linked_tagnum(&G__AlgorithmCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<user_info>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<PMT::ch_adc_t>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pmt_waveform>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<tpc_waveform>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("deque<PMT::word_t>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_dequelEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("deque<unsigned int>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_dequelEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UShort_t>",117,G__get_linked_tagnum(&G__AlgorithmCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* algo_base */
static void G__setup_memvaralgo_base(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_base));
   { algo_base *p; p=(algo_base*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_debug_mode=",0,"/< Debug mode boolean holder");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_bt_mode=",0,"/< Back-trace mode boolean holder");
   G__memvar_setup((void*)G__PVOID,107,0,1,-1,G__defined_typename("size_t"),-2,2,"BEAM_REF_CHANNEL=39ULL",0,"/< Defines a reference channel for beamgate.");
   G__memvar_setup((void*)G__PVOID,107,0,1,-1,G__defined_typename("size_t"),-2,2,"BEAM_NWORDS=21ULL",0,"/< Defines # of minimum words to identify beamgate event.");
   G__memvar_setup((void*)G__PVOID,107,0,1,-1,G__defined_typename("size_t"),-2,2,"FRAME_WIDTH=8192ULL",0,"/< Defines # of ADC samples per readout frame.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlgorithmCintLN_storage_manager),-1,-1,2,"_storage=",0,"/< Data storage pointer to be provided by a parent process.");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,2,"_checksum=",0,"/< data checksum");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,2,"_nwords=",0,"/< number of data word counts processed");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlgorithmCintLN_dequelEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("deque<PMT::word_t>"),-1,2,"_bt_words=",0,"/< processed words to be stored event-wise for back-trace purpose  ");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"_bt_nwords=",0,"/< user defined # of words to be temporarily stored in the buffer");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_bt_nwords_filled=",0,"/< run utility boolean to keep a recored of filled buffer");
   }
   G__tag_memvar_reset();
}


   /* algo_slow_readout_decoder */
static void G__setup_memvaralgo_slow_readout_decoder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_slow_readout_decoder));
   { algo_slow_readout_decoder *p; p=(algo_slow_readout_decoder*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__AlgorithmCintLN_algo_slow_readout_decodercLcLPROCESS_FLAG),-1,-2,1,G__FastAllocString(2048).Format("READ_HEADER=%lldLL",(long long)algo_slow_readout_decoder::READ_HEADER).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__AlgorithmCintLN_algo_slow_readout_decodercLcLPROCESS_FLAG),-1,-2,1,G__FastAllocString(2048).Format("READ_CHANNEL=%lldLL",(long long)algo_slow_readout_decoder::READ_CHANNEL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,107,0,1,-1,G__defined_typename("size_t"),-2,2,"FEM_HEADER_COUNT=6ULL",0,"/< Number of event header words");
   G__memvar_setup((void*)G__PVOID,107,0,1,-1,G__defined_typename("size_t"),-2,2,"CHANNEL_HEADER_COUNT=2ULL",0,"/< Number of channel header words");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,2,"_event_header_words[6]=",0,"/< Event header word holder");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlgorithmCintLN_pmt_waveform),-1,-1,2,"_ch_data=",0,"/< Channel data holder.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlgorithmCintLN_pmt_wf_collection),-1,-1,2,"_event_data=",0,"/< Event waveform");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__AlgorithmCintLN_PMTcLcLDISCRIMINATOR),-1,-1,2,"_last_disc_id=",0,"/< Holder of last channel data's disc. id");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("ch_number_t"),-1,2,"_last_channel_number=",0,"/< Holder of last channel data's channel number");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__AlgorithmCintLN_algo_slow_readout_decodercLcLPROCESS_FLAG),-1,-1,2,"_process=",0,"/< Process status flag holder");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_continue_to_next_event=",0,"/< Boolean to let a user continue to next event for any issue.");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_print_adcval=",0,"/< Boolean to print out adc values");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_beam_event=",0,"/< Boolean for beam event");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,2,"_beam_ref_nwords=",0,"/< Number of ADC samples in beam ref channel");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,2,"_beam_ref_sample=",0,"/< Sample number in beam ref channel");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,2,"_beam_ref_frame=",0,"/< Frame ID from beam ref channel ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,2,"_last_word=",0,"/< Last word processed");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"_channel_header_count=",0,"/< A counter for channel header words");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"_event_header_count=",0,"/< A counter for event header words");
   }
   G__tag_memvar_reset();
}


   /* algo_xmit_decoder */
static void G__setup_memvaralgo_xmit_decoder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_xmit_decoder));
   { algo_xmit_decoder *p; p=(algo_xmit_decoder*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* algo_trig_decoder */
static void G__setup_memvaralgo_trig_decoder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_trig_decoder));
   { algo_trig_decoder *p; p=(algo_trig_decoder*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,107,0,1,-1,G__defined_typename("size_t"),-2,2,"TRIGGER_WORD_COUNT=3ULL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlgorithmCintLN_trig_info),-1,-1,2,"_data=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"_nevents=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"_trigger_word_count=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,2,"_trigger_words[3]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* algo_fem_decoder_base */
static void G__setup_memvaralgo_fem_decoder_base(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_fem_decoder_base));
   { algo_fem_decoder_base *p; p=(algo_fem_decoder_base*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,107,0,1,-1,G__defined_typename("size_t"),-2,2,"FEM_HEADER_COUNT=6ULL",0,"/< Number of event header words");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,2,"_event_header_words[6]=",0,"/< Event header word holder");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("word_t"),-1,2,"_last_word=",0,"/< Last word processed");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"_event_header_count=",0,"/< A counter for event header words");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_search_for_next_event=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlgorithmCintLN_algo_fem_decoder_basecLcLInfoFEM_t),-1,-1,2,"_header_info=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* algo_pmt_xmit */
static void G__setup_memvaralgo_pmt_xmit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_pmt_xmit));
   { algo_pmt_xmit *p; p=(algo_pmt_xmit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlgorithmCintLN_pmt_waveform),-1,-1,2,"_ch_data=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlgorithmCintLN_pmt_wf_collection),-1,-1,2,"_event_data=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,107,0,1,-1,G__defined_typename("size_t"),-2,2,"CHANNEL_HEADER_COUNT=3ULL",0,"/< Number of channel header words");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__AlgorithmCintLN_PMTcLcLDISCRIMINATOR),-1,-1,2,"_last_disc_id=",0,"/< Holder of last channel data's disc. id");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("ch_number_t"),-1,2,"_last_channel_number=",0,"/< Holder of last channel data's channel number");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"_channel_header_count=",0,"/< A counter for channel header words");
   }
   G__tag_memvar_reset();
}


   /* algo_tpc_xmit */
static void G__setup_memvaralgo_tpc_xmit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_xmit));
   { algo_tpc_xmit *p; p=(algo_tpc_xmit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlgorithmCintLN_tpc_waveform),-1,-1,2,"_ch_data=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlgorithmCintLN_tpc_wf_collection),-1,-1,2,"_event_data=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* algo_tpc_huffman */
static void G__setup_memvaralgo_tpc_huffman(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_huffman));
   { algo_tpc_huffman *p; p=(algo_tpc_huffman*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_search_header=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarAlgorithmCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncalgo_base(void) {
   /* algo_base */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_base));
   G__memfunc_setup("process_word",1306,G__AlgorithmCint_703_0_2, 103, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 10 - word", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("finalize",850,G__AlgorithmCint_703_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("get_word_class",1488,G__AlgorithmCint_703_0_4, 105, G__get_linked_tagnum(&G__AlgorithmCintLN_PMTcLcLPMT_WORD), -1, 0, 1, 1, 1, 8, "h - 'PMT::word_t' 10 - word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("set_debug_mode",1462,G__AlgorithmCint_703_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - doit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_storage_ptr",1621,G__AlgorithmCint_703_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'storage_manager' - 0 - storage", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_backtrace_mode",1871,G__AlgorithmCint_703_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 '0' nwords", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("backtrace_mode",1444,G__AlgorithmCint_703_0_8, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("check_event_quality",2023,G__AlgorithmCint_703_0_9, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reset",547,G__AlgorithmCint_703_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("backtrace",928,G__AlgorithmCint_703_0_11, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("is_event_empty",1515,G__AlgorithmCint_703_0_12, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("init_checker_info",1779,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   // automatic destructor
   G__memfunc_setup("~algo_base", 1051, G__AlgorithmCint_703_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AlgorithmCint_703_0_15, (int) ('u'), G__get_linked_tagnum(&G__AlgorithmCintLN_algo_base), -1, 1, 1, 1, 1, 0, "u 'algo_base' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncalgo_slow_readout_decoder(void) {
   /* algo_slow_readout_decoder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_slow_readout_decoder));
   G__memfunc_setup("algo_slow_readout_decoder",2639,G__AlgorithmCint_707_0_1, 105, G__get_linked_tagnum(&G__AlgorithmCintLN_algo_slow_readout_decoder), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print_adcval",1271,G__AlgorithmCint_707_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' doit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("process_word",1306,(G__InterfaceMethod) NULL,103, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 10 - word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("get_word_class",1488,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__AlgorithmCintLN_PMTcLcLPMT_WORD), -1, 0, 1, 1, 1, 8, "h - 'PMT::word_t' 10 - word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("round_diff",1056,G__AlgorithmCint_707_0_5, 104, -1, G__defined_typename("PMT::word_t"), 0, 3, 1, 1, 8, 
"h - 'PMT::word_t' 0 - ref_id h - 'PMT::word_t' 0 - subject_id "
"h - 'PMT::word_t' 0 - diff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("check_event_quality",2023,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("get_current_ch_data",1989,G__AlgorithmCint_707_0_7, 85, G__get_linked_tagnum(&G__AlgorithmCintLN_pmt_waveform), -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("is_event_empty",1515,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init_ch_info",1257,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init_event_info",1600,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("process_header",1479,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 1, 1, 2, 0, "h - 'PMT::word_t' 10 - word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("decode_event_header",1965,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 1, 1, 2, 0, "H - 'PMT::word_t' 10 - event_header", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("process_ch_word",1604,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("decode_ch_word",1449,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word i 'PMT::PMT_WORD' - 10 - last_word_class", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print_adc_values",1699,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("store_ch_data",1360,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("apply_beamgate_correction",2642,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("algo_slow_readout_decoder", 2639, G__AlgorithmCint_707_0_19, (int) ('i'), 
G__get_linked_tagnum(&G__AlgorithmCintLN_algo_slow_readout_decoder), -1, 0, 1, 1, 1, 0, "u 'algo_slow_readout_decoder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~algo_slow_readout_decoder", 2765, G__AlgorithmCint_707_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AlgorithmCint_707_0_21, (int) ('u'), G__get_linked_tagnum(&G__AlgorithmCintLN_algo_slow_readout_decoder), -1, 1, 1, 1, 1, 0, "u 'algo_slow_readout_decoder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncalgo_xmit_decoder(void) {
   /* algo_xmit_decoder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_xmit_decoder));
   G__memfunc_setup("algo_xmit_decoder",1785,G__AlgorithmCint_709_0_1, 105, G__get_linked_tagnum(&G__AlgorithmCintLN_algo_xmit_decoder), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("process_header",1479,(G__InterfaceMethod) NULL,103, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 10 - word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("get_word_class",1488,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__AlgorithmCintLN_PMTcLcLPMT_WORD), -1, 0, 1, 1, 1, 8, "h - 'PMT::word_t' 10 - word", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("algo_xmit_decoder", 1785, G__AlgorithmCint_709_0_4, (int) ('i'), G__get_linked_tagnum(&G__AlgorithmCintLN_algo_xmit_decoder), -1, 0, 1, 1, 1, 0, "u 'algo_xmit_decoder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~algo_xmit_decoder", 1911, G__AlgorithmCint_709_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AlgorithmCint_709_0_6, (int) ('u'), G__get_linked_tagnum(&G__AlgorithmCintLN_algo_xmit_decoder), -1, 1, 1, 1, 1, 0, "u 'algo_xmit_decoder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncalgo_trig_decoder(void) {
   /* algo_trig_decoder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_trig_decoder));
   G__memfunc_setup("algo_trig_decoder",1773,G__AlgorithmCint_710_0_1, 105, G__get_linked_tagnum(&G__AlgorithmCintLN_algo_trig_decoder), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("process_word",1306,(G__InterfaceMethod) NULL,103, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 10 - word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("check_event_quality",2023,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear_event_info",1683,G__AlgorithmCint_710_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("is_event_empty",1515,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("decode_trigger_words",2117,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 1, 1, 2, 0, "H - 'PMT::word_t' 0 - trigger_words", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("algo_trig_decoder", 1773, G__AlgorithmCint_710_0_8, (int) ('i'), G__get_linked_tagnum(&G__AlgorithmCintLN_algo_trig_decoder), -1, 0, 1, 1, 1, 0, "u 'algo_trig_decoder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~algo_trig_decoder", 1899, G__AlgorithmCint_710_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AlgorithmCint_710_0_10, (int) ('u'), G__get_linked_tagnum(&G__AlgorithmCintLN_algo_trig_decoder), -1, 1, 1, 1, 1, 0, "u 'algo_trig_decoder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncalgo_fem_decoder_base(void) {
   /* algo_fem_decoder_base */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_fem_decoder_base));
   G__memfunc_setup("process_word",1306,(G__InterfaceMethod) NULL,103, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 10 - word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("get_word_class",1488,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__AlgorithmCintLN_PMTcLcLPMT_WORD), -1, 0, 1, 1, 1, 8, "h - 'PMT::word_t' 10 - word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("check_event_quality",2023,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reset",547,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("round_diff",1056,G__AlgorithmCint_711_0_6, 104, -1, G__defined_typename("PMT::word_t"), 0, 3, 1, 1, 8, 
"h - 'PMT::word_t' 0 - ref_id h - 'PMT::word_t' 0 - subject_id "
"h - 'PMT::word_t' 0 - diff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("is_event_empty",1515,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("store_event",1198,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("clear_event",1160,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("process_fem_header",1886,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("decode_fem_header",1731,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 1, 1, 2, 0, "H - 'PMT::word_t' 10 - event_header", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("process_event_header",2120,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("process_ch_word",1604,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("process_fem_last_word",2244,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("process_event_last_word",2478,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("add_huffman_adc",1524,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"u 'vector<unsigned short,allocator<unsigned short> >' 'vector<UShort_t>' 1 - wf k - 'size_t' 0 - zero_count", (char*)NULL, (void*) NULL, 1);
   // automatic destructor
   G__memfunc_setup("~algo_fem_decoder_base", 2279, G__AlgorithmCint_711_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AlgorithmCint_711_0_18, (int) ('u'), G__get_linked_tagnum(&G__AlgorithmCintLN_algo_fem_decoder_base), -1, 1, 1, 1, 1, 0, "u 'algo_fem_decoder_base' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncalgo_pmt_xmit(void) {
   /* algo_pmt_xmit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_pmt_xmit));
   G__memfunc_setup("algo_pmt_xmit",1396,G__AlgorithmCint_713_0_1, 105, G__get_linked_tagnum(&G__AlgorithmCintLN_algo_pmt_xmit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_word_class",1488,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__AlgorithmCintLN_PMTcLcLPMT_WORD), -1, 0, 1, 1, 1, 8, "h - 'PMT::word_t' 10 - word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("check_event_quality",2023,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear_event",1160,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("store_ch_data",1360,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("store_event",1198,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("decode_ch_word",1449,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("is_compressed",1392,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 1, 1, 2, 0, "h - 'PMT::word_t' 10 - word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("process_event_header",2120,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("process_ch_word",1604,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("process_fem_last_word",2244,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("process_event_last_word",2478,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("algo_pmt_xmit", 1396, G__AlgorithmCint_713_0_14, (int) ('i'), G__get_linked_tagnum(&G__AlgorithmCintLN_algo_pmt_xmit), -1, 0, 1, 1, 1, 0, "u 'algo_pmt_xmit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~algo_pmt_xmit", 1522, G__AlgorithmCint_713_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AlgorithmCint_713_0_16, (int) ('u'), G__get_linked_tagnum(&G__AlgorithmCintLN_algo_pmt_xmit), -1, 1, 1, 1, 1, 0, "u 'algo_pmt_xmit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncalgo_tpc_xmit(void) {
   /* algo_tpc_xmit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_xmit));
   G__memfunc_setup("algo_tpc_xmit",1386,G__AlgorithmCint_714_0_1, 105, G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_xmit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_word_class",1488,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__AlgorithmCintLN_PMTcLcLPMT_WORD), -1, 0, 1, 1, 1, 8, "h - 'PMT::word_t' 10 - word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("check_event_quality",2023,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear_event",1160,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("store_event",1198,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("decode_ch_word",1449,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("is_compressed",1392,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 1, 1, 2, 0, "h - 'PMT::word_t' 10 - word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("process_event_header",2120,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("process_ch_word",1604,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("process_fem_last_word",2244,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("process_event_last_word",2478,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("algo_tpc_xmit", 1386, G__AlgorithmCint_714_0_13, (int) ('i'), G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_xmit), -1, 0, 1, 1, 1, 0, "u 'algo_tpc_xmit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~algo_tpc_xmit", 1512, G__AlgorithmCint_714_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AlgorithmCint_714_0_15, (int) ('u'), G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_xmit), -1, 1, 1, 1, 1, 0, "u 'algo_tpc_xmit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncalgo_tpc_huffman(void) {
   /* algo_tpc_huffman */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_huffman));
   G__memfunc_setup("algo_tpc_huffman",1677,G__AlgorithmCint_715_0_1, 105, G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_huffman), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_word_class",1488,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__AlgorithmCintLN_PMTcLcLPMT_WORD), -1, 0, 1, 1, 1, 8, "h - 'PMT::word_t' 10 - word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("process_word",1306,(G__InterfaceMethod) NULL,103, -1, -1, 0, 1, 1, 1, 0, "h - 'PMT::word_t' 10 - word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reset",547,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear_event",1160,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("process_event_header",2120,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("process_fem_header",1886,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("process_ch_word",1604,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("process_fem_last_word",2244,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("process_event_last_word",2478,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"h - 'PMT::word_t' 10 - word h - 'PMT::word_t' 1 - last_word", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("algo_tpc_huffman", 1677, G__AlgorithmCint_715_0_11, (int) ('i'), G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_huffman), -1, 0, 1, 1, 1, 0, "u 'algo_tpc_huffman' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~algo_tpc_huffman", 1803, G__AlgorithmCint_715_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AlgorithmCint_715_0_13, (int) ('u'), G__get_linked_tagnum(&G__AlgorithmCintLN_algo_tpc_huffman), -1, 1, 1, 1, 1, 0, "u 'algo_tpc_huffman' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncAlgorithmCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalAlgorithmCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcAlgorithmCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__AlgorithmCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR = { "vector<unsigned short,allocator<unsigned short> >" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__AlgorithmCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR = { "map<string,int,less<string>,allocator<pair<const string,int> > >" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR = { "map<string,double,less<string>,allocator<pair<const string,double> > >" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_PMT = { "PMT" , 110 , -1 };
G__linked_taginfo G__AlgorithmCintLN_PMTcLcLDISCRIMINATOR = { "PMT::DISCRIMINATOR" , 101 , -1 };
G__linked_taginfo G__AlgorithmCintLN_PMTcLcLPMT_WORD = { "PMT::PMT_WORD" , 101 , -1 };
G__linked_taginfo G__AlgorithmCintLN_decoder_base = { "decoder_base" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_trig_info = { "trig_info" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR = { "vector<pulse_info,allocator<pulse_info> >" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_reverse_iteratorlEvectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pulse_info,allocator<pulse_info> >::iterator>" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR = { "map<string,string,less<string>,allocator<pair<const string,string> > >" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR = { "map<string,bool,less<string>,allocator<pair<const string,bool> > >" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR = { "map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR = { "map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR = { "map<string,vector<string,allocator<string> >,less<string>,allocator<pair<const string,vector<string,allocator<string> > > > >" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR = { "map<string,vector<bool,allocator<bool> >,less<string>,allocator<pair<const string,vector<bool,allocator<bool> > > > >" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR = { "vector<user_info,allocator<user_info> >" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_reverse_iteratorlEvectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiteratorgR = { "reverse_iterator<vector<user_info,allocator<user_info> >::iterator>" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_pmt_waveform = { "pmt_waveform" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_pmt_wf_collection = { "pmt_wf_collection" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR = { "vector<pmt_waveform,allocator<pmt_waveform> >" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_reverse_iteratorlEvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pmt_waveform,allocator<pmt_waveform> >::iterator>" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_tpc_waveform = { "tpc_waveform" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_tpc_wf_collection = { "tpc_wf_collection" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR = { "vector<tpc_waveform,allocator<tpc_waveform> >" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_reverse_iteratorlEvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<tpc_waveform,allocator<tpc_waveform> >::iterator>" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_storage_manager = { "storage_manager" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_algo_base = { "algo_base" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_dequelEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "deque<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_algo_slow_readout_decoder = { "algo_slow_readout_decoder" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_algo_slow_readout_decodercLcLPROCESS_FLAG = { "algo_slow_readout_decoder::PROCESS_FLAG" , 101 , -1 };
G__linked_taginfo G__AlgorithmCintLN_algo_xmit_decoder = { "algo_xmit_decoder" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_algo_trig_decoder = { "algo_trig_decoder" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_algo_fem_decoder_base = { "algo_fem_decoder_base" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_algo_fem_decoder_basecLcLInfoFEM_t = { "algo_fem_decoder_base::InfoFEM_t" , 115 , -1 };
G__linked_taginfo G__AlgorithmCintLN_algo_pmt_xmit = { "algo_pmt_xmit" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_algo_tpc_xmit = { "algo_tpc_xmit" , 99 , -1 };
G__linked_taginfo G__AlgorithmCintLN_algo_tpc_huffman = { "algo_tpc_huffman" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableAlgorithmCint() {
  G__AlgorithmCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR.tagnum = -1 ;
  G__AlgorithmCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__AlgorithmCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__AlgorithmCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__AlgorithmCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__AlgorithmCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__AlgorithmCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR.tagnum = -1 ;
  G__AlgorithmCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__AlgorithmCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__AlgorithmCintLN_PMT.tagnum = -1 ;
  G__AlgorithmCintLN_PMTcLcLDISCRIMINATOR.tagnum = -1 ;
  G__AlgorithmCintLN_PMTcLcLPMT_WORD.tagnum = -1 ;
  G__AlgorithmCintLN_decoder_base.tagnum = -1 ;
  G__AlgorithmCintLN_trig_info.tagnum = -1 ;
  G__AlgorithmCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR.tagnum = -1 ;
  G__AlgorithmCintLN_reverse_iteratorlEvectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__AlgorithmCintLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__AlgorithmCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__AlgorithmCintLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__AlgorithmCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__AlgorithmCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR.tagnum = -1 ;
  G__AlgorithmCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR.tagnum = -1 ;
  G__AlgorithmCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__AlgorithmCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__AlgorithmCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__AlgorithmCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__AlgorithmCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR.tagnum = -1 ;
  G__AlgorithmCintLN_reverse_iteratorlEvectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__AlgorithmCintLN_pmt_waveform.tagnum = -1 ;
  G__AlgorithmCintLN_pmt_wf_collection.tagnum = -1 ;
  G__AlgorithmCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR.tagnum = -1 ;
  G__AlgorithmCintLN_reverse_iteratorlEvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__AlgorithmCintLN_tpc_waveform.tagnum = -1 ;
  G__AlgorithmCintLN_tpc_wf_collection.tagnum = -1 ;
  G__AlgorithmCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR.tagnum = -1 ;
  G__AlgorithmCintLN_reverse_iteratorlEvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__AlgorithmCintLN_storage_manager.tagnum = -1 ;
  G__AlgorithmCintLN_algo_base.tagnum = -1 ;
  G__AlgorithmCintLN_dequelEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__AlgorithmCintLN_algo_slow_readout_decoder.tagnum = -1 ;
  G__AlgorithmCintLN_algo_slow_readout_decodercLcLPROCESS_FLAG.tagnum = -1 ;
  G__AlgorithmCintLN_algo_xmit_decoder.tagnum = -1 ;
  G__AlgorithmCintLN_algo_trig_decoder.tagnum = -1 ;
  G__AlgorithmCintLN_algo_fem_decoder_base.tagnum = -1 ;
  G__AlgorithmCintLN_algo_fem_decoder_basecLcLInfoFEM_t.tagnum = -1 ;
  G__AlgorithmCintLN_algo_pmt_xmit.tagnum = -1 ;
  G__AlgorithmCintLN_algo_tpc_xmit.tagnum = -1 ;
  G__AlgorithmCintLN_algo_tpc_huffman.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableAlgorithmCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_PMT);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_PMTcLcLDISCRIMINATOR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_PMTcLcLPMT_WORD);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_decoder_base);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_trig_info);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_pmt_waveform);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_pmt_wf_collection);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_tpc_waveform);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_tpc_wf_collection);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_vectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_reverse_iteratorlEvectorlEtpc_waveformcOallocatorlEtpc_waveformgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_storage_manager);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_algo_base),sizeof(algo_base),-1,263426,(char*)NULL,G__setup_memvaralgo_base,G__setup_memfuncalgo_base);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_dequelEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_algo_slow_readout_decoder),sizeof(algo_slow_readout_decoder),-1,263424,(char*)NULL,G__setup_memvaralgo_slow_readout_decoder,G__setup_memfuncalgo_slow_readout_decoder);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_algo_slow_readout_decodercLcLPROCESS_FLAG);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_algo_xmit_decoder),sizeof(algo_xmit_decoder),-1,263424,(char*)NULL,G__setup_memvaralgo_xmit_decoder,G__setup_memfuncalgo_xmit_decoder);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_algo_trig_decoder),sizeof(algo_trig_decoder),-1,263424,(char*)NULL,G__setup_memvaralgo_trig_decoder,G__setup_memfuncalgo_trig_decoder);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_algo_fem_decoder_base),sizeof(algo_fem_decoder_base),-1,263429,(char*)NULL,G__setup_memvaralgo_fem_decoder_base,G__setup_memfuncalgo_fem_decoder_base);
   G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_algo_fem_decoder_basecLcLInfoFEM_t);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_algo_pmt_xmit),sizeof(algo_pmt_xmit),-1,263424,(char*)NULL,G__setup_memvaralgo_pmt_xmit,G__setup_memfuncalgo_pmt_xmit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_algo_tpc_xmit),sizeof(algo_tpc_xmit),-1,263424,(char*)NULL,G__setup_memvaralgo_tpc_xmit,G__setup_memfuncalgo_tpc_xmit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlgorithmCintLN_algo_tpc_huffman),sizeof(algo_tpc_huffman),-1,263424,(char*)NULL,G__setup_memvaralgo_tpc_huffman,G__setup_memfuncalgo_tpc_huffman);
}
extern "C" void G__cpp_setupAlgorithmCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupAlgorithmCint()");
  G__set_cpp_environmentAlgorithmCint();
  G__cpp_setup_tagtableAlgorithmCint();

  G__cpp_setup_inheritanceAlgorithmCint();

  G__cpp_setup_typetableAlgorithmCint();

  G__cpp_setup_memvarAlgorithmCint();

  G__cpp_setup_memfuncAlgorithmCint();
  G__cpp_setup_globalAlgorithmCint();
  G__cpp_setup_funcAlgorithmCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncAlgorithmCint();
  return;
}
class G__cpp_setup_initAlgorithmCint {
  public:
    G__cpp_setup_initAlgorithmCint() { G__add_setup_func("AlgorithmCint",(G__incsetup)(&G__cpp_setupAlgorithmCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initAlgorithmCint() { G__remove_setup_func("AlgorithmCint"); }
};
G__cpp_setup_initAlgorithmCint G__cpp_setup_initializerAlgorithmCint;

