//
// File generated by rootcint at Thu Sep 12 10:35:58 2013

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME PulseRecoCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "PulseRecoCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::pulse_param pulse_param;
      #else
      class pulse_param  {
         public:
         //friend XX;
         double peak; //
         double area; //
         double t_start; //
         double t_max; //
         double t_end; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::preco_algo_base preco_algo_base;
      #else
      class preco_algo_base  :  public ::decoder_base {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~preco_algo_base() throw() {};
         vector< ::pulse_param > _pulse_v; //
         ::pulse_param _pulse; //
         double _ped_mean; //
         double _ped_rms; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::algo_fixed_window algo_fixed_window;
      #else
      class algo_fixed_window  :  public ::preco_algo_base {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~algo_fixed_window() throw() {};
         unsigned long _index_start; //
         unsigned long _index_end; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::algo_threshold algo_threshold;
      #else
      class algo_threshold  :  public ::preco_algo_base {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~algo_threshold() throw() {};
         double _adc_thres; //
         double _nsigma; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ped_estimator ped_estimator;
      #else
      class ped_estimator  :  public ::decoder_base {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ped_estimator() throw() {};
         unsigned long _nsample_head; //
         unsigned long _nsample_tail; //
         double _mean_head; //
         double _rms_head; //
         double _mean_tail; //
         double _rms_tail; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::pulse_reco pulse_reco;
      #else
      class pulse_reco  :  public ::ana_base {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::pulse_reco::PED_METHOD PED_METHOD;
         #else
         enum PED_METHOD  {
         };
         #endif

         // To force the creation of a virtual table, throw just in case.
         virtual ~pulse_reco() throw() {};
         ::preco_algo_base* _reco_algo; //
         ::ped_estimator _ped_algo; //
         PED_METHOD _ped_method; //
         map< PMT::ch_number_t, double > _channel_Q_m; //
         map< PMT::ch_number_t, double > _channel_A_m; //
         ::TH2D* _ped_Mean; //
         ::TH2D* _ped_RMS; //
         ::TH2D* _channel_Q; //
         ::TH2D* _channel_A; //
         ::TH1D* _event_Q; //
         ::TH1D* _event_A; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void pulse_param_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void pulse_param_Dictionary();
   static void *new_pulse_param(void *p = 0);
   static void *newArray_pulse_param(Long_t size, void *p);
   static void delete_pulse_param(void *p);
   static void deleteArray_pulse_param(void *p);
   static void destruct_pulse_param(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::pulse_param*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::pulse_param) == sizeof(::ROOT::Shadow::pulse_param));
      ::pulse_param *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::pulse_param),0);
      static ::ROOT::TGenericClassInfo 
         instance("pulse_param", "./preco_algo_base.hh", 10,
                  typeid(::pulse_param), DefineBehavior(ptr, ptr),
                  &pulse_param_ShowMembers, &pulse_param_Dictionary, isa_proxy, 4,
                  sizeof(::pulse_param) );
      instance.SetNew(&new_pulse_param);
      instance.SetNewArray(&newArray_pulse_param);
      instance.SetDelete(&delete_pulse_param);
      instance.SetDeleteArray(&deleteArray_pulse_param);
      instance.SetDestructor(&destruct_pulse_param);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::pulse_param*)
   {
      return GenerateInitInstanceLocal((::pulse_param*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::pulse_param*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void pulse_param_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::pulse_param*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void preco_algo_base_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void preco_algo_base_Dictionary();
   static void delete_preco_algo_base(void *p);
   static void deleteArray_preco_algo_base(void *p);
   static void destruct_preco_algo_base(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::preco_algo_base*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::preco_algo_base) == sizeof(::ROOT::Shadow::preco_algo_base));
      ::preco_algo_base *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::preco_algo_base),0);
      static ::ROOT::TGenericClassInfo 
         instance("preco_algo_base", "./preco_algo_base.hh", 27,
                  typeid(::preco_algo_base), DefineBehavior(ptr, ptr),
                  &preco_algo_base_ShowMembers, &preco_algo_base_Dictionary, isa_proxy, 4,
                  sizeof(::preco_algo_base) );
      instance.SetDelete(&delete_preco_algo_base);
      instance.SetDeleteArray(&deleteArray_preco_algo_base);
      instance.SetDestructor(&destruct_preco_algo_base);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::preco_algo_base*)
   {
      return GenerateInitInstanceLocal((::preco_algo_base*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::preco_algo_base*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void preco_algo_base_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::preco_algo_base*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void algo_fixed_window_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void algo_fixed_window_Dictionary();
   static void *new_algo_fixed_window(void *p = 0);
   static void *newArray_algo_fixed_window(Long_t size, void *p);
   static void delete_algo_fixed_window(void *p);
   static void deleteArray_algo_fixed_window(void *p);
   static void destruct_algo_fixed_window(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::algo_fixed_window*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::algo_fixed_window) == sizeof(::ROOT::Shadow::algo_fixed_window));
      ::algo_fixed_window *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::algo_fixed_window),0);
      static ::ROOT::TGenericClassInfo 
         instance("algo_fixed_window", "./algo_fixed_window.hh", 6,
                  typeid(::algo_fixed_window), DefineBehavior(ptr, ptr),
                  &algo_fixed_window_ShowMembers, &algo_fixed_window_Dictionary, isa_proxy, 4,
                  sizeof(::algo_fixed_window) );
      instance.SetNew(&new_algo_fixed_window);
      instance.SetNewArray(&newArray_algo_fixed_window);
      instance.SetDelete(&delete_algo_fixed_window);
      instance.SetDeleteArray(&deleteArray_algo_fixed_window);
      instance.SetDestructor(&destruct_algo_fixed_window);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::algo_fixed_window*)
   {
      return GenerateInitInstanceLocal((::algo_fixed_window*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::algo_fixed_window*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void algo_fixed_window_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::algo_fixed_window*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void algo_threshold_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void algo_threshold_Dictionary();
   static void *new_algo_threshold(void *p = 0);
   static void *newArray_algo_threshold(Long_t size, void *p);
   static void delete_algo_threshold(void *p);
   static void deleteArray_algo_threshold(void *p);
   static void destruct_algo_threshold(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::algo_threshold*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::algo_threshold) == sizeof(::ROOT::Shadow::algo_threshold));
      ::algo_threshold *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::algo_threshold),0);
      static ::ROOT::TGenericClassInfo 
         instance("algo_threshold", "./algo_threshold.hh", 6,
                  typeid(::algo_threshold), DefineBehavior(ptr, ptr),
                  &algo_threshold_ShowMembers, &algo_threshold_Dictionary, isa_proxy, 4,
                  sizeof(::algo_threshold) );
      instance.SetNew(&new_algo_threshold);
      instance.SetNewArray(&newArray_algo_threshold);
      instance.SetDelete(&delete_algo_threshold);
      instance.SetDeleteArray(&deleteArray_algo_threshold);
      instance.SetDestructor(&destruct_algo_threshold);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::algo_threshold*)
   {
      return GenerateInitInstanceLocal((::algo_threshold*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::algo_threshold*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void algo_threshold_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::algo_threshold*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ped_estimator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ped_estimator_Dictionary();
   static void *new_ped_estimator(void *p = 0);
   static void *newArray_ped_estimator(Long_t size, void *p);
   static void delete_ped_estimator(void *p);
   static void deleteArray_ped_estimator(void *p);
   static void destruct_ped_estimator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ped_estimator*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ped_estimator) == sizeof(::ROOT::Shadow::ped_estimator));
      ::ped_estimator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ped_estimator),0);
      static ::ROOT::TGenericClassInfo 
         instance("ped_estimator", "./ped_estimator.hh", 8,
                  typeid(::ped_estimator), DefineBehavior(ptr, ptr),
                  &ped_estimator_ShowMembers, &ped_estimator_Dictionary, isa_proxy, 4,
                  sizeof(::ped_estimator) );
      instance.SetNew(&new_ped_estimator);
      instance.SetNewArray(&newArray_ped_estimator);
      instance.SetDelete(&delete_ped_estimator);
      instance.SetDeleteArray(&deleteArray_ped_estimator);
      instance.SetDestructor(&destruct_ped_estimator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ped_estimator*)
   {
      return GenerateInitInstanceLocal((::ped_estimator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ped_estimator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ped_estimator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ped_estimator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void pulse_reco_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void pulse_reco_Dictionary();
   static void *new_pulse_reco(void *p = 0);
   static void *newArray_pulse_reco(Long_t size, void *p);
   static void delete_pulse_reco(void *p);
   static void deleteArray_pulse_reco(void *p);
   static void destruct_pulse_reco(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::pulse_reco*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::pulse_reco) == sizeof(::ROOT::Shadow::pulse_reco));
      ::pulse_reco *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::pulse_reco),0);
      static ::ROOT::TGenericClassInfo 
         instance("pulse_reco", "./pulse_reco.hh", 11,
                  typeid(::pulse_reco), DefineBehavior(ptr, ptr),
                  &pulse_reco_ShowMembers, &pulse_reco_Dictionary, isa_proxy, 4,
                  sizeof(::pulse_reco) );
      instance.SetNew(&new_pulse_reco);
      instance.SetNewArray(&newArray_pulse_reco);
      instance.SetDelete(&delete_pulse_reco);
      instance.SetDeleteArray(&deleteArray_pulse_reco);
      instance.SetDestructor(&destruct_pulse_reco);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::pulse_reco*)
   {
      return GenerateInitInstanceLocal((::pulse_reco*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::pulse_reco*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void pulse_reco_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::pulse_reco*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void preco_algo_base_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class preco_algo_base.
      typedef ::ROOT::Shadow::preco_algo_base ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::preco_algo_base*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pulse_v", (void*)&sobj->_pulse_v);
      R__insp.InspectMember("vector<pulse_param>", (void*)&sobj->_pulse_v, "_pulse_v.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pulse", (void*)&sobj->_pulse);
      R__insp.InspectMember("pulse_param", (void*)&sobj->_pulse, "_pulse.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ped_mean", &sobj->_ped_mean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ped_rms", &sobj->_ped_rms);
      R__insp.GenericShowMembers("decoder_base", ( ::decoder_base * )( (::preco_algo_base*) obj ), false);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_preco_algo_base(void *p) {
      delete ((::preco_algo_base*)p);
   }
   static void deleteArray_preco_algo_base(void *p) {
      delete [] ((::preco_algo_base*)p);
   }
   static void destruct_preco_algo_base(void *p) {
      typedef ::preco_algo_base current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::preco_algo_base

//______________________________________________________________________________
namespace ROOT {
   void algo_fixed_window_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class algo_fixed_window.
      typedef ::ROOT::Shadow::algo_fixed_window ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::algo_fixed_window*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_index_start", &sobj->_index_start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_index_end", &sobj->_index_end);
      R__insp.GenericShowMembers("preco_algo_base", ( ::preco_algo_base * )( (::algo_fixed_window*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_algo_fixed_window(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::algo_fixed_window : new ::algo_fixed_window;
   }
   static void *newArray_algo_fixed_window(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::algo_fixed_window[nElements] : new ::algo_fixed_window[nElements];
   }
   // Wrapper around operator delete
   static void delete_algo_fixed_window(void *p) {
      delete ((::algo_fixed_window*)p);
   }
   static void deleteArray_algo_fixed_window(void *p) {
      delete [] ((::algo_fixed_window*)p);
   }
   static void destruct_algo_fixed_window(void *p) {
      typedef ::algo_fixed_window current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::algo_fixed_window

//______________________________________________________________________________
namespace ROOT {
   void algo_threshold_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class algo_threshold.
      typedef ::ROOT::Shadow::algo_threshold ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::algo_threshold*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_adc_thres", &sobj->_adc_thres);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nsigma", &sobj->_nsigma);
      R__insp.GenericShowMembers("preco_algo_base", ( ::preco_algo_base * )( (::algo_threshold*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_algo_threshold(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::algo_threshold : new ::algo_threshold;
   }
   static void *newArray_algo_threshold(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::algo_threshold[nElements] : new ::algo_threshold[nElements];
   }
   // Wrapper around operator delete
   static void delete_algo_threshold(void *p) {
      delete ((::algo_threshold*)p);
   }
   static void deleteArray_algo_threshold(void *p) {
      delete [] ((::algo_threshold*)p);
   }
   static void destruct_algo_threshold(void *p) {
      typedef ::algo_threshold current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::algo_threshold

//______________________________________________________________________________
namespace ROOT {
   void ped_estimator_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ped_estimator.
      typedef ::ROOT::Shadow::ped_estimator ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ped_estimator*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nsample_head", &sobj->_nsample_head);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nsample_tail", &sobj->_nsample_tail);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mean_head", &sobj->_mean_head);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_rms_head", &sobj->_rms_head);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mean_tail", &sobj->_mean_tail);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_rms_tail", &sobj->_rms_tail);
      R__insp.GenericShowMembers("decoder_base", ( ::decoder_base * )( (::ped_estimator*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ped_estimator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ped_estimator : new ::ped_estimator;
   }
   static void *newArray_ped_estimator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ped_estimator[nElements] : new ::ped_estimator[nElements];
   }
   // Wrapper around operator delete
   static void delete_ped_estimator(void *p) {
      delete ((::ped_estimator*)p);
   }
   static void deleteArray_ped_estimator(void *p) {
      delete [] ((::ped_estimator*)p);
   }
   static void destruct_ped_estimator(void *p) {
      typedef ::ped_estimator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ped_estimator

//______________________________________________________________________________
namespace ROOT {
   void pulse_reco_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class pulse_reco.
      typedef ::ROOT::Shadow::pulse_reco ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::pulse_reco*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_reco_algo", &sobj->_reco_algo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ped_algo", (void*)&sobj->_ped_algo);
      R__insp.InspectMember("ped_estimator", (void*)&sobj->_ped_algo, "_ped_algo.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ped_method", &sobj->_ped_method);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_channel_Q_m", (void*)&sobj->_channel_Q_m);
      R__insp.InspectMember("map<PMT::ch_number_t,double>", (void*)&sobj->_channel_Q_m, "_channel_Q_m.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_channel_A_m", (void*)&sobj->_channel_A_m);
      R__insp.InspectMember("map<PMT::ch_number_t,double>", (void*)&sobj->_channel_A_m, "_channel_A_m.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_ped_Mean", &sobj->_ped_Mean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_ped_RMS", &sobj->_ped_RMS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_channel_Q", &sobj->_channel_Q);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_channel_A", &sobj->_channel_A);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_event_Q", &sobj->_event_Q);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_event_A", &sobj->_event_A);
      R__insp.GenericShowMembers("ana_base", ( ::ana_base * )( (::pulse_reco*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_pulse_reco(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::pulse_reco : new ::pulse_reco;
   }
   static void *newArray_pulse_reco(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::pulse_reco[nElements] : new ::pulse_reco[nElements];
   }
   // Wrapper around operator delete
   static void delete_pulse_reco(void *p) {
      delete ((::pulse_reco*)p);
   }
   static void deleteArray_pulse_reco(void *p) {
      delete [] ((::pulse_reco*)p);
   }
   static void destruct_pulse_reco(void *p) {
      typedef ::pulse_reco current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::pulse_reco

//______________________________________________________________________________
namespace ROOT {
   void pulse_param_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class pulse_param.
      typedef ::ROOT::Shadow::pulse_param ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::pulse_param*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "peak", &sobj->peak);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "area", &sobj->area);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_start", &sobj->t_start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_max", &sobj->t_max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_end", &sobj->t_end);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_pulse_param(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::pulse_param : new ::pulse_param;
   }
   static void *newArray_pulse_param(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::pulse_param[nElements] : new ::pulse_param[nElements];
   }
   // Wrapper around operator delete
   static void delete_pulse_param(void *p) {
      delete ((::pulse_param*)p);
   }
   static void deleteArray_pulse_param(void *p) {
      delete [] ((::pulse_param*)p);
   }
   static void destruct_pulse_param(void *p) {
      typedef ::pulse_param current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::pulse_param

namespace ROOT {
   void maplEunsignedsPshortcOdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEunsignedsPshortcOdoublegR_Dictionary();
   static void *new_maplEunsignedsPshortcOdoublegR(void *p = 0);
   static void *newArray_maplEunsignedsPshortcOdoublegR(Long_t size, void *p);
   static void delete_maplEunsignedsPshortcOdoublegR(void *p);
   static void deleteArray_maplEunsignedsPshortcOdoublegR(void *p);
   static void destruct_maplEunsignedsPshortcOdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<unsigned short,double>*)
   {
      map<unsigned short,double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<unsigned short,double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<unsigned short,double>", -2, "prec_stl/map", 63,
                  typeid(map<unsigned short,double>), DefineBehavior(ptr, ptr),
                  0, &maplEunsignedsPshortcOdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(map<unsigned short,double>) );
      instance.SetNew(&new_maplEunsignedsPshortcOdoublegR);
      instance.SetNewArray(&newArray_maplEunsignedsPshortcOdoublegR);
      instance.SetDelete(&delete_maplEunsignedsPshortcOdoublegR);
      instance.SetDeleteArray(&deleteArray_maplEunsignedsPshortcOdoublegR);
      instance.SetDestructor(&destruct_maplEunsignedsPshortcOdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<unsigned short,double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<unsigned short,double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEunsignedsPshortcOdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<unsigned short,double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEunsignedsPshortcOdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<unsigned short,double> : new map<unsigned short,double>;
   }
   static void *newArray_maplEunsignedsPshortcOdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<unsigned short,double>[nElements] : new map<unsigned short,double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEunsignedsPshortcOdoublegR(void *p) {
      delete ((map<unsigned short,double>*)p);
   }
   static void deleteArray_maplEunsignedsPshortcOdoublegR(void *p) {
      delete [] ((map<unsigned short,double>*)p);
   }
   static void destruct_maplEunsignedsPshortcOdoublegR(void *p) {
      typedef map<unsigned short,double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<unsigned short,double>

namespace ROOT {
   void vectorlEpulse_paramgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEpulse_paramgR_Dictionary();
   static void *new_vectorlEpulse_paramgR(void *p = 0);
   static void *newArray_vectorlEpulse_paramgR(Long_t size, void *p);
   static void delete_vectorlEpulse_paramgR(void *p);
   static void deleteArray_vectorlEpulse_paramgR(void *p);
   static void destruct_vectorlEpulse_paramgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<pulse_param>*)
   {
      vector<pulse_param> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<pulse_param>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<pulse_param>", -2, "prec_stl/vector", 49,
                  typeid(vector<pulse_param>), DefineBehavior(ptr, ptr),
                  0, &vectorlEpulse_paramgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<pulse_param>) );
      instance.SetNew(&new_vectorlEpulse_paramgR);
      instance.SetNewArray(&newArray_vectorlEpulse_paramgR);
      instance.SetDelete(&delete_vectorlEpulse_paramgR);
      instance.SetDeleteArray(&deleteArray_vectorlEpulse_paramgR);
      instance.SetDestructor(&destruct_vectorlEpulse_paramgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<pulse_param> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<pulse_param>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEpulse_paramgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<pulse_param>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEpulse_paramgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pulse_param> : new vector<pulse_param>;
   }
   static void *newArray_vectorlEpulse_paramgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pulse_param>[nElements] : new vector<pulse_param>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEpulse_paramgR(void *p) {
      delete ((vector<pulse_param>*)p);
   }
   static void deleteArray_vectorlEpulse_paramgR(void *p) {
      delete [] ((vector<pulse_param>*)p);
   }
   static void destruct_vectorlEpulse_paramgR(void *p) {
      typedef vector<pulse_param> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<pulse_param>

/********************************************************
* PulseRecoCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablePulseRecoCint();

extern "C" void G__set_cpp_environmentPulseRecoCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("PulseReco-TypeDef.hh");
  G__add_compiledheader("algo_fixed_window.hh");
  G__add_compiledheader("algo_threshold.hh");
  G__add_compiledheader("ped_estimator.hh");
  G__add_compiledheader("preco_algo_base.hh");
  G__add_compiledheader("pulse_reco.hh");
  G__cpp_reset_tagtablePulseRecoCint();
}
#include <new>
extern "C" int G__cpp_dllrevPulseRecoCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* pulse_param */
static int G__PulseRecoCint_194_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pulse_param* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pulse_param[n];
     } else {
       p = new((void*) gvp) pulse_param[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pulse_param;
     } else {
       p = new((void*) gvp) pulse_param;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_param));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_194_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_param*) G__getstructoffset())->reset_param();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PulseRecoCint_194_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pulse_param* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pulse_param(*(pulse_param*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_param));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pulse_param G__Tpulse_param;
static int G__PulseRecoCint_194_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pulse_param*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pulse_param*) (soff+(sizeof(pulse_param)*i)))->~G__Tpulse_param();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pulse_param*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pulse_param*) (soff))->~G__Tpulse_param();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PulseRecoCint_194_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pulse_param* dest = (pulse_param*) G__getstructoffset();
   *dest = *(pulse_param*) libp->para[0].ref;
   const pulse_param& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* preco_algo_base */
static int G__PulseRecoCint_195_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((preco_algo_base*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_195_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((preco_algo_base*) G__getstructoffset())->reco((vector<uint16_t>*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_195_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const preco_algo_base*) G__getstructoffset())->get_pulse((size_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const preco_algo_base*) G__getstructoffset())->get_pulse());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_195_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const preco_algo_base*) G__getstructoffset())->get_npulse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_195_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((preco_algo_base*) G__getstructoffset())->set_ped_mean((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_195_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((preco_algo_base*) G__getstructoffset())->set_ped_rms((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_195_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const preco_algo_base*) G__getstructoffset())->ped_mean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_195_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const preco_algo_base*) G__getstructoffset())->ped_rms());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef preco_algo_base G__Tpreco_algo_base;
static int G__PulseRecoCint_195_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (preco_algo_base*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((preco_algo_base*) (soff+(sizeof(preco_algo_base)*i)))->~G__Tpreco_algo_base();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (preco_algo_base*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((preco_algo_base*) (soff))->~G__Tpreco_algo_base();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PulseRecoCint_195_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   preco_algo_base* dest = (preco_algo_base*) G__getstructoffset();
   *dest = *(preco_algo_base*) libp->para[0].ref;
   const preco_algo_base& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* algo_fixed_window */
static int G__PulseRecoCint_204_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   algo_fixed_window* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new algo_fixed_window[n];
     } else {
       p = new((void*) gvp) algo_fixed_window[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new algo_fixed_window;
     } else {
       p = new((void*) gvp) algo_fixed_window;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PulseRecoCintLN_algo_fixed_window));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_204_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((algo_fixed_window*) G__getstructoffset())->set_start_index((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_204_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((algo_fixed_window*) G__getstructoffset())->set_end_index((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PulseRecoCint_204_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   algo_fixed_window* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new algo_fixed_window(*(algo_fixed_window*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PulseRecoCintLN_algo_fixed_window));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef algo_fixed_window G__Talgo_fixed_window;
static int G__PulseRecoCint_204_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (algo_fixed_window*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((algo_fixed_window*) (soff+(sizeof(algo_fixed_window)*i)))->~G__Talgo_fixed_window();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (algo_fixed_window*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((algo_fixed_window*) (soff))->~G__Talgo_fixed_window();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PulseRecoCint_204_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   algo_fixed_window* dest = (algo_fixed_window*) G__getstructoffset();
   *dest = *(algo_fixed_window*) libp->para[0].ref;
   const algo_fixed_window& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* algo_threshold */
static int G__PulseRecoCint_205_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   algo_threshold* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new algo_threshold[n];
     } else {
       p = new((void*) gvp) algo_threshold[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new algo_threshold;
     } else {
       p = new((void*) gvp) algo_threshold;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PulseRecoCintLN_algo_threshold));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_205_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((algo_threshold*) G__getstructoffset())->set_adc_threshold((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_205_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((algo_threshold*) G__getstructoffset())->set_nsigma((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PulseRecoCint_205_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   algo_threshold* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new algo_threshold(*(algo_threshold*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PulseRecoCintLN_algo_threshold));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef algo_threshold G__Talgo_threshold;
static int G__PulseRecoCint_205_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (algo_threshold*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((algo_threshold*) (soff+(sizeof(algo_threshold)*i)))->~G__Talgo_threshold();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (algo_threshold*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((algo_threshold*) (soff))->~G__Talgo_threshold();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PulseRecoCint_205_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   algo_threshold* dest = (algo_threshold*) G__getstructoffset();
   *dest = *(algo_threshold*) libp->para[0].ref;
   const algo_threshold& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ped_estimator */
static int G__PulseRecoCint_621_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ped_estimator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ped_estimator[n];
     } else {
       p = new((void*) gvp) ped_estimator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ped_estimator;
     } else {
       p = new((void*) gvp) ped_estimator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PulseRecoCintLN_ped_estimator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_621_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ped_estimator*) G__getstructoffset())->set_nsample_head((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_621_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ped_estimator*) G__getstructoffset())->set_nsample_tail((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_621_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ped_estimator*) G__getstructoffset())->analyze_head((vector<uint16_t>*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_621_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ped_estimator*) G__getstructoffset())->analyze_tail((vector<uint16_t>*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_621_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ped_estimator*) G__getstructoffset())->mean_head());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_621_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ped_estimator*) G__getstructoffset())->rms_head());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_621_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ped_estimator*) G__getstructoffset())->mean_tail());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_621_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ped_estimator*) G__getstructoffset())->rms_tail());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PulseRecoCint_621_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ped_estimator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ped_estimator(*(ped_estimator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PulseRecoCintLN_ped_estimator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ped_estimator G__Tped_estimator;
static int G__PulseRecoCint_621_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ped_estimator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ped_estimator*) (soff+(sizeof(ped_estimator)*i)))->~G__Tped_estimator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ped_estimator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ped_estimator*) (soff))->~G__Tped_estimator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PulseRecoCint_621_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ped_estimator* dest = (ped_estimator*) G__getstructoffset();
   *dest = *(ped_estimator*) libp->para[0].ref;
   const ped_estimator& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pulse_reco */
static int G__PulseRecoCint_652_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pulse_reco* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pulse_reco[n];
     } else {
       p = new((void*) gvp) pulse_reco[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pulse_reco;
     } else {
       p = new((void*) gvp) pulse_reco;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_reco));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_652_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_reco*) G__getstructoffset())->set_reco_algo((preco_algo_base*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_652_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_reco*) G__getstructoffset())->set_ped_algo((pulse_reco::PED_METHOD) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_652_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_reco*) G__getstructoffset())->set_ped_nsample_head((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PulseRecoCint_652_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pulse_reco*) G__getstructoffset())->set_ped_nsample_tail((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PulseRecoCint_652_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pulse_reco* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pulse_reco(*(pulse_reco*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_reco));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pulse_reco G__Tpulse_reco;
static int G__PulseRecoCint_652_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pulse_reco*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pulse_reco*) (soff+(sizeof(pulse_reco)*i)))->~G__Tpulse_reco();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pulse_reco*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pulse_reco*) (soff))->~G__Tpulse_reco();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PulseRecoCint_652_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pulse_reco* dest = (pulse_reco*) G__getstructoffset();
   *dest = *(pulse_reco*) libp->para[0].ref;
   const pulse_reco& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* pulse_param */

/* preco_algo_base */

/* algo_fixed_window */

/* algo_threshold */

/* ped_estimator */

/* pulse_reco */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncPulseRecoCint {
 public:
  G__Sizep2memfuncPulseRecoCint(): p(&G__Sizep2memfuncPulseRecoCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncPulseRecoCint::*p)();
};

size_t G__get_sizep2memfuncPulseRecoCint()
{
  G__Sizep2memfuncPulseRecoCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancePulseRecoCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PulseRecoCintLN_preco_algo_base))) {
     preco_algo_base *G__Lderived;
     G__Lderived=(preco_algo_base*)0x1000;
     {
       decoder_base *G__Lpbase=(decoder_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PulseRecoCintLN_preco_algo_base),G__get_linked_tagnum(&G__PulseRecoCintLN_decoder_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PulseRecoCintLN_algo_fixed_window))) {
     algo_fixed_window *G__Lderived;
     G__Lderived=(algo_fixed_window*)0x1000;
     {
       preco_algo_base *G__Lpbase=(preco_algo_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PulseRecoCintLN_algo_fixed_window),G__get_linked_tagnum(&G__PulseRecoCintLN_preco_algo_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       decoder_base *G__Lpbase=(decoder_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PulseRecoCintLN_algo_fixed_window),G__get_linked_tagnum(&G__PulseRecoCintLN_decoder_base),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PulseRecoCintLN_algo_threshold))) {
     algo_threshold *G__Lderived;
     G__Lderived=(algo_threshold*)0x1000;
     {
       preco_algo_base *G__Lpbase=(preco_algo_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PulseRecoCintLN_algo_threshold),G__get_linked_tagnum(&G__PulseRecoCintLN_preco_algo_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       decoder_base *G__Lpbase=(decoder_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PulseRecoCintLN_algo_threshold),G__get_linked_tagnum(&G__PulseRecoCintLN_decoder_base),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PulseRecoCintLN_ped_estimator))) {
     ped_estimator *G__Lderived;
     G__Lderived=(ped_estimator*)0x1000;
     {
       decoder_base *G__Lpbase=(decoder_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PulseRecoCintLN_ped_estimator),G__get_linked_tagnum(&G__PulseRecoCintLN_decoder_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_reco))) {
     pulse_reco *G__Lderived;
     G__Lderived=(pulse_reco*)0x1000;
     {
       ana_base *G__Lpbase=(ana_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_reco),G__get_linked_tagnum(&G__PulseRecoCintLN_ana_base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       decoder_base *G__Lpbase=(decoder_base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_reco),G__get_linked_tagnum(&G__PulseRecoCintLN_decoder_base),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablePulseRecoCint() {

   /* Setting up typedef entry */
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<uint16_t>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pulse_param>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEpulse_paramcOallocatorlEpulse_paramgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEpulse_paramcOallocatorlEpulse_paramgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEpulse_paramcOallocatorlEpulse_paramgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEpulse_paramcOallocatorlEpulse_paramgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEpulse_paramcOallocatorlEpulse_paramgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int32_t>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<PMT::ch_adc_t>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pmt_waveform>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pulse_info>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,double>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,double>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,int>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,int>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::string>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::string>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string,less<string> >",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,bool>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool,less<string> >",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<double> >",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::vector<double> >",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<double,allocator<double> >,less<string> >",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<int> >",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::vector<int> >",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<int,allocator<int> >,less<string> >",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<std::string> >",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::vector<string> >",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<string,allocator<string> > >",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<string,allocator<string> >,less<string> >",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<bool> >",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::vector<bool> >",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<bool,allocator<bool> > >",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<bool,allocator<bool> >,less<string> >",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<user_info>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<PMT::ch_number_t,double>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEunsignedsPshortcOdoublecOlesslEunsignedsPshortgRcOallocatorlEpairlEconstsPunsignedsPshortcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned short,double>",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEunsignedsPshortcOdoublecOlesslEunsignedsPshortgRcOallocatorlEpairlEconstsPunsignedsPshortcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned short,double,less<unsigned short> >",117,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEunsignedsPshortcOdoublecOlesslEunsignedsPshortgRcOallocatorlEpairlEconstsPunsignedsPshortcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* pulse_param */
static void G__setup_memvarpulse_param(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_param));
   { pulse_param *p; p=(pulse_param*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->peak)-(long)(p)),100,0,0,-1,-1,-1,1,"peak=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->area)-(long)(p)),100,0,0,-1,-1,-1,1,"area=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_start)-(long)(p)),100,0,0,-1,-1,-1,1,"t_start=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_max)-(long)(p)),100,0,0,-1,-1,-1,1,"t_max=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t_end)-(long)(p)),100,0,0,-1,-1,-1,1,"t_end=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* preco_algo_base */
static void G__setup_memvarpreco_algo_base(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PulseRecoCintLN_preco_algo_base));
   { preco_algo_base *p; p=(preco_algo_base*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PulseRecoCintLN_vectorlEpulse_paramcOallocatorlEpulse_paramgRsPgR),G__defined_typename("vector<pulse_param>"),-1,2,"_pulse_v=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_param),-1,-1,2,"_pulse=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_ped_mean=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_ped_rms=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* algo_fixed_window */
static void G__setup_memvaralgo_fixed_window(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PulseRecoCintLN_algo_fixed_window));
   { algo_fixed_window *p; p=(algo_fixed_window*)0x1000; if (p) { }
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"_index_start=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"_index_end=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* algo_threshold */
static void G__setup_memvaralgo_threshold(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PulseRecoCintLN_algo_threshold));
   { algo_threshold *p; p=(algo_threshold*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_adc_thres=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_nsigma=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ped_estimator */
static void G__setup_memvarped_estimator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PulseRecoCintLN_ped_estimator));
   { ped_estimator *p; p=(ped_estimator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"_nsample_head=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,2,"_nsample_tail=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_mean_head=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_rms_head=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_mean_tail=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_rms_tail=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* pulse_reco */
static void G__setup_memvarpulse_reco(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_reco));
   { pulse_reco *p; p=(pulse_reco*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_recocLcLPED_METHOD),-1,-2,1,G__FastAllocString(2048).Format("kHEAD=%lldLL",(long long)pulse_reco::kHEAD).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_recocLcLPED_METHOD),-1,-2,1,G__FastAllocString(2048).Format("kTAIL=%lldLL",(long long)pulse_reco::kTAIL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_recocLcLPED_METHOD),-1,-2,1,G__FastAllocString(2048).Format("kBOTH=%lldLL",(long long)pulse_reco::kBOTH).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PulseRecoCintLN_preco_algo_base),-1,-1,4,"_reco_algo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PulseRecoCintLN_ped_estimator),-1,-1,4,"_ped_algo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_recocLcLPED_METHOD),-1,-1,4,"_ped_method=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEunsignedsPshortcOdoublecOlesslEunsignedsPshortgRcOallocatorlEpairlEconstsPunsignedsPshortcOdoublegRsPgRsPgR),G__defined_typename("map<PMT::ch_number_t,double>"),-1,4,"_channel_Q_m=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PulseRecoCintLN_maplEunsignedsPshortcOdoublecOlesslEunsignedsPshortgRcOallocatorlEpairlEconstsPunsignedsPshortcOdoublegRsPgRsPgR),G__defined_typename("map<PMT::ch_number_t,double>"),-1,4,"_channel_A_m=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PulseRecoCintLN_TH2D),-1,-1,4,"_ped_Mean=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PulseRecoCintLN_TH2D),-1,-1,4,"_ped_RMS=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PulseRecoCintLN_TH2D),-1,-1,4,"_channel_Q=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PulseRecoCintLN_TH2D),-1,-1,4,"_channel_A=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PulseRecoCintLN_TH1D),-1,-1,4,"_event_Q=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PulseRecoCintLN_TH1D),-1,-1,4,"_event_A=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarPulseRecoCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncpulse_param(void) {
   /* pulse_param */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_param));
   G__memfunc_setup("pulse_param",1177,G__PulseRecoCint_194_0_1, 105, G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_param), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset_param",1171,G__PulseRecoCint_194_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pulse_param", 1177, G__PulseRecoCint_194_0_3, (int) ('i'), G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_param), -1, 0, 1, 1, 1, 0, "u 'pulse_param' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pulse_param", 1303, G__PulseRecoCint_194_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PulseRecoCint_194_0_5, (int) ('u'), G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_param), -1, 1, 1, 1, 1, 0, "u 'pulse_param' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpreco_algo_base(void) {
   /* preco_algo_base */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PulseRecoCintLN_preco_algo_base));
   G__memfunc_setup("reset",547,G__PulseRecoCint_195_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reco",425,G__PulseRecoCint_195_0_3, 103, -1, -1, 0, 1, 1, 1, 0, "U 'vector<unsigned short,allocator<unsigned short> >' 'vector<uint16_t>' 10 - wf", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("get_pulse",968,G__PulseRecoCint_195_0_4, 85, G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_param), -1, 0, 1, 1, 1, 9, "k - 'size_t' 0 '0' index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_npulse",1078,G__PulseRecoCint_195_0_5, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_ped_mean",1252,G__PulseRecoCint_195_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_ped_rms",1173,G__PulseRecoCint_195_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ped_mean",825,G__PulseRecoCint_195_0_8, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ped_rms",746,G__PulseRecoCint_195_0_9, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("integral",854,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 4, 1, 2, 8, 
"U 'vector<unsigned short,allocator<unsigned short> >' 'vector<uint16_t>' 10 - wf d - - 1 - result "
"k - 'size_t' 0 '0' begin k - 'size_t' 0 '0' end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("derivative",1075,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 4, 1, 2, 8, 
"U 'vector<unsigned short,allocator<unsigned short> >' 'vector<uint16_t>' 10 - wf u 'vector<int,allocator<int> >' 'vector<int32_t>' 1 - diff "
"k - 'size_t' 0 '0' begin k - 'size_t' 0 '0' end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max",326,(G__InterfaceMethod) NULL, 107, -1, G__defined_typename("size_t"), 0, 4, 1, 2, 8, 
"U 'vector<unsigned short,allocator<unsigned short> >' 'vector<uint16_t>' 10 - wf d - - 1 - result "
"k - 'size_t' 0 '0' begin k - 'size_t' 0 '0' end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("min",324,(G__InterfaceMethod) NULL, 107, -1, G__defined_typename("size_t"), 0, 4, 1, 2, 8, 
"U 'vector<unsigned short,allocator<unsigned short> >' 'vector<uint16_t>' 10 - wf d - - 1 - result "
"k - 'size_t' 0 '0' begin k - 'size_t' 0 '0' end", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~preco_algo_base", 1683, G__PulseRecoCint_195_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PulseRecoCint_195_0_15, (int) ('u'), G__get_linked_tagnum(&G__PulseRecoCintLN_preco_algo_base), -1, 1, 1, 1, 1, 0, "u 'preco_algo_base' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncalgo_fixed_window(void) {
   /* algo_fixed_window */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PulseRecoCintLN_algo_fixed_window));
   G__memfunc_setup("algo_fixed_window",1801,G__PulseRecoCint_204_0_1, 105, G__get_linked_tagnum(&G__PulseRecoCintLN_algo_fixed_window), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reco",425,(G__InterfaceMethod) NULL,103, -1, -1, 0, 1, 1, 1, 0, "U 'vector<unsigned short,allocator<unsigned short> >' 'vector<uint16_t>' 10 - wf", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reset",547,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("set_start_index",1616,G__PulseRecoCint_204_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_end_index",1369,G__PulseRecoCint_204_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("algo_fixed_window", 1801, G__PulseRecoCint_204_0_6, (int) ('i'), G__get_linked_tagnum(&G__PulseRecoCintLN_algo_fixed_window), -1, 0, 1, 1, 1, 0, "u 'algo_fixed_window' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~algo_fixed_window", 1927, G__PulseRecoCint_204_0_7, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PulseRecoCint_204_0_8, (int) ('u'), G__get_linked_tagnum(&G__PulseRecoCintLN_algo_fixed_window), -1, 1, 1, 1, 1, 0, "u 'algo_fixed_window' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncalgo_threshold(void) {
   /* algo_threshold */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PulseRecoCintLN_algo_threshold));
   G__memfunc_setup("algo_threshold",1487,G__PulseRecoCint_205_0_1, 105, G__get_linked_tagnum(&G__PulseRecoCintLN_algo_threshold), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reco",425,(G__InterfaceMethod) NULL,103, -1, -1, 0, 1, 1, 1, 0, "U 'vector<unsigned short,allocator<unsigned short> >' 'vector<uint16_t>' 10 - wf", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reset",547,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("set_adc_threshold",1791,G__PulseRecoCint_205_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_nsigma",1066,G__PulseRecoCint_205_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - v", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("algo_threshold", 1487, G__PulseRecoCint_205_0_6, (int) ('i'), G__get_linked_tagnum(&G__PulseRecoCintLN_algo_threshold), -1, 0, 1, 1, 1, 0, "u 'algo_threshold' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~algo_threshold", 1613, G__PulseRecoCint_205_0_7, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PulseRecoCint_205_0_8, (int) ('u'), G__get_linked_tagnum(&G__PulseRecoCintLN_algo_threshold), -1, 1, 1, 1, 1, 0, "u 'algo_threshold' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncped_estimator(void) {
   /* ped_estimator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PulseRecoCintLN_ped_estimator));
   G__memfunc_setup("ped_estimator",1392,G__PulseRecoCint_621_0_1, 105, G__get_linked_tagnum(&G__PulseRecoCintLN_ped_estimator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_nsample_head",1676,G__PulseRecoCint_621_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_nsample_tail",1700,G__PulseRecoCint_621_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("analyze_head",1253,G__PulseRecoCint_621_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'vector<unsigned short,allocator<unsigned short> >' 'vector<uint16_t>' 10 - wf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("analyze_tail",1277,G__PulseRecoCint_621_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'vector<unsigned short,allocator<unsigned short> >' 'vector<uint16_t>' 10 - wf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mean_head",914,G__PulseRecoCint_621_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rms_head",835,G__PulseRecoCint_621_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mean_tail",938,G__PulseRecoCint_621_0_8, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rms_tail",859,G__PulseRecoCint_621_0_9, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ped_estimator", 1392, G__PulseRecoCint_621_0_10, (int) ('i'), G__get_linked_tagnum(&G__PulseRecoCintLN_ped_estimator), -1, 0, 1, 1, 1, 0, "u 'ped_estimator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ped_estimator", 1518, G__PulseRecoCint_621_0_11, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PulseRecoCint_621_0_12, (int) ('u'), G__get_linked_tagnum(&G__PulseRecoCintLN_ped_estimator), -1, 1, 1, 1, 1, 0, "u 'ped_estimator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpulse_reco(void) {
   /* pulse_reco */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_reco));
   G__memfunc_setup("pulse_reco",1073,G__PulseRecoCint_652_0_1, 105, G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_reco), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initialize",1074,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("analyze",756,(G__InterfaceMethod) NULL,103, -1, -1, 0, 1, 1, 1, 0, "U 'storage_manager' - 0 - storage", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("set_reco_algo",1366,G__PulseRecoCint_652_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'preco_algo_base' - 0 - algo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_ped_algo",1254,G__PulseRecoCint_652_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i 'pulse_reco::PED_METHOD' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_ped_nsample_head",2084,G__PulseRecoCint_652_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set_ped_nsample_tail",2108,G__PulseRecoCint_652_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pulse_reco", 1073, G__PulseRecoCint_652_0_9, (int) ('i'), G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_reco), -1, 0, 1, 1, 1, 0, "u 'pulse_reco' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pulse_reco", 1199, G__PulseRecoCint_652_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PulseRecoCint_652_0_11, (int) ('u'), G__get_linked_tagnum(&G__PulseRecoCintLN_pulse_reco), -1, 1, 1, 1, 1, 0, "u 'pulse_reco' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncPulseRecoCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalPulseRecoCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcPulseRecoCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__PulseRecoCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR = { "vector<unsigned short,allocator<unsigned short> >" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_decoder_base = { "decoder_base" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_pulse_param = { "pulse_param" , 115 , -1 };
G__linked_taginfo G__PulseRecoCintLN_preco_algo_base = { "preco_algo_base" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_vectorlEpulse_paramcOallocatorlEpulse_paramgRsPgR = { "vector<pulse_param,allocator<pulse_param> >" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_reverse_iteratorlEvectorlEpulse_paramcOallocatorlEpulse_paramgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pulse_param,allocator<pulse_param> >::iterator>" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_algo_fixed_window = { "algo_fixed_window" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_algo_threshold = { "algo_threshold" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR = { "vector<pmt_waveform,allocator<pmt_waveform> >" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_reverse_iteratorlEvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pmt_waveform,allocator<pmt_waveform> >::iterator>" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__PulseRecoCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR = { "map<string,int,less<string>,allocator<pair<const string,int> > >" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR = { "map<string,double,less<string>,allocator<pair<const string,double> > >" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR = { "vector<pulse_info,allocator<pulse_info> >" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_reverse_iteratorlEvectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pulse_info,allocator<pulse_info> >::iterator>" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR = { "map<string,string,less<string>,allocator<pair<const string,string> > >" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR = { "map<string,bool,less<string>,allocator<pair<const string,bool> > >" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR = { "map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR = { "map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR = { "map<string,vector<string,allocator<string> >,less<string>,allocator<pair<const string,vector<string,allocator<string> > > > >" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR = { "map<string,vector<bool,allocator<bool> >,less<string>,allocator<pair<const string,vector<bool,allocator<bool> > > > >" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR = { "vector<user_info,allocator<user_info> >" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_reverse_iteratorlEvectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiteratorgR = { "reverse_iterator<vector<user_info,allocator<user_info> >::iterator>" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_storage_manager = { "storage_manager" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_ped_estimator = { "ped_estimator" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_ana_base = { "ana_base" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_pulse_reco = { "pulse_reco" , 99 , -1 };
G__linked_taginfo G__PulseRecoCintLN_pulse_recocLcLPED_METHOD = { "pulse_reco::PED_METHOD" , 101 , -1 };
G__linked_taginfo G__PulseRecoCintLN_maplEunsignedsPshortcOdoublecOlesslEunsignedsPshortgRcOallocatorlEpairlEconstsPunsignedsPshortcOdoublegRsPgRsPgR = { "map<unsigned short,double,less<unsigned short>,allocator<pair<const unsigned short,double> > >" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablePulseRecoCint() {
  G__PulseRecoCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR.tagnum = -1 ;
  G__PulseRecoCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__PulseRecoCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__PulseRecoCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__PulseRecoCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__PulseRecoCintLN_decoder_base.tagnum = -1 ;
  G__PulseRecoCintLN_pulse_param.tagnum = -1 ;
  G__PulseRecoCintLN_preco_algo_base.tagnum = -1 ;
  G__PulseRecoCintLN_vectorlEpulse_paramcOallocatorlEpulse_paramgRsPgR.tagnum = -1 ;
  G__PulseRecoCintLN_reverse_iteratorlEvectorlEpulse_paramcOallocatorlEpulse_paramgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__PulseRecoCintLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__PulseRecoCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__PulseRecoCintLN_algo_fixed_window.tagnum = -1 ;
  G__PulseRecoCintLN_algo_threshold.tagnum = -1 ;
  G__PulseRecoCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR.tagnum = -1 ;
  G__PulseRecoCintLN_reverse_iteratorlEvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__PulseRecoCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__PulseRecoCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR.tagnum = -1 ;
  G__PulseRecoCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__PulseRecoCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__PulseRecoCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR.tagnum = -1 ;
  G__PulseRecoCintLN_reverse_iteratorlEvectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__PulseRecoCintLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__PulseRecoCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__PulseRecoCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR.tagnum = -1 ;
  G__PulseRecoCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR.tagnum = -1 ;
  G__PulseRecoCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__PulseRecoCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__PulseRecoCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__PulseRecoCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__PulseRecoCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR.tagnum = -1 ;
  G__PulseRecoCintLN_reverse_iteratorlEvectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__PulseRecoCintLN_storage_manager.tagnum = -1 ;
  G__PulseRecoCintLN_ped_estimator.tagnum = -1 ;
  G__PulseRecoCintLN_ana_base.tagnum = -1 ;
  G__PulseRecoCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__PulseRecoCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__PulseRecoCintLN_TH1D.tagnum = -1 ;
  G__PulseRecoCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__PulseRecoCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__PulseRecoCintLN_TH2D.tagnum = -1 ;
  G__PulseRecoCintLN_pulse_reco.tagnum = -1 ;
  G__PulseRecoCintLN_pulse_recocLcLPED_METHOD.tagnum = -1 ;
  G__PulseRecoCintLN_maplEunsignedsPshortcOdoublecOlesslEunsignedsPshortgRcOallocatorlEpairlEconstsPunsignedsPshortcOdoublegRsPgRsPgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablePulseRecoCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_decoder_base);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_pulse_param),sizeof(pulse_param),-1,262400,(char*)NULL,G__setup_memvarpulse_param,G__setup_memfuncpulse_param);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_preco_algo_base),sizeof(preco_algo_base),-1,263425,(char*)NULL,G__setup_memvarpreco_algo_base,G__setup_memfuncpreco_algo_base);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_vectorlEpulse_paramcOallocatorlEpulse_paramgRsPgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEpulse_paramcOallocatorlEpulse_paramgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_algo_fixed_window),sizeof(algo_fixed_window),-1,263424,(char*)NULL,G__setup_memvaralgo_fixed_window,G__setup_memfuncalgo_fixed_window);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_algo_threshold),sizeof(algo_threshold),-1,263424,(char*)NULL,G__setup_memvaralgo_threshold,G__setup_memfuncalgo_threshold);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_vectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEpmt_waveformcOallocatorlEpmt_waveformgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_vectorlEpulse_infocOallocatorlEpulse_infogRsPgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEpulse_infocOallocatorlEpulse_infogRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_maplEstringcOvectorlEstringcOallocatorlEstringgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEstringcOallocatorlEstringgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_maplEstringcOvectorlEboolcOallocatorlEboolgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_vectorlEuser_infocOallocatorlEuser_infogRsPgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_reverse_iteratorlEvectorlEuser_infocOallocatorlEuser_infogRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_storage_manager);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_ped_estimator),sizeof(ped_estimator),-1,263424,(char*)NULL,G__setup_memvarped_estimator,G__setup_memfuncped_estimator);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_ana_base);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_TH1D);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_TH2D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_pulse_reco),sizeof(pulse_reco),-1,263424,(char*)NULL,G__setup_memvarpulse_reco,G__setup_memfuncpulse_reco);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_pulse_recocLcLPED_METHOD);
   G__get_linked_tagnum_fwd(&G__PulseRecoCintLN_maplEunsignedsPshortcOdoublecOlesslEunsignedsPshortgRcOallocatorlEpairlEconstsPunsignedsPshortcOdoublegRsPgRsPgR);
}
extern "C" void G__cpp_setupPulseRecoCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupPulseRecoCint()");
  G__set_cpp_environmentPulseRecoCint();
  G__cpp_setup_tagtablePulseRecoCint();

  G__cpp_setup_inheritancePulseRecoCint();

  G__cpp_setup_typetablePulseRecoCint();

  G__cpp_setup_memvarPulseRecoCint();

  G__cpp_setup_memfuncPulseRecoCint();
  G__cpp_setup_globalPulseRecoCint();
  G__cpp_setup_funcPulseRecoCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncPulseRecoCint();
  return;
}
class G__cpp_setup_initPulseRecoCint {
  public:
    G__cpp_setup_initPulseRecoCint() { G__add_setup_func("PulseRecoCint",(G__incsetup)(&G__cpp_setupPulseRecoCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initPulseRecoCint() { G__remove_setup_func("PulseRecoCint"); }
};
G__cpp_setup_initPulseRecoCint G__cpp_setup_initializerPulseRecoCint;

